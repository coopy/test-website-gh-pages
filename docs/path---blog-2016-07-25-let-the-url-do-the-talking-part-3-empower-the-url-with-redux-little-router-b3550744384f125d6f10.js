webpackJsonp([25586211602421],{720:function(a,n){a.exports={data:{markdownRemark:{html:'<p><em>Check out Redux Little Router on <a href="https://github.com/FormidableLabs/redux-little-router">GitHub</a>!</em></p>\n<p><em>Edit: the API has changed significantly since this post (hopefully for the better!). Check out the repo for an up-to-date readme!</em></p>\n<p>In parts <a href="https://formidable.com/blog/2016/07/11/let-the-url-do-the-talking-part-1-the-pain-of-react-router-in-redux/">one</a> and <a href="https://formidable.com/blog/2016/07/19/let-the-url-do-the-talking-part-2-bargaining-and-acceptance-with-redux-and-react-router/">two</a> of this series, we found that, even with the help of integration libraries, we could not liberate URL state from the clutches of React Router.</p>\n<p>History explains the problem: before Redux, React libraries decided for themselves how much state they controlled and where they lived in the application tree. In this free-for-all atmosphere, React Router made the right decision to control URL state and even to participate in view architecture.</p>\n<p>To React Router, Redux is the usurper to the URL throne, and it won’t let go of its crown without a fight. We believe Redux is the rightful heir, and that it alone should rule the kingdom of state.</p>\n<p>Render unto React Router the things that are React, and unto Redux the things that are Redux.</p>\n<h2 id="routing-sans-router"><a href="#routing-sans-router" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Routing Sans Router?</h2>\n<p>Now that we’ve made the unusual choice of abandoning React Router, we need to find a clean alternative for routing in our Redux applications. Do we even need a library for something as (allegedly) simple as routing?</p>\n<p>The “easiest” way to route without React Router is to use the HTML5 History API. Dan Abramov even recommended this on Twitter during a React Router discussion: “If you need simple routing just use pushState browser API.” Call <code class="language-text">pushState</code> to navigate to a new URL and <code class="language-text">popState</code> to go back. Listen to <code class="language-text">window.onpopstate</code> and maybe dispatch some actions when it’s called. Sync these actions with the store. Easy, right?</p>\n<p>Of course, <a href="https://www.infoq.com/presentations/Simple-Made-Easy">easy isn’t always simple.</a> You’ll enjoy the fun of tracking down cross-browser bugs and inconsistences in the History API (even in evergreen browsers). You’ll also need to find the right place to attach your <code class="language-text">onpopstate</code> listener, create actions for every possible navigation action, and write reducer boilerplate to wire everything together. Did I mention that server rendering is off the table?</p>\n<p>There’s no reason to fight these problems in userland when a library can solve them once and for all. Furthermore, there’s no reason you should need to interact with the implementation details of routing if the Redux API can shield you from it.</p>\n<p>If we buy in to the powerful abstractions that Redux provides, we should actually use them. We need Redux-first routing.</p></p>\n<h2 id="redux-first-routing"><a href="#redux-first-routing" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Redux-First Routing</h2>\n<p>Redux-first routing means that routing actions and URL state are exposed <em>only</em> through a Redux API. The alternative is a Frankenstein that leaks implementation details and expands the API surface.</p>\n<p>What does routing look like with a pure Redux API? If you think through the problem, there’s not much involved:</p></p>\n<ul>\n<li>The user dispatches an action to navigate.</li>\n<li>The router should dispatch actions when the location changes.</li>\n<li>The app derives data from the URL state.</li>\n</ul>\n<p>Besides this core, we&#8217;d expect a few real-world extras:</p>\n<ul>\n<li>A cross-browser abstraction over the HTML5 History API.</li>\n<li>Accommodations for server rendering.</li>\n<li>Flexible, decoupled bindings to React.</li>\n</ul>\n<p>When we put these features together, we ended up with Redux Little Router.</p>\n<h2>Introducing Redux Little Router</h2>\n<p>Redux Little Router is our vision of what Redux-first routing means. Its primary goal is to empower the URL and to finally give it a voice.\n<p>Little Router provides a pure Redux API wrapper around the <a href="https://github.com/ReactTraining/history"><code class="language-text">history</code></a> library. <code class="language-text">history</code> is (ironically) the nucleus of React Router, and it provides a cross-browser abstraction over the History API with consistent behavior.</p>\n<p>Little Router provides the following Redux pieces:</p>\n<ul>\n<li>A store enhancer that wraps the history module and adds current and previous router state to your store. The enhancer listens for location changes and dispatches rich actions containing the URL, parameters, and any custom data assigned to the route.</li>\n<li>Middleware that intercepts navigation actions that manipulate the location using history.</li>\n<li>A utility function, initialStateForSSR, that initializes state for the router given a URL and/or query object (pulled from an Express or Hapi route).</li>\n</ul>\n<p>While not bound to any view library, Little Router provides the following React components:</p>\n<ul>\n<li>A <code class="language-text">&lt;Fragment&gt;</code> component that conditionally renders children based on current route and/or location conditions.</li>\n<li>A <code class="language-text">&lt;Link&gt;</code> component that sends navigation actions to the middleware when tapped or clicked. <code class="language-text">&lt;Link&gt;</code> respects default modifier key and right-click behavior. A sibling component, <code class="language-text">&lt;PersistentQueryLink&gt;</code>, persists the existing query string on navigation.</li>\n<li>A <code class="language-text">provideRouter</code> HOC that passes down everything <code class="language-text">&lt;Fragment&gt;</code> and <code class="language-text">&lt;Link&gt;</code> need via context.</li>\n</ul>\n<h2 id="navigation"><a href="#navigation" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Navigation</h2>\n<p>To navigate to a new URL, dispatch a <code class="language-text">PUSH</code> action:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">PUSH</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-little-router\'</span><span class="token punctuation">;</span>\n\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  type<span class="token punctuation">:</span> <span class="token constant">PUSH</span><span class="token punctuation">,</span>\n  payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    pathname<span class="token punctuation">:</span> <span class="token string">\'/messages\'</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      ayy<span class="token punctuation">:</span> <span class="token string">\'lmao\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The payload can be any valid <code class="language-text">history</code> <a href="https://github.com/ReactTraining/history/blob/master/docs/Location.md#location-descriptors">location descriptor</a>.</p>\n<p>Little Router also provides the <code class="language-text">REPLACE</code>, <code class="language-text">GO</code>, <code class="language-text">GO_FORWARD</code> and <code class="language-text">GO_BACK</code> actions that correspond to the <code class="language-text">history</code> <a href="https://github.com/ReactTraining/history/blob/master/docs/GettingStarted.md#navigation">navigation methods</a>.</p>\n<p>You’ll use <code class="language-text">&lt;Link&gt;</code> for navigation more often, but the programmatic option is available and useful.</p>\n<h2 id="provided-actions-and-state"><a href="#provided-actions-and-state" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Provided actions and state</h2>\n<p>On location changes, the middleware dispatches a LOCATION_CHANGED action that contains at least the following properties:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// For a URL matching /messages/:user</span>\n<span class="token punctuation">{</span>\n  url<span class="token punctuation">:</span> <span class="token string">\'/messages/a-user-has-no-name\'</span><span class="token punctuation">,</span>\n  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> <span class="token string">\'a-user-has-no-name\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">// if your `history` instance uses `useQueries`</span>\n    some<span class="token punctuation">:</span> <span class="token string">\'thing\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  result<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    arbitrary<span class="token punctuation">:</span> <span class="token string">\'data that you defined in your routes object!\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Your custom middleware can intercept this action to dispatch new actions in response to URL changes.</p>\n<p>The reducer consumes this action and adds the following to the root of the state tree on the <code class="language-text">router</code> property:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n\n  url<span class="token punctuation">:</span> <span class="token string">\'/messages/a-user-has-no-name\'</span><span class="token punctuation">,</span>\n  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> <span class="token string">\'a-user-has-no-name\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    some<span class="token punctuation">:</span> <span class="token string">\'thing\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  result<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    arbitrary<span class="token punctuation">:</span> <span class="token string">\'data that you defined in your routes object!\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  previous<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    url<span class="token punctuation">:</span> <span class="token string">\'/messages\'</span><span class="token punctuation">,</span>\n    params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>\n    result<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      more<span class="token punctuation">:</span> <span class="token string">\'arbitrary data that you defined in your routes object!\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Your custom reducers or selectors can derive a large portion of your app’s state from the URLs in the <code class="language-text">router</code> property.</p>\n<h2 id="react-bindings-and-usage"><a href="#react-bindings-and-usage" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>React bindings and usage</h2>\n<h3 id="code-classlanguage-textltfragmentgtcode"><a href="#code-classlanguage-textltfragmentgtcode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a><code class="language-text">&lt;Fragment&gt;</code></h3>\n<p>A fragment displays its child elements only if a certain route (or a condition of a route) is active. Think of <code class="language-text">&lt;Fragment&gt;</code> as the midpoint of a “flexibility continuum” that starts with raw switch statements and ends with React Router’s <code class="language-text">&lt;Route&gt;</code> component. Fragments can live anywhere within the React tree, making split-pane or nested UIs easy to work with.</p>\n<p>The simplest fragment is one that displays when a route is active:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Fragment forRoute<span class="token operator">=</span><span class="token string">\'/home/messages/:team\'</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>p<span class="token operator">></span>This is the team messages page<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></code></pre>\n      </div>\n<p>You can also specify a fragment that displays on multiple routes:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Fragment forRoutes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'/home/messages\'</span><span class="token punctuation">,</span> <span class="token string">\'/home\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>p<span class="token operator">></span>This displays <span class="token keyword">in</span> a couple <span class="token keyword">of</span> places<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></code></pre>\n      </div>\n<p>Finally, you can match a fragment against anything in the current <code class="language-text">location</code> object:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Fragment withConditions<span class="token operator">=</span><span class="token punctuation">{</span>location <span class="token operator">=></span> location<span class="token punctuation">.</span>query<span class="token punctuation">.</span>superuser<span class="token punctuation">}</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>p<span class="token operator">></span>Superusers see <span class="token keyword">this</span> on all routes<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></code></pre>\n      </div>\n<p>You can also use <code class="language-text">withConditions</code> in conjunction with either <code class="language-text">forRoute</code> or <code class="language-text">forRoutes</code>.</p>\n<h3 id="code-classlanguage-textltlinkgtcode"><a href="#code-classlanguage-textltlinkgtcode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a><code class="language-text">&lt;Link&gt;</code></h3>\n<p>Using the <code class="language-text">&lt;Link&gt;</code> component is simple:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">\'anything\'</span> href<span class="token operator">=</span><span class="token string">\'/yo\'</span><span class="token operator">></span>\n  Share Order\n<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre>\n      </div>\n<p>Alternatively, you can pass in a <a href="https://github.com/ReactTraining/history/blob/master/docs/Location.md#location-descriptors">location descriptor</a> to <code class="language-text">href</code>. This is useful for passing query objects:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">\'anything\'</span> href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n  pathname<span class="token punctuation">:</span> <span class="token string">\'/home/messages/a-team?test=ing\'</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    test<span class="token punctuation">:</span> <span class="token string">\'ing\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>\n  Share Order\n<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre>\n      </div>\n<p><code class="language-text">&lt;Link&gt;</code> takes an optional valueless prop, <code class="language-text">replaceState</code>, that changes the link navigation behavior from <code class="language-text">pushState</code> to <code class="language-text">replaceState</code> in the History API.</p>\n<h3 id="code-classlanguage-textprovideroutercode"><a href="#code-classlanguage-textprovideroutercode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a><code class="language-text">provideRouter</code></h3>\n<p>Like React Router’s <code class="language-text">&lt;Provider&gt;</code>, you’ll want to wrap <code class="language-text">provideRouter</code> around your app’s top-level component like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> provideRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-little-router\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> YourAppComponent <span class="token keyword">from</span> <span class="token string">\'./\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> AppComponentWithRouter <span class="token operator">=</span> <span class="token function">provideRouter</span><span class="token punctuation">(</span>YourAppComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>AppComponentWithRouter <span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This allows <code class="language-text">&lt;Fragment&gt;</code> and <code class="language-text">&lt;Link&gt;</code> to obtain their <code class="language-text">history</code> and <code class="language-text">dispatch</code> instances without manual prop passing.</p>\n<h2 id="the-inevitable-boilerplate"><a href="#the-inevitable-boilerplate" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>The Inevitable Boilerplate</h2>\n<p>What would a Redux library be without boilerplate? Little Router needs a bit of it to hook into the Redux store and to work on both client and server. The details are <a href="https://github.com/FormidableLabs/redux-little-router#wiring-up-the-boilerplate">here</a> for when you’re ready to wire it up. We’re experimenting with ways to shrink this boilerplate even further.</p>\n<h2 id="look-whos-talking"><a href="#look-whos-talking" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Look Who’s Talking</h2>\n<p>With Redux Little Router, we’ve accomplished our ultimate goal: let the URL do the talking. We’ve liberated URL state from the view layer and made it an active participant in architectural decisions. Rich URL data is once again at our disposal, allowing us to derive purely functional views from the web’s first source of truth.</p>\n<p>We’re not done with our mission yet. We want to kill off boilerplate and make server-side rendering even easier. We want feedback on the usefulness of our provided React components. More than anything, we want help with finding and patching holes in our documentation.</p>\n<p>Start a conversation with the URL. Try <a href="https://github.com/FormidableLabs/redux-little-router">Redux Little Router!</a></p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=redux-little-router&amp;type=star&amp;count=true&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=tptee&amp;type=follow&amp;count=true&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',fields:{slug:"/blog/2016/07/25/let-the-url-do-the-talking-part-3-empower-the-url-with-redux-little-router/"},frontmatter:{id:18,authorId:7,categoryIds:[5,1],date:"2016-07-25",pageDescription:"",pageKeywords:"",pageTitle:"",path:"/2016/07/25/let-the-url-do-the-talking-part-3-empower-the-url-with-redux-little-router/",title:"Let the URL do the Talking, Part 3: Empower the URL with Redux Little Router"}}},pathContext:{slug:"/blog/2016/07/25/let-the-url-do-the-talking-part-3-empower-the-url-with-redux-little-router/",prev:{fields:{slug:"/blog/2016/07/19/let-the-url-do-the-talking-part-2-bargaining-and-acceptance-with-redux-and-react-router/"},frontmatter:{authorId:7,categoryIds:[5,1],date:"2016-07-19",id:17,title:"Let the URL do the Talking, Part 2: Bargaining and Acceptance with Redux and React Router"}}}}}});