webpackJsonp([0xc1b25f2e2384],{756:function(e,a){e.exports={data:{markdownRemark:{html:'<p>Companies often eschew building native apps, thinking hybrid solutions will be easier and more cost effective to build. They end up shoving a not-so-responsive web app into some kind of native web frame, which ultimately leads to terrible user experience. Many companies opt to have two separate native teams for iOS and Android instead, but that strategy can be expensive and often comes with its own challenges. React Native, on the other hand, lets you build performant native apps using the same technologies your web team is already using. I’ve been a native app developer for many years and this is why I think React Native has become the best choice for native app development.</p>\n<h2 id="modern-developer-friendly-tooling"><a href="#modern-developer-friendly-tooling" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Modern, developer-friendly tooling</h2>\n<p>The <a href="https://facebook.github.io/react-native/docs/getting-started.html">React Native CLI</a> lets you start a new native app project that will work on both iOS and Android. These tools are great since they let you start building your app right away, rather than spending a lot of time working on setup and configuration before getting started. The tools are similar to <a href="https://developer.apple.com/xcode/">Xcode</a> or <a href="https://developer.android.com/studio/index.html">Android Studio</a> project templates, so if you’re familiar with those, it’s easy to get started. One of my favorite features of React Native app development is live reload. The tooling for both web and native apps supports live reloading of changes, which makes testing changes faster and eliminates the need to recompile and redeploy onto a device. Another advantage of live reload is that your application state is maintained. This is great for testing changes to complex flows without having to recreate the steps each time. Tools like <a href="https://github.com/Microsoft/react-native-code-push">CodePush</a> make it easy to push updates to your React Native app without having to go through the iTunes Connect or Google Play submission processes.</p>\n<h2 id="build-native-apps-quicker-with-code-sharing"><a href="#build-native-apps-quicker-with-code-sharing" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Build native apps quicker with code sharing</h2>\n<p>I have worked on several projects where there have been three client apps—web, iOS native, and Android native. More often than not, the development of each app diverges and some become more complete than others. With a React-based platform, your web and native apps can share more code used for state management, API requests, and GraphQL queries or mutations. This can help reduce inconsistencies and bugs across the board since logic doesn’t need to be duplicated across three separate applications. For example, all of your state and request logic could be built as a separate package that both the web and React Native apps consume. React Native also lets you unify your development team since the same set of technologies is used on all platforms. Since React works the same way on web as it does on native, any developer familiar with React and JavaScript can create UI components for any platform. Your React Components render to native UI elements specific to each platform, creating apps that are more performant than web-based ones.</p>\n<h2 id="the-javascript-ecosystem"><a href="#the-javascript-ecosystem" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>The JavaScript ecosystem</h2>\n<p>It’s really easy to add third-party modules to your native app in React Native – just yarn add whatever. With React Native your app has access to the entire JavaScript ecosystem of modules. Unlike native 3rd party frameworks, there are no additional package managers required, no compiler flags to add, and no worry about target SDK compatibility.</p>\n<h2 id="considerations"><a href="#considerations" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Considerations</h2>\n<p>As with every technology, there are tradeoffs to the ease of building native apps with React Native. On mobile devices, JavaScript runs on a single thread, meaning calculation-intense operations might be a better fit for a native module where multiple threads can be leveraged. To write performant native modules, you will need to understand Objective-C as well as Java, and have a good understanding of how platform APIs operate. That said, React Native is constantly being updated and has under-the-hood performance improvements rolling out regularly, so this issue may lessen over time.</p>\n<h2 id="final-thoughts"><a href="#final-thoughts" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Final Thoughts</h2>\n<p>React is already a fantastic way to build UIs for the web and components are a great way to conceptualize your UI as a function of some data. React Native builds upon React’s philosophy of “Learn once, write anywhere,” making it easy for React web developers to build native apps. Composable unified UI codebases, instant app updates, and better development tooling make React Native the better way to make native apps.\nIf you have any questions about React Native or mobile development in general, find me on Twitter at <a href="https://twitter.com/carlos_paelinck">@carlos_paelinck</a>.</p>\n<p>And if you want to check out a great example of a React Native app for data visualization, <a href="https://github.com/FormidableLabs/victory-uiexplorer-native/">Victory UI Explorer</a> by <a href="https://twitter.com/angelaknicholas">Angela Nicholas</a> is one of my favorite Formidable projects.</p>',fields:{slug:"/blog/2017/why-react-native-is-best-for-native-apps/"},frontmatter:{id:50,authorId:20,categoryIds:[1,3,7],date:"2017-06-14",pageDescription:"Composable unified UI codebases, instant app updates, and better development tooling make React Native the better way to make native apps.",pageKeywords:"react, react native, mobile, javascript, native apps",pageTitle:"Why React Native is the Best Choice for Making Native Apps",path:"/2017/why-react-native-is-best-for-native-apps/",title:"Why React Native is the Best Choice for Making Native Apps"}}},pathContext:{slug:"/blog/2017/why-react-native-is-best-for-native-apps/",prev:{fields:{slug:"/blog/2017/real-world-redux-saga-patterns/"},frontmatter:{authorId:18,categoryIds:[16,17],date:"2017-06-07",id:49,title:"Javascript Power Tools Part III: Real-world redux-saga Patterns"}}}}}});