webpackJsonp([0x9d591df668e7],{726:function(s,n){s.exports={data:{markdownRemark:{html:'<p>Ever since we announced Redux Little Router, we&#8217;ve worked hard to simplify the API, reduce boilerplate, and ease adoption for beginners. To advance these goals, we&#8217;ve introduced two new features: nested routes and nested fragments.</p>\n<p><em>Check out Redux Little Router on <a href="https://github.com/FormidableLabs/redux-little-router">GitHub</a>!</em></p>\n<h2>Nested Routes</h2>\n<p>The first step in installing Redux Little Router into your project is to define a &#8220;route configuration.&#8221; This associates arbitrary metadata with your routes, allowing you to retrieve useful route-specific values when the current URL matches a route (think page titles, data requirements, or conditional visibility of child components).</p>\n<p>Prior to <code>v9.0.0</code>, the route configuration looked like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">\'/\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Home\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/messages\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Message\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/messages/:user\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Message History\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>There&#8217;s problems with this approach. There&#8217;s significant repetition of child routes, which irritates more as your routes grow. Worse, flat routes discard all knowledge of hierarchy. Knowing details about parent routes is the only way to enable features that depend on their position in the route hierarchy (consider an &#8220;up&#8221; button that allows users to travel up the route tree).</p>\n<p>Nested routes solve both problems in a backwards-compatible way. Route definitions now look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">\'/\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Home\'</span>\n    <span class="token string">\'/messages\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Message\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'/:user\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        title<span class="token punctuation">:</span> <span class="token string">\'Message History\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/flat-routes-still-work\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Flat routes still work!\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The <code>result</code> key of your <code>router</code> reducer now recursively attaches parent route results!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// For a URL matching /messages/:user</span>\n<span class="token punctuation">{</span>\n  pathname<span class="token punctuation">:</span> <span class="token string">\'/messages/a-user-has-no-name\'</span><span class="token punctuation">,</span>\n  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    user<span class="token punctuation">:</span> <span class="token string">\'a-user-has-no-name\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  query<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    some<span class="token punctuation">:</span> <span class="token string">\'thing\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  result<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    title<span class="token punctuation">:</span> <span class="token string">\'Message History\'</span>\n    parent<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">\'Message\'</span>\n      parent<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        title<span class="token punctuation">:</span> <span class="token string">\'Home\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Notice that nested and flat routes can intermingle, with the caveat that flat routes won&#8217;t receive any parent route results.route</p>\n<h2>Nested Fragments</h2>\n<p>Treating routes as flat led to even worse problems for <code>&lt;Fragment&gt;</code>s. Consider the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Fragment forRoutes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token string">\'/messages\'</span><span class="token punctuation">,</span> <span class="token string">\'/messages/:user\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Fragment forRoutes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">\'/messages\'</span><span class="token punctuation">,</span> <span class="token string">\'/messages/:user\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>h2<span class="token operator">></span>Messages<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Fragment forRoute<span class="token operator">=</span><span class="token string">\'/messages/:user\'</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>h3<span class="token operator">></span>Message History<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span></code></pre>\n      </div>\n<p>That&#8217;s a lot of work and repetition for a simple nested UI!</p>\n<p><code>v9.0.0</code> introduces <code>&lt;RelativeFragment&gt;</code>, backporting the old <code>&lt;Fragment&gt;</code> behavior as <code>&lt;AbsoluteFragment&gt;</code>. If you&#8217;re importing <code>Fragment</code> in your current project, your behavior won&#8217;t change! We&#8217;ll make <code>&lt;RelativeFragment&gt;</code> the default in the next major version.</p>\n<p><code>&lt;RelativeFragment&gt;</code> lets you nest fragments to match your UI hierarchy to your route hierarchy, much like the <code>&lt;Route&gt;</code> component does in <code>react-router</code>. Child fragments derive their parent route from their parent fragment. Given a URL of <code>/home/bio/dat-boi</code>, and the following elements:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>RelativeFragment forRoute<span class="token operator">=</span><span class="token string">\'/home\'</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n  <span class="token operator">&lt;</span>RelativeFragment forRoute<span class="token operator">=</span><span class="token string">\'/bio\'</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>h2<span class="token operator">></span>Bios<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n    <span class="token operator">&lt;</span>RelativeFragment forRoute<span class="token operator">=</span><span class="token string">\'/dat-boi\'</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>h3<span class="token operator">></span>Dat Boi<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>\n      <span class="token operator">&lt;</span>p<span class="token operator">></span>Something something whaddup<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeFragment<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeFragment<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>RelativeFragment<span class="token operator">></span></code></pre>\n      </div>\n<p>&#8230;React will render:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>h2<span class="token operator">></span>Bios<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>\n        <span class="token operator">&lt;</span>div<span class="token operator">></span>\n          <span class="token operator">&lt;</span>h3<span class="token operator">></span>Dat Boi<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>\n          <span class="token operator">&lt;</span>p<span class="token operator">></span>Something something whaddup<span class="token operator">&lt;</span>p<span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>\n      </div>\n<p>If you&#8217;re using one <code>Fragment</code> type exclusively, you can take advantage of ES6 module syntax to reduce verbosity:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> RelativeFragment <span class="token keyword">as</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-little-router\'</span><span class="token punctuation">;</span>\n<span class="token comment">// or</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AbsoluteFragment <span class="token keyword">as</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-little-router\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We believe that embracing the hierarchy of routes empowers the URL to make smarter decisions about application state. Try out the new version of Redux Little Router today! We&#8217;d love feedback on the new APIs.</p>\n<p>There&#8217;s more to come! We plan on making the store enhancer initialization less ambiguous between client and server renders by integrating into the <code>node</code> server ecosystem. Stay tuned!</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=redux-little-router&amp;type=star&amp;count=true&amp;size=large" frameborder="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=tptee&amp;type=follow&amp;count=true&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',fields:{slug:"/blog/2016/09/13/introducing-nested-routing-in-redux-little-router/"},frontmatter:{id:24,authorId:7,categoryIds:[5,1,11],date:"2016-09-13",pageDescription:"",pageKeywords:"",pageTitle:"",path:"/2016/09/13/introducing-nested-routing-in-redux-little-router/",title:"Introducing Nested Routing in Redux Little Router"}}},pathContext:{slug:"/blog/2016/09/13/introducing-nested-routing-in-redux-little-router/",prev:{fields:{slug:"/blog/2016/09/08/builder-3-0-battle-tested-multiple-project-management/"},frontmatter:{authorId:8,categoryIds:[5],date:"2016-09-08",id:23,title:"Builder 3.0: Battle Tested Multiple Project Management"}}}}}});