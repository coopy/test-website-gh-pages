webpackJsonp([0xd7f9354a1a28],{759:function(a,s){a.exports={data:{markdownRemark:{html:'<p>We’re excited to release a tiny new open source project: react-fast-compare. react-fast-compare provides fast deep equality comparison, with specific handling for React. It’s a fork of Evgeny Poberezkin’s very clever (and very fast!) <a href="https://github.com/epoberezkin/fast-deep-equal">fast-deep-equal</a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isEqual <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"react-fast-compare"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span> <span class="token string">\'bar\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>casserole or pizza<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>casserole or pizza<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>\n      </div>\n<h2 id="highlights"><a href="#highlights" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Highlights</h2>\n<p>As the name implies, react-fast-compare aims to be the fastest deep equality comparison available. It’s very lightweight: under 600 bytes gzipped and minified. It does deep equality comparison by value for any object, as long as it doesn’t contain circular references. It also allows deep comparison of React elements.</p>\n<h2 id="using-with-react"><a href="#using-with-react" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Using with React</h2>\n<p>While projects like <a href="https://github.com/epoberezkin/fast-deep-equal">fast-deep-equal</a> are amazing for general usage, they don’t handle circular references at all, which is one of the reasons they can be so fast. Unfortunately, this strategy doesn’t work for React elements, as they contain multiple circular references. For example, an element that contains a reference to its “owner” (or parent), which in turn contains a reference to its children, including the original element. react-fast-compare adds handling for these React-specific cases.</p>\n<p>A component’s shouldComponentUpdate lifecycle method is a perfect use case for react-fast-compare, potentially saving you from needless re-renders.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> isEqual <span class="token keyword">from</span> <span class="token string">"react-fast-compare"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ExpensiveRenderer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You should only use shouldComponentUpdate if you have “deep” props, which are any props that cannot be compared with a simple equality. Examples of deep props are objects, arrays, and dates.</p>\n<p>If you don’t have any deep props (they are all shallow: strings, booleans, and numbers), you can just use a <a href="https://reactjs.org/docs/react-api.html#reactpurecomponent">PureComponent.</a> You could also consider using immutable data to allow for fast comparison of deep props, but it won’t work for every project.</p>\n<h2 id="case-study-victory"><a href="#case-study-victory" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Case Study: Victory</h2>\n<p>react-fast-compare was born from our work with <a href="https://formidable.com/open-source/victory/">Victory</a>. We <a href="https://github.com/FormidableLabs/victory-core/pull/351">identified</a> our equality check for shouldComponentUpdate as a performance bottleneck, which made sense, as it was saving us from a larger bottleneck: wasted re-renders. Our previous equality check was based on Lodash’s isEqual, and performed roughly as fast.</p>\n<p>We ultimately realized that we needed handling for React elements, and decided to create and release react-fast-compare as a new project.</p>\n<h2 id="general-usage"><a href="#general-usage" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>General Usage</h2>\n<p>react-fast-compare aims to be a very fast general deep equality check. Our goal is to remain as performant as fast-deep-equal.</p>\n<p>You may be asking, ”what about Lodash?” Lodash is a powerful utility library, and its isEqual function is very thorough. react-fast-compare is faster by virtue of the fact that it’s doing less work. For example, react-fast-compare doesn’t track circular references or allow custom comparison functions like Lodash does.</p>\n<h2 id="whats-next"><a href="#whats-next" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>What’s Next?</h2>\n<p>We would love feedback from the community, so give the library a try in your project. We were excited to see that <a href="https://github.com/jaredpalmer/formik">Formik</a> <a href="https://github.com/jaredpalmer/formik/releases/tag/v1.0.0-alpha.6">already incorporated react-fast-compare</a>. Let us know what works well, and what needs work! You can file issues on <a href="https://github.com/FormidableLabs/react-fast-compare">github</a>, or get in touch with me on <a href="https://twitter.com/bolinchris">twitter</a>.</p>',fields:{slug:"/blog/2018/introducing-react-fast-compare/"},frontmatter:{id:60,authorId:21,categoryIds:[1,4,5],date:"2018-05-07",pageDescription:"react-fast-compare provides fast deep equality comparison, with specific handling for React. It’s a fork of Evgeny Poberezkin’s very clever (and very fast!) fast-deep-equal",pageKeywords:"react-fast-compare, react, fast deep equality comparison, open source, formidable",pageTitle:"Introducing react-fast-compare",path:"/2018/introducing-react-fast-compare/",title:"Introducing react-fast-compare"}}},pathContext:{slug:"/blog/2018/introducing-react-fast-compare/",prev:{fields:{slug:"/blog/2018/nuka-react-carousel/"},frontmatter:{authorId:20,categoryIds:[1,4,5],date:"2018-04-23",id:59,title:"Nuka Carousel: The React Carousel, Rethought and Refined"}}}}}});