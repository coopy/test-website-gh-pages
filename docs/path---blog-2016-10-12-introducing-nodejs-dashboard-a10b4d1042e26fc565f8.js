webpackJsonp([0xbd76d0d7524a],{732:function(e,t){e.exports={data:{markdownRemark:{html:'<h2 id="clean-up-your-console-output-with-nodejs-dashboard"><a href="#clean-up-your-console-output-with-nodejs-dashboard" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Clean up your console output with nodejs-dashboard.</h2>\n<p>Node.js engineers spend significant amounts of time developing from the console. The usual workflow Iâ€™ve encountered goes something like: <code class="language-text">npm run test &amp;&amp; node index.js</code> which then dumps pages of text to <code class="language-text">stdout</code>. Errors can easily go unnoticed when large volumes of output are generated by your app. While this environment can be productive, we miss out on insights into the process itself. Sure you can open <code class="language-text">top</code> to retrieve process info, or go even further by instrumenting your code when something goes wrong. But why reproduce this in an ad-hoc manner when you can use <code class="language-text">nodejs-dashboard</code> to send real-time telemetry to the console?</p>\n<h3 id="check-it-out-in-action"><a href="#check-it-out-in-action" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Check it out in action:</h3>\n<p><img src="http://i.imgur.com/FDEsZEC.png"></p>\n<p>For the initial release, we support the following features:</p>\n<ul>\n<li><strong>stdout/stderr:</strong> Stream stdout and stderr to separate panes</li>\n<li><strong>CPU Utilization:</strong> Real-time CPU utilization</li>\n<li><strong>Event loop delay:</strong> Real-time event loop delay with high-water tracking</li>\n<li><strong>Memory:</strong> Heap consumption and resident memory</li>\n</ul>\n<h2 id="ready-to-take-your-nodejs-development-experience-to-the-next-level"><a href="#ready-to-take-your-nodejs-development-experience-to-the-next-level" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Ready to take your Node.js development experience to the next level?</h2>\n<p><a href="https://github.com/FormidableLabs/nodejs-dashboard">View the source code for nodejs-dashboard on Github.</a></p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=nodejs-dashboard&amp;type=star&amp;count=true&amp;size=large" frameborder="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=jasonwilson&amp;type=follow&amp;count=true&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',fields:{slug:"/blog/2016/10/12/introducing-nodejs-dashboard/"},frontmatter:{id:30,authorId:4,categoryIds:[9,2,5,6],date:"2016-10-12",pageDescription:"Clean up your console output with nodejs-dashboard.",pageKeywords:"formidable, react.js, javascript seattle, seattle web development",pageTitle:"Introducing NodeJS-Dashboard",path:"/2016/10/12/introducing-nodejs-dashboard/",title:"Introducing NodeJS-Dashboard"}}},pathContext:{slug:"/blog/2016/10/12/introducing-nodejs-dashboard/",prev:{fields:{slug:"/blog/2016/10/03/introducing-react-progressive-image/"},frontmatter:{authorId:6,categoryIds:[6],date:"2016-10-03",id:29,title:"Introducing React Progressive Image"}}}}}});