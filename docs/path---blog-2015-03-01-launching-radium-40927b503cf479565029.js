webpackJsonp([0x73d74b1a9d53],{706:function(a,n){a.exports={data:{markdownRemark:{html:'<p><a href="https://github.com/FormidableLabs/radium">Radium</a> is a set of tools to manage inline styles on React elements.</p>\n<p>It gives you powerful styling capabilities without CSS, and was built over about 2 months at <a href="https://formidable.com/">Formidable Labs</a> in response to our excitement about <a href="https://speakerdeck.com/vjeux/react-css-in-js">a talk</a> by Christopher Chedeau (and, more broadly, the mindshifting way that Facebook is building production web applications right now).</p>\n<p>In this post, we&#039;ll cover the implications of the new technology, and some of the first questions the community asked.</p>\n<h2 id="modularization"><a href="#modularization" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Modularization</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> styleGlobals <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"styleGlobals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>\n  color<span class="token punctuation">:</span> styleGlobals<span class="token punctuation">.</span>fooBlue<span class="token punctuation">,</span>\n  backgroundColor<span class="token punctuation">:</span> styleGlobals<span class="token punctuation">.</span>barRed\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><em>What&#039;s it mean?</em> No more Cascade and no more Style Sheets: all of the style properties that would have previously been defined globally in CSS are scoped to JS objects. &quot;Globals&quot; such as fonts and colors can be defined explicitly and changed programmatically, and are available only where they are required. If you&#039;ve used <code>@import</code> to modularize Sass or LESS, or simply included <code>&lt;link&gt;</code> tags in the wrong order, you know that source order matters.</p>\n<p>CommonJS modules handle the dependency tree under the hood &#8211; just modularize your styles as you would your JS and require them in the JS modules that need them. And, since they&#039;re modules, there are no more CSS global variables, overrides or inheritance. It isn&#039;t <em>actually</em> all that different from CSS. In CSS, you use <code>class=&quot;foo&quot;</code> to reference class <code>.foo</code> in a stylesheet. Here, we&#039;re using <code>style.foo</code> to reference a modularized (or not, if only one component consumes it) JavaScript object, but we gain the full expressive power of the language between the definition of the style and the reference to it on the element.</p>\n<h2 id="computation--state"><a href="#computation--state" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Computation &#x26; State:</h2>\n<p>See the Pen <a href=\'http://codepen.io/david-davidson/pen/jbYZLZ/\'>Radium State</a> by David Davidson (<a href=\'http://codepen.io/david-davidson\'>@david-davidson</a>) on <a href=\'http://codepen.io/\'>CodePen</a>. <strong>What&#039;s it mean?</strong> You can now use JS &#8211; either inline or required from an external module &#8211; to compute a style based on the state of your application (or anything you like!). Since the inline style is subject to diffing in React, this is extremely performant. Without Radium &amp; React, you have to use JS to touch the DOM and/or the stylesheet. Looking at a stylesheet, it&#039;s a small research project to figure out when styles might be manipulated somewhere in the JS.</p>\n<h2 id="explicit-modifiers"><a href="#explicit-modifiers" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Explicit Modifiers</h2>\n<p>See the Pen <a href=\'http://codepen.io/david-davidson/pen/xwpYLo/\'>Radium Modifiers</a> by David Davidson (<a href=\'http://codepen.io/david-davidson\'>@david-davidson</a>) on <a href=\'http://codepen.io/\'>CodePen</a>. <strong>What&#039;s it mean?</strong> <code>.btn-default</code> <code>.btn-primary</code> <code>.btn-warning</code> are no longer necessary, since Radium allows you to define modifiers explicitly as React props for child components.</p>\n<h2 id="support-for-pseudo-elements-and-browser-states"><a href="#support-for-pseudo-elements-and-browser-states" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Support for pseudo elements and browser states</h2>\n<p>See the Pen <a href=\'http://codepen.io/david-davidson/pen/MarQEq/\'>Radium Browser States</a> by David Davidson (<a href=\'http://codepen.io/david-davidson\'>@david-davidson</a>) on <a href=\'http://codepen.io/\'>CodePen</a>.</p>\n<h2 id="support-for-media-queries"><a href="#support-for-media-queries" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Support for media queries</h2>\n<p>Yes! See: <a href="https://github.com/FormidableLabs/radium/blob/master/docs/guides/media-queries.md">\nhttps://github.com/FormidableLabs/radium/blob/master/docs/guides/media-queries.md</a></p>\n<h2 id="progressive-enhancement"><a href="#progressive-enhancement" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Progressive Enhancement</h2>\n<p><strong>Logic!</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">display<span class="token punctuation">:</span> Modernizr<span class="token punctuation">.</span>flexbox <span class="token operator">?</span> flex <span class="token punctuation">:</span> block<span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Even more logic!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> someFlexboxStyles <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../styles/someFlexboxStyles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> someOtherStyles <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../styles/someOtherStyles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> styles <span class="token operator">=</span> Modernizr<span class="token punctuation">.</span>flexbox <span class="token operator">?</span> someFlexboxStyles <span class="token punctuation">:</span> someOtherStyles<span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>What&#039;s it mean?</strong>\nIt&#039;s now possible to make cross browser &amp; cross device style logic as complex as you need to and keep it clean. As demonstrated in the second example, you can inject different styles at any point, based on any condition, in the same way you could do:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">var</span> alertStyles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isValid <span class="token operator">?</span> coolBlueAlert <span class="token punctuation">:</span> brightRedAlert<span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="dead-code-elimination--minification"><a href="#dead-code-elimination--minification" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Dead code elimination &#x26; Minification</h2>\n<p>If your build system includes real dead code elimination (like webpack), unused Radium styles (for unused components, for instance) won&#039;t be included, which is a definite benefit over standard CSS, where it&#039;s extremely difficult to remove styles after they&#039;ve been added.</p>\n<h2 id="large-teams--maintainability"><a href="#large-teams--maintainability" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Large teams / maintainability</h2>\n<p>This will be expanded on in another blog post on React in general, the benefits of not having thousands of lines of CSS are myriad. For starters, it&#039;s more obvious what each view (in this case component) consumes. In BackboneJS, for instance, you would have to check all of the classes in the template, plus scan the document for any classes inserted with JS, then go check the rules in the CSS files. Conversely, another developer may unwittingly change the contents of a class without realizing that your view is downstream of it.</p>\n<h2 id="questions-asked-by-the-community"><a href="#questions-asked-by-the-community" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Questions asked by the community</h2>\n<h3 id="how-would-you-style-child-elements"><a href="#how-would-you-style-child-elements" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>How would you style child elements?</h3>\n<p>Suppose all <code>&lt;li&gt;</code>&#039;s that are children of a given <code>&lt;div&gt;</code>\n<strong>Scenario 1</strong>: You <strong>do</strong> have access to the <code>&lt;li&gt;</code>&#039;s you need to style (note ES6 fat arrow function, helpful for access to this.props inside of callbacks):</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">var</span> parentStyles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> listItemStyles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> builtListStyles <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildStyles</span><span class="token punctuation">(</span>listItemStyles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> listNodes <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>collection<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token punctuation">{</span>builtListStyles<span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n<span class="token operator">&lt;</span>div <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildStyles</span><span class="token punctuation">(</span>parentStyles<span class="token punctuation">)</span><span class="token operator">></span>\n <span class="token operator">&lt;</span>ul<span class="token operator">></span>\n  <span class="token punctuation">{</span>listNodes<span class="token punctuation">}</span>\n <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>Scenario 2</strong>: You <strong>do not</strong> have access to the elements you need to style. In that case, use Radium&#039;s <code>&lt;Style/&gt;</code> component. The API is still being finalized but should look something like this once it&#039;s released:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">var</span> styleContent <span class="token operator">=</span> <span class="token punctuation">{</span>\n  h1<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fontSize<span class="token punctuation">:</span> <span class="token number">20</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Style scope<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> content<span class="token operator">=</span><span class="token punctuation">{</span>styleContent<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="can-i-get-a-converter-for-my-old-css-projects"><a href="#can-i-get-a-converter-for-my-old-css-projects" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Can I get a converter for my old CSS projects?</h3>\n<p>See: <a href="https://github.com/FormidableLabs/css-to-radium">https://github.com/FormidableLabs/css-to-radium</a></p>\n<h3 id="what-about-a-browser-prefixing-solution"><a href="#what-about-a-browser-prefixing-solution" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>What about a browser prefixing solution?</h3>\n<p>See: <a href="https://github.com/FormidableLabs/radium/issues/11">https://github.com/FormidableLabs/radium/issues/11</a></p>\n<h3 id="how-does-radium-handle-css-animations"><a href="#how-does-radium-handle-css-animations" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>How does Radium handle CSS animations?</h3>\n<p>You can&#039;t define CSS keyframe animations in inline styles, so you can&#039;t define them in Radium JS objects. You can, however, reference a CSS animation you defined in a stylesheet (and soon a CSS animation you define in a <code>&lt;Style/&gt;</code> tag) in an inline style:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>Style scope<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> content<span class="token operator">=</span><span class="token punctuation">{</span>someKeyframeAnimationThatDefinesMyAnimationFoo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>\n<span class="token punctuation">{</span>\n  animation<span class="token punctuation">:</span> <span class="token string">"my-animation-foo 0.3s ease forwards"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="a-note-on-codestylecode"><a href="#a-note-on-codestylecode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>A note on <code>&#x3C;Style/></code></h2>\n<p>Inserting lots of <code>&lt;style> ... &lt;/style&gt;</code> tags <em>throughout</em> the DOM to define CSS is not performant, so use it judiciously. The <code>&lt;Style/&gt;</code> component will be released soon, but isn&#039;t available quite yet. See the above examples for functionality.</p>\n<h3 id="how-does-radium-handle-server-side-rendering"><a href="#how-does-radium-handle-server-side-rendering" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>How does Radium handle server side rendering?</h3>\n<p>Two Radium features don&#039;t work completely with server side rendering yet:</p>\n<ol>\n<li>Media queries in their present state can&#039;t be evaluated until the app is hydrated with JS, meaning that the server-side render will not include proper media query styles.</li>\n<li>Browser states aren&#039;t functional until the app is hydrated with JS, meaning that elements will not have hover, focus, or active styles until JS is loaded.</li>\n</ol>\n<p>We&#039;re working hard to quickly resolve these two issues &#8211; they are fundamentally unacceptable to us.</p>\n<h3 id="perf"><a href="#perf" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Perf?</h3>\n<p>We&#039;ll write a post dedicated to perf sometime soon. Stay tuned!</p>\n<p>The short story: Radium is highly performant because React diffs the inline styles against the previous inline styles and updates only what has changed. There is also a small conversation starting on the repo: <a href="https://github.com/FormidableLabs/radium/issues/58">https://github.com/FormidableLabs/radium/issues/58</a>.</p>\n<h2 id="in-conclusion"><a href="#in-conclusion" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>In Conclusion</h2>\n<ul>\n<li>If you want to stay abreast of releases and conversations around React, inline styling, and Radium, follow <a href="https://twitter.com/Vjeux">@vjeux</a>, <a href="https://twitter.com/alexlande">@alexlande</a>, <a href="https://twitter.com/colinmegill">@colinmegill</a> and <a href="https://twitter.com/ken_wheeler">@kenwheeler</a> on Twitter. </li>\n</li>\n<li>If you want to start playing around, fork one of the codepens above or, if you already have a project with a build, <a href="https://www.npmjs.com/package/radium">head over to npm and install Radium</a>.</li>\n</ul>\n<p>Happy hacking from <a href="https://twitter.com/formidablelabs">@formidablelabs</a>!</p>',fields:{slug:"/blog/2015/03/01/launching-radium/"},frontmatter:{id:4,authorId:13,categoryIds:[12,1],date:"2015-03-01",pageDescription:"Radium is a set of tools to manage inline styles on React elements, created by Formidable",pageKeywords:"",pageTitle:"",path:"/2015/03/01/launching-radium/",title:"Inline Styles are the Future"}}},pathContext:{slug:"/blog/2015/03/01/launching-radium/",prev:{fields:{slug:"/blog/2014/11/21/backbone-and-react/"},frontmatter:{authorId:5,categoryIds:[1],date:"2014-11-21",id:3,title:"Backbone.js with React Views"}}}}}});