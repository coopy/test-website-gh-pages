webpackJsonp([2145822301325],{760:function(a,n){a.exports={data:{markdownRemark:{html:'<blockquote>\n<p>[drinking spiked punch] What is this? Mango?\n— <cite>Steve Urkel</cite></p>\n</blockquote>\n<p>Today we are formally releasing our newest OSS offering, <code class="language-text">urql</code>. Pronounced “urkel”, it is technically an acronym for Universal React Query Library. <code class="language-text">urql</code> is a <a href="http://graphql.org/">GraphQL</a> client created in the hopes of simplifying the use of GraphQL in React.</p>\n<p>There are some amazing solutions in the space already, notably <a href="https://facebook.github.io/relay/">Relay</a> and <a href="https://www.apollographql.com/">Apollo</a>, both of which are incredibly full-featured, brilliantly engineered, and wonderfully flexible. That said, these libraries might feel like a bit much to get started with at times, especially for beginners.</p>\n<p>Our goal with <code class="language-text">urql</code> is to simplify the process of using GraphQL in React apps. There are simpler solutions, but they end up pushing the complexity of handling data storage and caching onto the user. There are also more complex solutions that allow unimagineable flexibility in a variety of library/framework contexts, but we’re looking for the sweet spot that allows developers to be productive in React with GraphQL.</p>\n<p><img src="https://camo.githubusercontent.com/160fd43e59cf4fc97d95affb8318d672a68eaf04/68747470733a2f2f696d616765732d70726f64756374696f6e2e676c6f62616c2e73736c2e666173746c792e6e65742f75706c6f6164732f706f7374732f696d6167652f39373733332f6a616c65656c2d77686974652d73746576652d75726b656c2e6a7067" alt="urql"></p>\n<h2 id="what-it-looks-like"><a href="#what-it-looks-like" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>What it looks like</h2>\n<p>Getting started is as simple as creating a <code class="language-text">Client</code> instance and passing it down through your app with our <code class="language-text">Provider</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Client <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'urql\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">\'./home\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token punctuation">:</span> <span class="token string">\'http://localhost:3001/graphql\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Provider client<span class="token operator">=</span><span class="token punctuation">{</span>client<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Next, anywhere you want to connect GraphQL to your components, you would use a <code class="language-text">Connect</code> component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Connect\n    query<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">query</span><span class="token punctuation">(</span>MyQuery<span class="token punctuation">)</span><span class="token punctuation">}</span>\n    render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loaded<span class="token punctuation">,</span> fetching<span class="token punctuation">,</span> refetch<span class="token punctuation">,</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> addTodo <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">//...Your Component</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">/</span><span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> MyQuery <span class="token operator">=</span> <span class="token template-string"><span class="token string">`\n  query {\n    todos {\n      id\n      text\n    }\n  }\n`</span></span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Aside from attempts to have a simpler API, <code class="language-text">urql</code> also has some unique functionality of its own.</p>\n<h2 id="render-props"><a href="#render-props" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Render Props</h2>\n<p>When this project started, Apollo didn’t have a render prop option, but they do now! So we <em>also</em> have render props, but an interesting difference is that we support providing multiple queries and mutations on the same <code class="language-text">Connect</code> component rather than requiring the kind of HoC nesting that you would have to do to achieve the same thing with something like Apollo.</p>\n<h2 id="caching"><a href="#caching" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Caching</h2>\n<p>In most of the managed GraphQL clients out there, caching is achieved by normalizing and parsing your queries and data. Full disclosure, I am not smart enough to design a good system for doing this, but beyond that, I had concerns about the performance and memory implications of this normalized intermediary, especially with large datasets. I’ve seen anecdotal evidence that you may also need to run a manual update because the automatic invalidation doesn’t catch everything.</p>\n<p>I set out to figure out a simpler way to cache query data. In <code class="language-text">urql</code>, queries are cached by stringifying an object containing both queries and their variables, then hashing it using a murmur hash, similar to what you may be familiar with seeing CSS-in-JS libraries doing with CSS rules and classnames.</p>\n<p>The next problem was invalidation. I figured it would be better to aggressively invalidate than to miss updates, so I wanted to find a middle ground. We inject <code class="language-text">__typename</code> fields into queries and mutations, and keep a record of what types exist on a component connection. When mutations occur, we check our connection components to see if they contain the changed types. If they do, we invalidate their cache.</p>\n<p>This behavior is on by default, but for a more fine-grained approach, we provide not only the ability to turn this off, but an additional prop called <code class="language-text">shouldInvalidate</code> that works much like React’s <code class="language-text">shouldComponentUpdate</code>. You receive arguments that provide the changed types, the component’s types, the component’s data, and the mutation’s response, which you can then use to decide whether or not an invalidation should occur.</p>\n<p>We also give you the ability to provide a custom cache. If you want to cache your queries in something like <code class="language-text">AsyncStorage</code>, you can pretty easily hook up an adapter using our asynchronous cache callbacks. Manual fetching, fetching, invalidation, full invalidation, and cache update hooks right in the render prop are also included.</p>\n<h2 id="whats-next"><a href="#whats-next" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>What’s Next</h2>\n<p>I’m looking at this release as a public beta, where I think a lot of unsupported edge cases can be shaken out. I’m interested to see how people are using GraphQL, and where I can make <code class="language-text">urql</code> work better for them. I want to develop this library iteratively, making use of actionable feedback.</p>\n<p>The biggest feature moving forward will be client side resolvers that allow you to manage your application state with GraphQL - much like you would with something like Redux, eliminating the need to include both. Imagine if you could specify a schema for your application state, including mutations and resolvers, and have it connected with the same API you use for your remote data. The next priority is to support server side rendering, which should come shortly after client resolvers.</p>\n<p>I WANT YOUR FEEDBACK. To be honest, I don’t know a ton about GraphQL. Probably more than most people, but I am by no means a power user. I would love some feedback, not only from power users, but from beginners as well. Iteratively developing a library that is powerful enough for power users, and simple enough for beginners is the ultimate goal here.</p>\n<p>If you want to give <code class="language-text">urql</code> a spin, check it out here:</p>\n<p><a href="http://github.com/FormidableLabs/urql">http://github.com/FormidableLabs/urql</a></p>',fields:{slug:"/blog/2018/introducing-urql/"},frontmatter:{id:57,authorId:9,categoryIds:[1,4,5,20],date:"2018-01-30",pageDescription:"URQL is a universal React query library designed to simplify the use of GraphQL with React.",pageKeywords:"GraphQL, React, Universal React Query Library, GraphQL with React",pageTitle:"Introducing URQL (beta), a Universal React Query Library",path:"/2018/introducing-urql/",title:"Introducing URQL (beta), a Universal React Query Library"}}},pathContext:{slug:"/blog/2018/introducing-urql/",prev:{fields:{slug:"/blog/2018/oauth-and-pkce-with-react-native/"},frontmatter:{authorId:23,categoryIds:[1,3,4,5,7,19],date:"2018-01-16",id:56,title:"OAuth and PKCE with React Native"}}}}}});