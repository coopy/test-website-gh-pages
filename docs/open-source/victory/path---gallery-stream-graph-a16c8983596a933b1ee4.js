webpackJsonp([0x745cacde6fca],{872:function(t,n){t.exports={data:{markdownRemark:{html:'<pre class="pre"><code class="language-playground_norender">// This custom component is supplied in place of Path\nclass GradientPath extends React.Component {\n  toGrayscale(color) {\n    const integerColor = parseInt(color.replace(&quot;#&quot;, &quot;&quot;), 16);\n    const r = (integerColor &gt;&gt; 16) &amp; 255;\n    const g = (integerColor &gt;&gt; 8) &amp; 255;\n    const b = integerColor &amp; 255;\n    const gray = parseInt(0.299 * r + 0.587 * g + 0.114 * b, 10);\n    return `rgb(${gray}, ${gray}, ${gray})`;\n  }\n\n  render() {\n    const { style, d, events } = this.props;\n    const gradientId = `gradient-${Math.random()}`;\n    const areaStyle = Object.assign(\n      {}, style, { fill: `url(${location.href}#${gradientId})` }\n    );\n    const percent = `${this.props.percent}%`;\n    const gray = this.toGrayscale(style.fill);\n    return (\n      &lt;g key=&quot;area&quot;&gt;\n        &lt;defs&gt;\n          &lt;linearGradient id={gradientId}&gt;\n              &lt;stop offset=&quot;0%&quot; stopColor={style.fill}/&gt;\n              &lt;stop offset={percent} stopColor={style.fill}/&gt;\n              &lt;stop offset={percent} stopColor={gray}/&gt;\n              &lt;stop offset=&quot;100%&quot; stopColor={gray}/&gt;\n          &lt;/linearGradient&gt;\n        &lt;/defs&gt;\n        &lt;path key=&quot;area&quot; style={areaStyle} d={d} {...events}/&gt;\n      &lt;/g&gt;\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      // Imagine tying this to some UI control instead\n      percent: _.random(30, 80)\n    };\n  }\n\n  // This data is manipulated to approximate a stream.\n  getStreamData() {\n    return _.range(7).map((i) =&gt; {\n      return _.range(26).map((j) =&gt; {\n        return {\n          x: j,\n          y: (10 - i) * _.random(10 - i, 20 - 2 * i),\n          _y0: -1 * (10 - i) * _.random(10 - i, 20 - 2 * i)\n        };\n      });\n    });\n  }\n\n  render() {\n    const streamData = this.getStreamData();\n\n    const colors = [\n      &quot;#006064&quot;, &quot;#00796B&quot;, &quot;#8BC34A&quot;, &quot;#DCE775&quot;,\n      &quot;#FFF59D&quot;, &quot;#F4511E&quot;, &quot;#c33409&quot;\n    ];\n\n    return (\n      &lt;div&gt;\n        &lt;VictoryChart\n          width={400} height={400}\n          domain={{ x: [0, 25], y: [-250, 250] }}\n        &gt;\n          &lt;VictoryAxis\n            style={{\n              axis: { stroke: &quot;none&quot; },\n              ticks: { stroke: &quot;none&quot; },\n              tickLabels: { fill: &quot;none&quot; },\n              grid: { stroke: &quot;lightGray&quot; }\n            }}\n            tickCount={20}\n          /&gt;\n          &lt;VictoryAxis dependentAxis\n            style={{\n              ticks: { stroke: &quot;gray&quot; },\n              tickLabels: { fill: &quot;gray&quot;, fontSize: 12 }\n            }}\n            crossAxis={false}\n          /&gt;\n\n          {\n            streamData.map((d, i) =&gt; {\n              return (\n                &lt;VictoryArea key={i}\n                  interpolation=&quot;monotoneX&quot;\n                  data={d}\n                  style={{ data: { fill: colors[i], stroke: &quot;none&quot; } }}\n                  dataComponent={\n                    &lt;Area\n                      pathComponent={&lt;GradientPath percent={this.state.percent}/&gt;}\n                    /&gt;\n                  }\n                /&gt;\n              );\n            })\n          }\n          &lt;VictoryLine\n            style={{\n              data: { stroke: &quot;#c33409&quot;, strokeWidth: 3 }\n            }}\n            data={[\n              { x: 25 * this.state.percent / 100, y: -300 },\n              { x: 25 * this.state.percent / 100, y: 300 }\n            ]}\n          /&gt;\n        &lt;/VictoryChart&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>',frontmatter:{id:13,scope:null,title:"Stream Graph"},fields:{slug:"/gallery/stream-graph/"}}},pathContext:{slug:"/gallery/stream-graph/"}}}});
//# sourceMappingURL=path---gallery-stream-graph-a16c8983596a933b1ee4.js.map