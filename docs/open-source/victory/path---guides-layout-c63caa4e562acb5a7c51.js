webpackJsonp([0x8978cb6d7602],{886:function(t,e){t.exports={data:{markdownRemark:{html:'<h1 id="layout"><a href="#layout" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Layout</h1>\n<h2 id="default-layout"><a href="#default-layout" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Default Layout</h2>\n<p>Victory components have default <code class="language-text">width</code>, <code class="language-text">height</code>, and <code class="language-text">padding</code> props defined in the default <a href="https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-theme/grayscale.js">grayscale theme</a>.</p>\n<p>Victory renders components into responsive <code class="language-text">svg</code> containers by default. Responsive containers will have a <code class="language-text">viewBox</code> attribute set to <code class="language-text">viewBox={&quot;0 0 width, height&quot;}</code> and styles <code class="language-text">width: &quot;100%&quot; height: &quot;auto&quot;</code> in addition to any styles provided via props. Because Victory renders responsive containers, the <code class="language-text">width</code> and <code class="language-text">height</code> props do not determine the width and height of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of pixels will depend on the size of the container the chart is rendered into.</p>\n<h2 id="svg-render-order"><a href="#svg-render-order" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>SVG Render Order</h2>\n<p>Victory renders svg elements, so there is no concept of z-index. Instead the render order of components determines which elements will appear above others. Changing the order of rendered components can significantly alter the appearance of a chart. Compare the following charts. The only difference between the two is the order of the children in <code class="language-text">VictoryChart</code>.</p>\n<pre class="pre"><code class="language-playground">  &lt;div style={{ display: &quot;flex&quot;, flexWrap: &quot;wrap&quot; }}&gt;\n    &lt;VictoryChart style={{ parent: { maxWidth: &quot;50%&quot; } }}&gt;\n      &lt;VictoryScatter\n        y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\n        samples={25}\n        size={5}\n        style={{ data: { fill: &quot;tomato&quot; }}}\n      /&gt;\n      &lt;VictoryLine\n        style={{ data: { stroke: &quot;orange&quot; }}}\n        y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\n      /&gt;\n      &lt;VictoryAxis/&gt;\n      &lt;VictoryAxis dependentAxis/&gt;\n    &lt;/VictoryChart&gt;\n\n    &lt;VictoryChart style={{ parent: { maxWidth: &quot;50%&quot; } }}&gt;\n      &lt;VictoryAxis/&gt;\n      &lt;VictoryAxis dependentAxis/&gt;\n      &lt;VictoryLine\n        style={{ data: { stroke: &quot;orange&quot; }}}\n        y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\n      /&gt;\n      &lt;VictoryScatter\n        y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\n        samples={25}\n        size={5}\n        style={{ data: { fill: &quot;tomato&quot; }}}\n      /&gt;\n    &lt;/VictoryChart&gt;\n  &lt;/div&gt;</code></pre>\n<h2 id="victoryportal"><a href="#victoryportal" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VictoryPortal</h2>\n<p>Some components, such as tooltips, should <em>always</em> render above others. Use <a href="https://formidable.com/open-source/victory/docs/victory-portal"><code class="language-text">VictoryPortal</code></a> to render components in a top level container so that they appear above all other elements. <code class="language-text">VictoryTooltip</code> uses <code class="language-text">VictoryPortal</code>, by default, but any component may be wrapped in <code class="language-text">VictoryPortal</code> to alter its rendering.</p>\n<p><em>caveats:</em> <code class="language-text">VictoryPortal</code> will not work with components that are not rendered within <code class="language-text">VictoryContainer</code>.</p>\n<pre class="pre"><code class="language-playground">  &lt;VictoryChart domainPadding={40}&gt;\n    &lt;VictoryStack\n      colorScale={[&quot;gold&quot;, &quot;orange&quot;, &quot;tomato&quot;]}\n      style={{\n        data: { width: 30 },\n        labels: { padding: -20 }\n      }}\n      labelComponent={\n        &lt;VictoryPortal&gt;\n          &lt;VictoryLabel/&gt;\n        &lt;/VictoryPortal&gt;\n      }\n    &gt;\n      &lt;VictoryBar\n        data={[\n          {x: 1, y: 3, label: &quot;C&quot;},\n          {x: 2, y: 4, label: &quot;C&quot;},\n          {x: 3, y: 2, label: &quot;C&quot;}\n        ]}\n      /&gt;\n      &lt;VictoryBar\n        data={[\n          {x: 1, y: 3, label: &quot;B&quot;},\n          {x: 2, y: 4, label: &quot;B&quot;},\n          {x: 3, y: 2, label: &quot;B&quot;}\n        ]}\n      /&gt;\n      &lt;VictoryBar\n        data={[\n          {x: 1, y: 3, label: &quot;A&quot;},\n          {x: 2, y: 4, label: &quot;A&quot;},\n          {x: 3, y: 2, label: &quot;A&quot;}\n        ]}\n      /&gt;\n    &lt;/VictoryStack&gt;\n    &lt;VictoryAxis/&gt;\n  &lt;/VictoryChart&gt;</code></pre>\n<h2 id="altering-victorycontainer"><a href="#altering-victorycontainer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Altering VictoryContainer</h2>\n<p>Responsive containers are not appropriate for every application, so Victory provides a couple of options for rendering static containers. The easiest way to render a static container rather than a responsive one is by setting the <code class="language-text">responsive</code> prop to false directly on the <code class="language-text">containerComponent</code> instance.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart height={200} width={300}\n  containerComponent={&lt;VictoryContainer responsive={false}/&gt;}\n&gt;\n  &lt;VictoryLine y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}/&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h2 id="rendering-components-in-custom-containers"><a href="#rendering-components-in-custom-containers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rendering components in custom containers</h2>\n<p>To render a Victory component in a custom container set the <code class="language-text">standalone</code> prop on the component to false. The component will render a <code class="language-text">g</code> tag rather than an <code class="language-text">svg</code> tag.</p>\n<pre class="pre"><code class="language-playground">&lt;svg viewBox=&quot;0 0 400 400&quot; &gt;\n  &lt;VictoryPie\n    standalone={false}\n    width={400} height={400}\n    data={[\n      {x: &quot;A&quot;, y: 33},\n      {x: &quot;B&quot;, y: 33},\n      {x: &quot;C&quot;, y: 33}\n    ]}\n    innerRadius={70} labelRadius={100}\n    style={{ labels: { fontSize: 20, fill: &quot;white&quot;}}}\n  /&gt;\n  &lt;circle cx=&quot;200&quot; cy=&quot;200&quot; r=&quot;65&quot; fill=&quot;none&quot; stroke=&quot;black&quot; strokeWidth={3}/&gt;\n  &lt;circle cx=&quot;200&quot; cy=&quot;200&quot; r=&quot;155&quot; fill=&quot;none&quot; stroke=&quot;black&quot; strokeWidth={3}/&gt;\n  &lt;VictoryLabel\n    textAnchor=&quot;middle&quot; verticalAnchor=&quot;middle&quot;\n    x={200} y={200}\n    style={{fontSize: 30}}\n    text=&quot;Label&quot;\n  /&gt;\n&lt;/svg&gt;</code></pre>\n<p><em>caveats:</em> <code class="language-text">VictoryPortal</code> will not work with components that are not rendered within <code class="language-text">VictoryContainer</code>.</p>',frontmatter:{id:7,scope:null,title:"Layout"},fields:{slug:"/guides/layout/"}}},pathContext:{slug:"/guides/layout/"}}}});
//# sourceMappingURL=path---guides-layout-c63caa4e562acb5a7c51.js.map