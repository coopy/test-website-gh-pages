{"version":3,"sources":["webpack:///path---gallery-column-chart-ecf31d082bcdfad003ad.js","webpack:///./.cache/json/gallery-column-chart.json"],"names":["webpackJsonp","860","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,++DAA2+DC,aAA8BC,GAAA,EAAAC,MAAA,KAAAC,MAAA,qBAAgDC,QAAWC,KAAA,4BAAkCC,aAAgBD,KAAA","file":"path---gallery-column-chart-ecf31d082bcdfad003ad.js","sourcesContent":["webpackJsonp([219171721594369],{\n\n/***/ 860:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">const myDataset = [\\n  [\\n      { x: &quot;a&quot;, y: 1 },\\n      { x: &quot;b&quot;, y: 2 },\\n      { x: &quot;c&quot;, y: 3 },\\n      { x: &quot;d&quot;, y: 2 },\\n      { x: &quot;e&quot;, y: 1 }\\n  ],\\n  [\\n      { x: &quot;a&quot;, y: 2 },\\n      { x: &quot;b&quot;, y: 3 },\\n      { x: &quot;c&quot;, y: 4 },\\n      { x: &quot;d&quot;, y: 5 },\\n      { x: &quot;e&quot;, y: 5 }\\n  ],\\n  [\\n      { x: &quot;a&quot;, y: 1 },\\n      { x: &quot;b&quot;, y: 2 },\\n      { x: &quot;c&quot;, y: 3 },\\n      { x: &quot;d&quot;, y: 4 },\\n      { x: &quot;e&quot;, y: 4 }\\n  ]\\n];\\n\\nclass App extends React.Component {\\n  // This is an example of a function you might use to transform your data to make 100% data\\n  transformData(dataset) {\\n    const totals = dataset[0].map((data, i) =&gt; {\\n      return dataset.reduce((memo, curr) =&gt; {\\n        return memo + curr[i].y;\\n      }, 0);\\n    });\\n    return dataset.map((data) =&gt; {\\n      return data.map((datum, i) =&gt; {\\n        return { x: datum.x, y: (datum.y / totals[i]) * 100 };\\n      });\\n    });\\n  }\\n\\n  render() {\\n    const dataset = this.transformData(myDataset);\\n    return (\\n      &lt;div&gt;\\n        &lt;VictoryChart height={400} width={400}\\n          domainPadding={{ x: 30, y: 20 }}\\n        &gt;\\n            &lt;VictoryStack\\n              colorScale={[&quot;black&quot;, &quot;blue&quot;, &quot;tomato&quot;]}\\n            &gt;\\n              {dataset.map((data, i) =&gt; {\\n                return &lt;VictoryBar data={data} key={i}/&gt;;\\n              })}\\n            &lt;/VictoryStack&gt;\\n            &lt;VictoryAxis dependentAxis\\n              tickFormat={(tick) =&gt; `${tick}%`}\\n            /&gt;\\n            &lt;VictoryAxis\\n              tickFormat={[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]}\\n            /&gt;\\n        &lt;/VictoryChart&gt;\\n      &lt;/div&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":3,\"scope\":null,\"title\":\"100% Column Chart\"},\"fields\":{\"slug\":\"/gallery/column-chart/\"}}},\"pathContext\":{\"slug\":\"/gallery/column-chart/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---gallery-column-chart-ecf31d082bcdfad003ad.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">const myDataset = [\\n  [\\n      { x: &quot;a&quot;, y: 1 },\\n      { x: &quot;b&quot;, y: 2 },\\n      { x: &quot;c&quot;, y: 3 },\\n      { x: &quot;d&quot;, y: 2 },\\n      { x: &quot;e&quot;, y: 1 }\\n  ],\\n  [\\n      { x: &quot;a&quot;, y: 2 },\\n      { x: &quot;b&quot;, y: 3 },\\n      { x: &quot;c&quot;, y: 4 },\\n      { x: &quot;d&quot;, y: 5 },\\n      { x: &quot;e&quot;, y: 5 }\\n  ],\\n  [\\n      { x: &quot;a&quot;, y: 1 },\\n      { x: &quot;b&quot;, y: 2 },\\n      { x: &quot;c&quot;, y: 3 },\\n      { x: &quot;d&quot;, y: 4 },\\n      { x: &quot;e&quot;, y: 4 }\\n  ]\\n];\\n\\nclass App extends React.Component {\\n  // This is an example of a function you might use to transform your data to make 100% data\\n  transformData(dataset) {\\n    const totals = dataset[0].map((data, i) =&gt; {\\n      return dataset.reduce((memo, curr) =&gt; {\\n        return memo + curr[i].y;\\n      }, 0);\\n    });\\n    return dataset.map((data) =&gt; {\\n      return data.map((datum, i) =&gt; {\\n        return { x: datum.x, y: (datum.y / totals[i]) * 100 };\\n      });\\n    });\\n  }\\n\\n  render() {\\n    const dataset = this.transformData(myDataset);\\n    return (\\n      &lt;div&gt;\\n        &lt;VictoryChart height={400} width={400}\\n          domainPadding={{ x: 30, y: 20 }}\\n        &gt;\\n            &lt;VictoryStack\\n              colorScale={[&quot;black&quot;, &quot;blue&quot;, &quot;tomato&quot;]}\\n            &gt;\\n              {dataset.map((data, i) =&gt; {\\n                return &lt;VictoryBar data={data} key={i}/&gt;;\\n              })}\\n            &lt;/VictoryStack&gt;\\n            &lt;VictoryAxis dependentAxis\\n              tickFormat={(tick) =&gt; `${tick}%`}\\n            /&gt;\\n            &lt;VictoryAxis\\n              tickFormat={[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]}\\n            /&gt;\\n        &lt;/VictoryChart&gt;\\n      &lt;/div&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":3,\"scope\":null,\"title\":\"100% Column Chart\"},\"fields\":{\"slug\":\"/gallery/column-chart/\"}}},\"pathContext\":{\"slug\":\"/gallery/column-chart/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/gallery-column-chart.json\n// module id = 860\n// module chunks = 219171721594369"],"sourceRoot":""}