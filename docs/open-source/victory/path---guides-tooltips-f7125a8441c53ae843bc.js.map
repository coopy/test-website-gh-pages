{"version":3,"sources":["webpack:///path---guides-tooltips-f7125a8441c53ae843bc.js","webpack:///./.cache/json/guides-tooltips.json"],"names":["webpackJsonp","889","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+mlBAAq+lBC,aAA8BC,GAAA,EAAAC,MAAA,KAAAC,MAAA,YAAuCC,QAAWC,KAAA,uBAA6BC,aAAgBD,KAAA","file":"path---guides-tooltips-f7125a8441c53ae843bc.js","sourcesContent":["webpackJsonp([222356339731301],{\n\n/***/ 889:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"tooltips\\\"><a href=\\\"#tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips</h1>\\n<p><a href=\\\"https://formidable.com/open-source/victory/docs/victory-tooltip\\\"><code class=\\\"language-text\\\">VictoryTooltip</code></a> is a label component with <code class=\\\"language-text\\\">defaultEvents</code> It renders a customizable flyout container as well as a <code class=\\\"language-text\\\">VictoryLabel</code> component. <code class=\\\"language-text\\\">VictoryTooltip</code> can be used with any Victory component by setting the <code class=\\\"language-text\\\">labelComponent</code> prop like so <code class=\\\"language-text\\\">labelComponent={&lt;VictoryTooltip/&gt;</code></p>\\n<p>This guide discusses customization and advanced usage of tooltips in Victory</p>\\n<h2 id=\\\"simple-tooltips\\\"><a href=\\\"#simple-tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple tooltips</h2>\\n<p>The simplest way to add tooltips to a chart is to use <code class=\\\"language-text\\\">VictoryTooltip</code> as a <code class=\\\"language-text\\\">labelComponent</code> as in the example below:</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 2, y: 5, label: &quot;right-side-up&quot;},\\n      {x: 4, y: -6, label: &quot;upside-down&quot;},\\n      {x: 6, y: 4, label: &quot;tiny&quot;},\\n      {x: 8, y: -5, label: &quot;or a little \\\\n BIGGER&quot;},\\n      {x: 10, y: 7, label: &quot;automatically&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<p>When tooltips are added to a chart in this way, <code class=\\\"language-text\\\">defaultEvents</code> on <code class=\\\"language-text\\\">VictoryTooltip</code> are automatically added to the component using them, in this case <code class=\\\"language-text\\\">VictoryBar</code>. By default, <code class=\\\"language-text\\\">VictoryTooltip</code> will adjust its position, orientation, and the width and height of its container to match the corresponding data and labels.</p>\\n<h2 id=\\\"customizing-tooltips\\\"><a href=\\\"#customizing-tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Customizing Tooltips</h2>\\n<p>Tooltips can be customized directly on the <code class=\\\"language-text\\\">VictoryTooltip</code> component</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={\\n      &lt;VictoryTooltip\\n        cornerRadius={(d) =&gt; d.x &gt; 6 ? 0 : 20}\\n        pointerLength={(d) =&gt; d.y &gt; 0 ? 5 : 20}\\n        flyoutStyle={{\\n          stroke: (d) =&gt; d.x === 10 ?\\n            &quot;tomato&quot; : &quot;black&quot;\\n        }}\\n      /&gt;\\n    }\\n    data={[\\n      {x: 2, y: 5, label: &quot;right-side-up&quot;},\\n      {x: 4, y: -6, label: &quot;upside-down&quot;},\\n      {x: 6, y: 4, label: &quot;tiny&quot;},\\n      {x: 8, y: -5, label: &quot;or a little \\\\n BIGGER&quot;},\\n      {x: 10, y: 7, label: &quot;automatically&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<p><code class=\\\"language-text\\\">VictoryTooltip</code> is composed of <a href=\\\"https://formidable.com/open-source/victory/docs/victory-label\\\"><code class=\\\"language-text\\\">VictoryLabel</code></a> and the primitive <a href=\\\"https://formidable.com/open-source/victory/docs/victory-primitives#flyout\\\"><code class=\\\"language-text\\\">Flyout</code></a> component. Both of these components are highly configurable, but may also be replaced if necessary.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomFlyout extends React.Component {\\n  render() {\\n    const {x, y, orientation} = this.props;\\n    const newY = orientation === &quot;top&quot; ? y - 25 : y + 25;\\n    return (\\n      &lt;g&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;20&quot; stroke=&quot;tomato&quot; fill=&quot;none&quot;/&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;25&quot; stroke=&quot;orange&quot; fill=&quot;none&quot;/&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;30&quot; stroke=&quot;gold&quot; fill=&quot;none&quot;/&gt;\\n      &lt;/g&gt;\\n    );\\n  }\\n}\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n          domain={{ x: [0, 11], y: [-10, 10] }}\\n        &gt;\\n          &lt;VictoryBar\\n            labelComponent={\\n              &lt;VictoryTooltip\\n                flyoutComponent={&lt;CustomFlyout/&gt;}\\n              /&gt;\\n            }\\n            data={[\\n              {x: 2, y: 5, label: &quot;A&quot;},\\n              {x: 4, y: -6, label: &quot;B&quot;},\\n              {x: 6, y: 4, label: &quot;C&quot;},\\n              {x: 8, y: -5, label: &quot;D&quot;},\\n              {x: 10, y: 7, label: &quot;E&quot;}\\n            ]}\\n            style={{\\n              data: {fill: &quot;tomato&quot;, width: 20},\\n              labels: { fill: &quot;tomato&quot;}\\n            }}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\\n<h2 id=\\\"tooltips-with-victoryvoronoicontainer\\\"><a href=\\\"#tooltips-with-victoryvoronoicontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips with VictoryVoronoiContainer</h2>\\n<p>Voronoi tooltips are useful for adding tooltips to a line, or adding tooltips to data points that\\nare too small to hover over effectively. <code class=\\\"language-text\\\">VictoryVoronoiContainer</code> calculates a voronoi diagram\\nbased on the data of every child component it renders. The voronoi data is used to associate a\\nmouse position with its nearest data point(s). When <code class=\\\"language-text\\\">VictoryVoronoiContainer</code> is added as the\\n<code class=\\\"language-text\\\">containerComponent</code> of your chart, changes in mouse position will add and remove the <code class=\\\"language-text\\\">active</code> prop\\non appropriate data and label elements.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{x: [0, 5], y: [-5, 5]}}\\n  containerComponent={&lt;VictoryVoronoiContainer/&gt;}\\n&gt;\\n  &lt;VictoryScatter\\n    style={{\\n      data: {fill: &quot;tomato&quot;}, labels: {fill: &quot;tomato&quot;}\\n    }}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 1, y: -4},\\n      {x: 2, y: 4},\\n      {x: 3, y: 2},\\n      {x: 4, y: 1}\\n    ]}\\n  /&gt;\\n  &lt;VictoryScatter\\n    style={{\\n      data: {fill: &quot;blue&quot;}, labels: {fill: &quot;blue&quot;}\\n    }}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 1, y: -3},\\n      {x: 2, y: 3},\\n      {x: 3, y: 3},\\n      {x: 4, y: 0}\\n    ]}\\n  /&gt;\\n  &lt;VictoryScatter\\n    data={[\\n      {x: 1, y: 4},\\n      {x: 2, y: -4},\\n      {x: 3, y: -2},\\n      {x: 4, y: -3}\\n    ]}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"multi-point-tooltips-with-victoryvoronoicontainer\\\"><a href=\\\"#multi-point-tooltips-with-victoryvoronoicontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Multi-point Tooltips with VictoryVoronoiContainer</h2>\\n<p><code class=\\\"language-text\\\">VictoryVoronoiContainer</code> can also be used to create multi-point labels when the <code class=\\\"language-text\\\">labels</code> prop is\\nprovided. In the example below the <code class=\\\"language-text\\\">voronoiDimension</code> prop indicates that the voronoi diagram\\nwill only be specific to the x dimension. For a given mouse position, all data matching the\\nassociated x value will be activated regardless of y value. In the following example, this leads to\\nseveral tooltips being active at the same time. Provide a <code class=\\\"language-text\\\">labels</code> and (optionally) a\\n<code class=\\\"language-text\\\">labelComponent</code> prop to configure multi-point labels.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  containerComponent={\\n    &lt;VictoryVoronoiContainer voronoiDimension=&quot;x&quot;\\n      labels={(d) =&gt; `y: ${d.y}`}\\n      labelComponent={&lt;VictoryTooltip cornerRadius={0} flyoutStyle={{fill: &quot;white&quot;}}/&gt;}\\n    /&gt;\\n  }\\n&gt;\\n  &lt;VictoryAxis/&gt;\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: 5, l: &quot;one&quot;},\\n      {x: 1.5, y: 5, l: &quot;one point five&quot;},\\n      {x: 2, y: 4, l: &quot;two&quot;},\\n      {x: 3, y: -2, l: &quot;three&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;tomato&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;tomato&quot;}\\n    }}\\n  /&gt;\\n\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: -3, l: &quot;red&quot;},\\n      {x: 2, y: 5, l: &quot;green&quot;},\\n      {x: 3, y: 3, l: &quot;blue&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;blue&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;blue&quot;}\\n    }}\\n  /&gt;\\n\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: 5, l: &quot;cat&quot;},\\n      {x: 2, y: -4, l: &quot;dog&quot;},\\n      {x: 3, y: -2, l: &quot;bird&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;black&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;black&quot;}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"tooltips-with-other-events\\\"><a href=\\\"#tooltips-with-other-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips with Other Events</h2>\\n<p><code class=\\\"language-text\\\">VictoryTooltip</code> automatically attaches events to data components. When events of the same type are specified for data components, it is necessary to reconcile events so that tooltips still work. For web, the default tooltip events are:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">static</span> defaultEvents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  eventHandlers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    onMouseOver<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"labels\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> active<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onMouseOut<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"labels\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> active<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>When other <code class=\\\"language-text\\\">onMouseOver</code> and <code class=\\\"language-text\\\">onMouseOut</code> events are specified for data, the event returns described above must be added to the events for tooltips to continue to work properly.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 2, y: 5, label: &quot;A&quot;},\\n      {x: 4, y: -6, label: &quot;B&quot;},\\n      {x: 6, y: 4, label: &quot;C&quot;},\\n      {x: 8, y: -5, label: &quot;D&quot;},\\n      {x: 10, y: 7, label: &quot;E&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n    events={[{\\n      target: &quot;data&quot;,\\n      eventHandlers: {\\n        onMouseOver: () =&gt; {\\n          return [\\n            {\\n              target: &quot;data&quot;,\\n              mutation: () =&gt; ({style: {fill: &quot;gold&quot;, width: 30}})\\n            }, {\\n              target: &quot;labels&quot;,\\n              mutation: () =&gt; ({ active: true })\\n            }\\n          ];\\n        },\\n        onMouseOut: () =&gt; {\\n          return [\\n            {\\n              target: &quot;data&quot;,\\n              mutation: () =&gt; {}\\n            }, {\\n              target: &quot;labels&quot;,\\n              mutation: () =&gt; ({ active: false })\\n            }\\n          ];\\n        }\\n      }\\n    }]}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"wrapping-victorytooltip\\\"><a href=\\\"#wrapping-victorytooltip\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Wrapping VictoryTooltip</h2>\\n<p>The events that control <code class=\\\"language-text\\\">VictoryTooltip</code> are stored on the static <code class=\\\"language-text\\\">defaultEvents</code> property. Wrapped instances of <code class=\\\"language-text\\\">VictoryTooltip</code> will need to replicate or hoist this property in order to add automatic events to the components that use them.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomTooltip extends React.Component {\\n  static defaultEvents = VictoryTooltip.defaultEvents\\n  render() {\\n    const {x, y} = this.props;\\n    const rotation = `rotate(45 ${x} ${y})`\\n    return (\\n      &lt;g transform={rotation}&gt;\\n        &lt;VictoryTooltip {...this.props} renderInPortal={false}/&gt;\\n      &lt;/g&gt;\\n    );\\n  }\\n}\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n          domain={{ x: [0, 11], y: [-10, 10] }}\\n        &gt;\\n          &lt;VictoryBar\\n            labelComponent={&lt;CustomTooltip/&gt;}\\n            data={[\\n              {x: 2, y: 5, label: &quot;A&quot;},\\n              {x: 4, y: -6, label: &quot;B&quot;},\\n              {x: 6, y: 4, label: &quot;C&quot;},\\n              {x: 8, y: -5, label: &quot;D&quot;},\\n              {x: 10, y: 7, label: &quot;E&quot;}\\n            ]}\\n            style={{\\n              data: {fill: &quot;tomato&quot;, width: 20}\\n            }}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":9,\"scope\":null,\"title\":\"Tooltips\"},\"fields\":{\"slug\":\"/guides/tooltips/\"}}},\"pathContext\":{\"slug\":\"/guides/tooltips/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-tooltips-f7125a8441c53ae843bc.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"tooltips\\\"><a href=\\\"#tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips</h1>\\n<p><a href=\\\"https://formidable.com/open-source/victory/docs/victory-tooltip\\\"><code class=\\\"language-text\\\">VictoryTooltip</code></a> is a label component with <code class=\\\"language-text\\\">defaultEvents</code> It renders a customizable flyout container as well as a <code class=\\\"language-text\\\">VictoryLabel</code> component. <code class=\\\"language-text\\\">VictoryTooltip</code> can be used with any Victory component by setting the <code class=\\\"language-text\\\">labelComponent</code> prop like so <code class=\\\"language-text\\\">labelComponent={&lt;VictoryTooltip/&gt;</code></p>\\n<p>This guide discusses customization and advanced usage of tooltips in Victory</p>\\n<h2 id=\\\"simple-tooltips\\\"><a href=\\\"#simple-tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple tooltips</h2>\\n<p>The simplest way to add tooltips to a chart is to use <code class=\\\"language-text\\\">VictoryTooltip</code> as a <code class=\\\"language-text\\\">labelComponent</code> as in the example below:</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 2, y: 5, label: &quot;right-side-up&quot;},\\n      {x: 4, y: -6, label: &quot;upside-down&quot;},\\n      {x: 6, y: 4, label: &quot;tiny&quot;},\\n      {x: 8, y: -5, label: &quot;or a little \\\\n BIGGER&quot;},\\n      {x: 10, y: 7, label: &quot;automatically&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<p>When tooltips are added to a chart in this way, <code class=\\\"language-text\\\">defaultEvents</code> on <code class=\\\"language-text\\\">VictoryTooltip</code> are automatically added to the component using them, in this case <code class=\\\"language-text\\\">VictoryBar</code>. By default, <code class=\\\"language-text\\\">VictoryTooltip</code> will adjust its position, orientation, and the width and height of its container to match the corresponding data and labels.</p>\\n<h2 id=\\\"customizing-tooltips\\\"><a href=\\\"#customizing-tooltips\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Customizing Tooltips</h2>\\n<p>Tooltips can be customized directly on the <code class=\\\"language-text\\\">VictoryTooltip</code> component</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={\\n      &lt;VictoryTooltip\\n        cornerRadius={(d) =&gt; d.x &gt; 6 ? 0 : 20}\\n        pointerLength={(d) =&gt; d.y &gt; 0 ? 5 : 20}\\n        flyoutStyle={{\\n          stroke: (d) =&gt; d.x === 10 ?\\n            &quot;tomato&quot; : &quot;black&quot;\\n        }}\\n      /&gt;\\n    }\\n    data={[\\n      {x: 2, y: 5, label: &quot;right-side-up&quot;},\\n      {x: 4, y: -6, label: &quot;upside-down&quot;},\\n      {x: 6, y: 4, label: &quot;tiny&quot;},\\n      {x: 8, y: -5, label: &quot;or a little \\\\n BIGGER&quot;},\\n      {x: 10, y: 7, label: &quot;automatically&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<p><code class=\\\"language-text\\\">VictoryTooltip</code> is composed of <a href=\\\"https://formidable.com/open-source/victory/docs/victory-label\\\"><code class=\\\"language-text\\\">VictoryLabel</code></a> and the primitive <a href=\\\"https://formidable.com/open-source/victory/docs/victory-primitives#flyout\\\"><code class=\\\"language-text\\\">Flyout</code></a> component. Both of these components are highly configurable, but may also be replaced if necessary.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomFlyout extends React.Component {\\n  render() {\\n    const {x, y, orientation} = this.props;\\n    const newY = orientation === &quot;top&quot; ? y - 25 : y + 25;\\n    return (\\n      &lt;g&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;20&quot; stroke=&quot;tomato&quot; fill=&quot;none&quot;/&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;25&quot; stroke=&quot;orange&quot; fill=&quot;none&quot;/&gt;\\n        &lt;circle cx={x} cy={newY} r=&quot;30&quot; stroke=&quot;gold&quot; fill=&quot;none&quot;/&gt;\\n      &lt;/g&gt;\\n    );\\n  }\\n}\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n          domain={{ x: [0, 11], y: [-10, 10] }}\\n        &gt;\\n          &lt;VictoryBar\\n            labelComponent={\\n              &lt;VictoryTooltip\\n                flyoutComponent={&lt;CustomFlyout/&gt;}\\n              /&gt;\\n            }\\n            data={[\\n              {x: 2, y: 5, label: &quot;A&quot;},\\n              {x: 4, y: -6, label: &quot;B&quot;},\\n              {x: 6, y: 4, label: &quot;C&quot;},\\n              {x: 8, y: -5, label: &quot;D&quot;},\\n              {x: 10, y: 7, label: &quot;E&quot;}\\n            ]}\\n            style={{\\n              data: {fill: &quot;tomato&quot;, width: 20},\\n              labels: { fill: &quot;tomato&quot;}\\n            }}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\\n<h2 id=\\\"tooltips-with-victoryvoronoicontainer\\\"><a href=\\\"#tooltips-with-victoryvoronoicontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips with VictoryVoronoiContainer</h2>\\n<p>Voronoi tooltips are useful for adding tooltips to a line, or adding tooltips to data points that\\nare too small to hover over effectively. <code class=\\\"language-text\\\">VictoryVoronoiContainer</code> calculates a voronoi diagram\\nbased on the data of every child component it renders. The voronoi data is used to associate a\\nmouse position with its nearest data point(s). When <code class=\\\"language-text\\\">VictoryVoronoiContainer</code> is added as the\\n<code class=\\\"language-text\\\">containerComponent</code> of your chart, changes in mouse position will add and remove the <code class=\\\"language-text\\\">active</code> prop\\non appropriate data and label elements.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{x: [0, 5], y: [-5, 5]}}\\n  containerComponent={&lt;VictoryVoronoiContainer/&gt;}\\n&gt;\\n  &lt;VictoryScatter\\n    style={{\\n      data: {fill: &quot;tomato&quot;}, labels: {fill: &quot;tomato&quot;}\\n    }}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 1, y: -4},\\n      {x: 2, y: 4},\\n      {x: 3, y: 2},\\n      {x: 4, y: 1}\\n    ]}\\n  /&gt;\\n  &lt;VictoryScatter\\n    style={{\\n      data: {fill: &quot;blue&quot;}, labels: {fill: &quot;blue&quot;}\\n    }}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 1, y: -3},\\n      {x: 2, y: 3},\\n      {x: 3, y: 3},\\n      {x: 4, y: 0}\\n    ]}\\n  /&gt;\\n  &lt;VictoryScatter\\n    data={[\\n      {x: 1, y: 4},\\n      {x: 2, y: -4},\\n      {x: 3, y: -2},\\n      {x: 4, y: -3}\\n    ]}\\n    labels={(d) =&gt; d.y}\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    size={(datum, active) =&gt; active ? 5 : 3}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"multi-point-tooltips-with-victoryvoronoicontainer\\\"><a href=\\\"#multi-point-tooltips-with-victoryvoronoicontainer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Multi-point Tooltips with VictoryVoronoiContainer</h2>\\n<p><code class=\\\"language-text\\\">VictoryVoronoiContainer</code> can also be used to create multi-point labels when the <code class=\\\"language-text\\\">labels</code> prop is\\nprovided. In the example below the <code class=\\\"language-text\\\">voronoiDimension</code> prop indicates that the voronoi diagram\\nwill only be specific to the x dimension. For a given mouse position, all data matching the\\nassociated x value will be activated regardless of y value. In the following example, this leads to\\nseveral tooltips being active at the same time. Provide a <code class=\\\"language-text\\\">labels</code> and (optionally) a\\n<code class=\\\"language-text\\\">labelComponent</code> prop to configure multi-point labels.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  containerComponent={\\n    &lt;VictoryVoronoiContainer voronoiDimension=&quot;x&quot;\\n      labels={(d) =&gt; `y: ${d.y}`}\\n      labelComponent={&lt;VictoryTooltip cornerRadius={0} flyoutStyle={{fill: &quot;white&quot;}}/&gt;}\\n    /&gt;\\n  }\\n&gt;\\n  &lt;VictoryAxis/&gt;\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: 5, l: &quot;one&quot;},\\n      {x: 1.5, y: 5, l: &quot;one point five&quot;},\\n      {x: 2, y: 4, l: &quot;two&quot;},\\n      {x: 3, y: -2, l: &quot;three&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;tomato&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;tomato&quot;}\\n    }}\\n  /&gt;\\n\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: -3, l: &quot;red&quot;},\\n      {x: 2, y: 5, l: &quot;green&quot;},\\n      {x: 3, y: 3, l: &quot;blue&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;blue&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;blue&quot;}\\n    }}\\n  /&gt;\\n\\n  &lt;VictoryLine\\n    data={[\\n      {x: 1, y: 5, l: &quot;cat&quot;},\\n      {x: 2, y: -4, l: &quot;dog&quot;},\\n      {x: 3, y: -2, l: &quot;bird&quot;}\\n    ]}\\n    style={{\\n      data: { stroke: &quot;black&quot;, strokeWidth: (d, active) =&gt; active ? 4 : 2},\\n      labels: {fill: &quot;black&quot;}\\n    }}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"tooltips-with-other-events\\\"><a href=\\\"#tooltips-with-other-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Tooltips with Other Events</h2>\\n<p><code class=\\\"language-text\\\">VictoryTooltip</code> automatically attaches events to data components. When events of the same type are specified for data components, it is necessary to reconcile events so that tooltips still work. For web, the default tooltip events are:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token keyword\\\">static</span> defaultEvents <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n  target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  eventHandlers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    onMouseOver<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"labels\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> active<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    onMouseOut<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        target<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"labels\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        mutation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> active<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>When other <code class=\\\"language-text\\\">onMouseOver</code> and <code class=\\\"language-text\\\">onMouseOut</code> events are specified for data, the event returns described above must be added to the events for tooltips to continue to work properly.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  domain={{ x: [0, 11], y: [-10, 10] }}\\n&gt;\\n  &lt;VictoryBar\\n    labelComponent={&lt;VictoryTooltip/&gt;}\\n    data={[\\n      {x: 2, y: 5, label: &quot;A&quot;},\\n      {x: 4, y: -6, label: &quot;B&quot;},\\n      {x: 6, y: 4, label: &quot;C&quot;},\\n      {x: 8, y: -5, label: &quot;D&quot;},\\n      {x: 10, y: 7, label: &quot;E&quot;}\\n    ]}\\n    style={{\\n      data: {fill: &quot;tomato&quot;, width: 20}\\n    }}\\n    events={[{\\n      target: &quot;data&quot;,\\n      eventHandlers: {\\n        onMouseOver: () =&gt; {\\n          return [\\n            {\\n              target: &quot;data&quot;,\\n              mutation: () =&gt; ({style: {fill: &quot;gold&quot;, width: 30}})\\n            }, {\\n              target: &quot;labels&quot;,\\n              mutation: () =&gt; ({ active: true })\\n            }\\n          ];\\n        },\\n        onMouseOut: () =&gt; {\\n          return [\\n            {\\n              target: &quot;data&quot;,\\n              mutation: () =&gt; {}\\n            }, {\\n              target: &quot;labels&quot;,\\n              mutation: () =&gt; ({ active: false })\\n            }\\n          ];\\n        }\\n      }\\n    }]}\\n  /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"wrapping-victorytooltip\\\"><a href=\\\"#wrapping-victorytooltip\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Wrapping VictoryTooltip</h2>\\n<p>The events that control <code class=\\\"language-text\\\">VictoryTooltip</code> are stored on the static <code class=\\\"language-text\\\">defaultEvents</code> property. Wrapped instances of <code class=\\\"language-text\\\">VictoryTooltip</code> will need to replicate or hoist this property in order to add automatic events to the components that use them.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomTooltip extends React.Component {\\n  static defaultEvents = VictoryTooltip.defaultEvents\\n  render() {\\n    const {x, y} = this.props;\\n    const rotation = `rotate(45 ${x} ${y})`\\n    return (\\n      &lt;g transform={rotation}&gt;\\n        &lt;VictoryTooltip {...this.props} renderInPortal={false}/&gt;\\n      &lt;/g&gt;\\n    );\\n  }\\n}\\n\\nclass App extends React.Component {\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n          domain={{ x: [0, 11], y: [-10, 10] }}\\n        &gt;\\n          &lt;VictoryBar\\n            labelComponent={&lt;CustomTooltip/&gt;}\\n            data={[\\n              {x: 2, y: 5, label: &quot;A&quot;},\\n              {x: 4, y: -6, label: &quot;B&quot;},\\n              {x: 6, y: 4, label: &quot;C&quot;},\\n              {x: 8, y: -5, label: &quot;D&quot;},\\n              {x: 10, y: 7, label: &quot;E&quot;}\\n            ]}\\n            style={{\\n              data: {fill: &quot;tomato&quot;, width: 20}\\n            }}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":9,\"scope\":null,\"title\":\"Tooltips\"},\"fields\":{\"slug\":\"/guides/tooltips/\"}}},\"pathContext\":{\"slug\":\"/guides/tooltips/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides-tooltips.json\n// module id = 889\n// module chunks = 222356339731301"],"sourceRoot":""}