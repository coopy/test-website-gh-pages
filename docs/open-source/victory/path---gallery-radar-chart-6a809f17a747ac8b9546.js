webpackJsonp([31622892298487],{868:function(t,a){t.exports={data:{markdownRemark:{html:'<pre class="pre"><code class="language-playground_norender">const characterData = [\n  { strength: 1, intelligence: 250, luck: 1, stealth: 40, charisma: 50 },\n  { strength: 2, intelligence: 300, luck: 2, stealth: 80, charisma: 90 },\n  { strength: 5, intelligence: 225, luck: 3, stealth: 60, charisma: 120 }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.processData(characterData),\n      maxima: this.getMaxima(characterData)\n    };\n  }\n\n  getMaxima(data) {\n    const groupedData = Object.keys(data[0]).reduce((memo, key) =&gt; {\n      memo[key] = data.map((d) =&gt; d[key]);\n      return memo;\n    }, {});\n    return Object.keys(groupedData).reduce((memo, key) =&gt; {\n      memo[key] = Math.max(...groupedData[key]);\n      return memo;\n    }, {});\n  }\n\n  processData(data) {\n    const maxByGroup = this.getMaxima(data);\n    const makeDataArray = (d) =&gt; {\n      return Object.keys(d).map((key) =&gt; {\n        return { x: key, y: d[key] / maxByGroup[key] };\n      });\n    };\n    return data.map((datum) =&gt; makeDataArray(datum));\n  }\n\n  render() {\n    return (\n      &lt;VictoryChart polar\n        theme={VictoryTheme.material}\n        domain={{ y: [ 0, 1 ] }}\n      &gt;\n        &lt;VictoryGroup colorScale={[&quot;gold&quot;, &quot;orange&quot;, &quot;tomato&quot;]}\n          style={{ data: { fillOpacity: 0.2, strokeWidth: 2 } }}\n        &gt;\n          {this.state.data.map((data, i) =&gt; {\n            return &lt;VictoryArea key={i} data={data}/&gt;;\n          })}\n        &lt;/VictoryGroup&gt;\n      {\n        Object.keys(this.state.maxima).map((key, i) =&gt; {\n          return (\n            &lt;VictoryPolarAxis key={i} dependentAxis\n              style={{\n                axisLabel: { padding: 10 },\n                axis: { stroke: &quot;none&quot; },\n                grid: { stroke: &quot;grey&quot;, strokeWidth: 0.25, opacity: 0.5 }\n              }}\n              tickLabelComponent={\n                &lt;VictoryLabel labelPlacement=&quot;vertical&quot;/&gt;\n              }\n              labelPlacement=&quot;perpendicular&quot;\n              axisValue={i + 1} label={key}\n              tickFormat={(t) =&gt; Math.ceil(t * this.state.maxima[key])}\n              tickValues={[0.25, 0.5, 0.75]}\n            /&gt;\n          );\n        })\n      }\n        &lt;VictoryPolarAxis\n          labelPlacement=&quot;parallel&quot;\n          tickFormat={() =&gt; &quot;&quot;}\n          style={{\n            axis: { stroke: &quot;none&quot; },\n            grid: { stroke: &quot;grey&quot;, opacity: 0.5 }\n          }}\n        /&gt;\n\n      &lt;/VictoryChart&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>',frontmatter:{id:10,scope:null,title:"Radar Chart"},fields:{slug:"/gallery/radar-chart/"}}},pathContext:{slug:"/gallery/radar-chart/"}}}});
//# sourceMappingURL=path---gallery-radar-chart-6a809f17a747ac8b9546.js.map