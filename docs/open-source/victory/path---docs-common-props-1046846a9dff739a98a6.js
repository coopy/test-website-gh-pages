webpackJsonp([74765156806331],{821:function(e,a){e.exports={data:{markdownRemark:{html:'<h1 id="common-props"><a href="#common-props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Common Props</h1>\n<p>Not every component uses all of these props. These are all common to things like <code class="language-text">VictoryBar</code>, <code class="language-text">VictoryScatter</code>, but other components like <code class="language-text">VictoryStack</code> use only some of them.</p>\n<p>The props explanations given here are general. Each component docs page should be considered as the the source of truth for a component’s props, and any caveats will be listed there.</p>\n<h3 id="animate"><a href="#animate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>animate</h3>\n<p><code class="language-text">type: boolean || object</code></p>\n<p>The <code class="language-text">animate</code> prop specifies props for <a href="https://formidable.com/open-source/victory/docs/victory-animation">VictoryAnimation</a> and <a href="https://formidable.com/open-source/victory/docs/victory-transition">VictoryTransition</a> to use. The animate prop may be used to specify the duration, delay, and easing of an animation as well as the behavior of <code class="language-text">onEnter</code> and <code class="language-text">onExit</code> and <code class="language-text">onLoad</code> transitions. Each Victory component defines its own default transitions, be these may be modified, or overwritten with the <code class="language-text">animate</code> prop.</p>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/animations">Animations Guide</a> for more detail on animations and transitions</p>\n<p><em>example:</em> <code class="language-text">animate={{ duration: 2000 }}</code></p>\n<pre class="pre"><code class="language-playground_norender">class App extends React.Component {\n\n  render() {\n    return (\n      &lt;VictoryChart\n      \tdomain={{ y: [0, 1] }}\n      \tanimate={{ duration: 2000 }}\n      &gt;\n        &lt;VictoryScatter\n          size={5}\n          data={this.state.data}\n          style={{ data: { opacity: (d) =&gt; d.opacity || 1 } }}\n          animate={{\n            onExit: {\n              duration: 500,\n              before: () =&gt; ({ opacity: 0.3, _y: 0 })\n            },\n            onEnter: {\n              duration: 500,\n              before: () =&gt; ({ opacity: 0.3, _y: 0 }),\n              after: (datum) =&gt; ({ opacity: 1, _y: datum._y })\n            }\n          }}\n        /&gt;\n      &lt;/VictoryChart&gt;\n    );\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = { data: this.getData() };\n  }\n\n  componentDidMount() {\n    this.setStateInterval = window.setInterval(() =&gt; {\n      this.setState({ data: this.getData() });\n    }, 3000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.setStateInterval);\n  }\n\n  getData() {\n    const num = Math.floor(10 * Math.random() + 5);\n    const points = new Array(num).fill(1);\n    return points.map((point, index) =&gt; {\n      return { x: index + 1, y: Math.random() };\n    });\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\n<h3 id="categories"><a href="#categories" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>categories</h3>\n<p><code class="language-text">type: array[string] || { x: array[string], y: array[string] }</code></p>\n<p>The <code class="language-text">categories</code> prop specifies how categorical data for a chart should be ordered. This prop should be given as an array of string values, or an object with these arrays of values specified for x and y. If this prop is not set, categorical data will be plotted in the order it was given in the data array.</p>\n<p><em>example:</em> <code class="language-text">categories={{ x: [&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;] }}</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart domainPadding={25}&gt;\n  &lt;VictoryBar\n    categories={{\n      x: [&quot;birds&quot;, &quot;cats&quot;, &quot;dogs&quot;, &quot;fish&quot;, &quot;frogs&quot;]\n    }}\n    data={[\n      {x: &quot;cats&quot;, y: 1},\n      {x: &quot;dogs&quot;, y: 2},\n      {x: &quot;birds&quot;, y: 3},\n      {x: &quot;fish&quot;, y: 2},\n      {x: &quot;frogs&quot;, y: 1}\n    ]}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="containercomponent"><a href="#containercomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>containerComponent</h3>\n<p><code class="language-text">type: element</code></p>\n<p>The <code class="language-text">containerComponent</code> prop takes a component instance which will be used to create a container element for standalone charts. If a <code class="language-text">containerComponent</code> is not provided, the default <code class="language-text">VictoryContainer</code> component will be used. Other Victory container components include:</p>\n<ul>\n<li><a href="https://formidable.com/open-source/victory/docs/victory-brush-container">VictoryBrushContainer</a></li>\n<li><a href="https://formidable.com/open-source/victory/docs/victory-cursor-container">VictoryCursorContainer</a></li>\n<li><a href="https://formidable.com/open-source/victory/docs/victory-selection-container">VictorySelectionContainer</a></li>\n<li><a href="https://formidable.com/open-source/victory/docs/victory-voronoi-container">VictoryVoronoiContainer</a></li>\n<li><a href="https://formidable.com/open-source/victory/docs/victory-zoom-container">VictoryZoomContainer</a></li>\n<li>hybrid containers may be created using the <a href="https://formidable.com/open-source/victory/docs/create-container">createContainer</a> helper</li>\n</ul>\n<p>Victory container components all support <code class="language-text">title</code> and <code class="language-text">desc</code> props, which are intended to add accessibility to Victory components. The more descriptive these props are, the more accessible your data will be for people using screen readers. These props may be set by passing them directly to the supplied component. By default, all Victory container components render responsive <code class="language-text">svg</code> elements using the <code class="language-text">viewBox</code> attribute. To render a static container, set <code class="language-text">responsive={false}</code> directly on the container instance supplied via the <code class="language-text">containerComponent</code> prop. All Victory container components also render a <code class="language-text">Portal</code> element that may be used in conjunction with <a href="https://formidable.com/open-source/victory/docs/victory-portal">VictoryPortal</a> to force components to render above other children.</p>\n<p>Container components are supplied with the following props:</p>\n<ul>\n<li><code class="language-text">domain</code></li>\n<li><code class="language-text">height</code></li>\n<li><code class="language-text">origin</code> (for polar charts)</li>\n<li><code class="language-text">padding</code></li>\n<li><code class="language-text">polar</code></li>\n<li><code class="language-text">scale</code></li>\n<li><code class="language-text">standalone</code></li>\n<li><code class="language-text">style</code></li>\n<li><code class="language-text">theme</code></li>\n</ul>\n<p><em>default:</em> <code class="language-text">containerComponent={&lt;VictoryContainer/&gt;}</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryScatter\n  containerComponent={\n    &lt;VictoryCursorContainer\n      cursorLabel={(d) =&gt; `${d.x.toPrecision(2)}, ${d.y.toPrecision(2)}`}\n    /&gt;\n  }\n/&gt;</code></pre>\n<h3 id="data"><a href="#data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>data</h3>\n<p><code class="language-text">type: array[object]</code></p>\n<p>Specify data via the <code class="language-text">data</code> prop. By default, Victory components expect data as an array of objects with <code class="language-text">x</code> and <code class="language-text">y</code> properties. Use the <a href="https://formidable.com/open-source/victory/docs/common-props#x">x</a> and <a href="https://formidable.com/open-source/victory/docs/common-props#y">y</a> data accessor props to define a custom data format. The <code class="language-text">data</code> prop must be given as an array. Data objects may also include information about <del>styles</del>, labels, and props that may be applied to individual data components.</p>\n<p><strong>Note:</strong> All values stored on the data object will be interpolated during animation. Do not store functions on data objects.</p>\n<p><strong>Note:</strong> As of <code class="language-text">victory@0.26.0</code> styles provided via the <code class="language-text">data</code> prop are no longer automatically applied. To use styles from the data object, add functional styles as in the example below.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryScatter\n  size={7}\n  data={[\n    { x: 1, y: 1, label: &quot;first&quot;, symbol: &quot;star&quot;, opacity: 0.5, fill: &quot;blue&quot; },\n    { x: 2, y: 2, label: &quot;second&quot;, symbol: &quot;circle&quot;, opacity: 0.8, fill: &quot;red&quot; },\n    { x: 3, y: 3, label: &quot;third&quot;, symbol: &quot;square&quot;, fill: &quot;gold&quot; },\n    { x: 4, y: 4, label: &quot;fourth&quot;, symbol: &quot;diamond&quot;, fill: &quot;green&quot; }\n  ]}\n  style={{\n    data: {\n      fill: (d) =&gt; d.fill,\n      opacity: (d) =&gt; d.opacity\n    }\n  }}\n/&gt;</code></pre>\n<h3 id="datacomponent"><a href="#datacomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>dataComponent</h3>\n<p><code class="language-text">type: element</code></p>\n<p>The <code class="language-text">dataComponent</code> prop takes a component instance which will be responsible for rendering a data element. The new element created from the passed <code class="language-text">dataComponent</code> will be provided with all the props it needs to render. These props will always include <code class="language-text">data</code>, <code class="language-text">events</code>, <code class="language-text">scale</code> and <code class="language-text">style</code>. Individual components will supply additional props expected by their default <code class="language-text">dataComponents</code>. See individual api docs for complete props lists. Any of these props may be overridden by passing in props to the supplied component, or modified or ignored within the custom component itself. If a <code class="language-text">dataComponent</code> is not provided, each component will use its own default <code class="language-text">dataComponent</code>.</p>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/custom-components">Custom Components Guide</a> for more detail on creating your own <code class="language-text">dataComponents</code></p>\n<p><em>examples:</em> <code class="language-text">dataComponent={&lt;Area/&gt;}</code></p>\n<pre class="pre"><code class="language-playground_norender">class CatPoint extends React.Component {\n  render() {\n    const {x, y, datum} = this.props; // VictoryScatter supplies x, y and datum\n    const cat = datum._y &gt;= 0 ? &quot;😻&quot; : &quot;😹&quot;;\n    return (\n      &lt;text x={x} y={y} fontSize={30}&gt;\n        {cat}\n      &lt;/text&gt;\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart&gt;\n        &lt;VictoryScatter\n          dataComponent={&lt;CatPoint/&gt;}\n          y={(d) =&gt; Math.sin(2 * Math.PI * d.x)}\n          samples={15}\n        /&gt;\n      &lt;/VictoryChart&gt;\n    );\n  }\n}\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h3 id="domain"><a href="#domain" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>domain</h3>\n<p><code class="language-text">type: array[low, high] || { x: [low, high], y: [low, high] }</code></p>\n<p>The <code class="language-text">domain</code> prop describes the range of data the component will include. This prop can be given as a array of the minimum and maximum expected values of the data or as an object that specifies separate arrays for x and y. If this prop is not provided, a domain will be calculated from data, or other available information.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">domain={[-1, 1]}</code></li>\n<li><code class="language-text">domain={{x: [0, 100], y: [0, 1]}}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n   domain={{ x: [0.5, 5.5], y: [0, 10] }}\n&gt;\n  &lt;VictoryBar data={sampleData}/&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="domainpadding"><a href="#domainpadding" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>domainPadding</h3>\n<p><code class="language-text">type: number || array[left, right] || { x: [left, right], y: [bottom, top] }</code></p>\n<p>The <code class="language-text">domainPadding</code> prop specifies a number of pixels of padding to add the beginning or end of a domain. This prop is useful for explicitly spacing data elements farther from the beginning or end of a domain to prevent axis crowding. When given as a single number, <code class="language-text">domainPadding</code> will be applied to the upper and lower bound of both the x and y domains. This prop may also be given as an object with numbers or two-element arrays specified for x and y. When specifying arrays for <code class="language-text">domainPadding</code>, the first element of the array will specify the padding to be applied to domain minimum, and the second element will specify padding the be applied to domain maximum.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">domainPadding={20}</code></li>\n<li><code class="language-text">domainPadding={{x: [20, 0]}}</code></li>\n</ul>\n<p><strong>note:</strong> Values supplied for <code class="language-text">domainPadding</code> will be coerced so that padding a domain will never result in charts including an additional quadrant. For example, if an original domain included only positive values, <code class="language-text">domainPadding</code> will be coerced so that the resulted padded domain will not include negative values.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n   domainPadding={{ x: 100 }}\n&gt;\n  &lt;VictoryBar data={sampleData}/&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="eventkey"><a href="#eventkey" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>eventKey</h3>\n<p><code class="language-text">type: string || integer || array[string] || function</code></p>\n<p>The <code class="language-text">eventKey</code> prop is used to assign eventKeys to data. This prop operates identically to the <a href="https://formidable.com/open-source/victory/docs/common-props#x">x</a> and <a href="https://formidable.com/open-source/victory/docs/common-props#y">y</a> data accessor props. By default, the eventKey of each datum will be equal to its index in the data array. <strong>This prop is not commonly used.</strong></p>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/events">Events Guide</a> for more information on defining events and using event keys.</p>\n<h3 id="events"><a href="#events" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>events</h3>\n<p><code class="language-text">type: array[object]</code></p>\n<p>The <code class="language-text">events</code> prop takes an array of event objects. Event objects are composed of identifying properties, and <code class="language-text">eventHandlers</code>.</p>\n<p>Identifying properties include:</p>\n<ul>\n<li>\n<p><code class="language-text">childName</code>: the name of the component the event should be attached to. When events are specified in <code class="language-text">VictorySharedEvents</code> or on a component that renders several Victory components as children (<em>i.e.</em> <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryGroup</code>, <code class="language-text">VictoryStack</code>), it is necessary to specify which child events should apply to. The given <code class="language-text">childName</code> should match the <code class="language-text">name</code> prop of a child component. This identifier can be given as a string, an array of strings, or as “all”.</p>\n</li>\n<li>\n<p><code class="language-text">target</code>: the type of element the event should be attached to. Valid targets for most Victory components will be <code class="language-text">&quot;parent&quot;</code>, <code class="language-text">&quot;data&quot;</code>, and <code class="language-text">&quot;labels&quot;</code>. Events with the “parent” target will be attached to to the top level svg. Events with <code class="language-text">&quot;data&quot;</code> and <code class="language-text">&quot;labels&quot;</code> targets will be attached to <code class="language-text">dataComponent</code> and <code class="language-text">labelComponent</code> elements respectively. Some components, like <code class="language-text">VictoryAxis</code> use non-standard targets like <code class="language-text">&quot;grid&quot;</code>. Refer to individual API docs for additional caveats.</p>\n</li>\n<li>\n<p><code class="language-text">eventKey</code>: the specific element to be targeted. Events may be attached to specific elements by <code class="language-text">eventKey</code>. By default, <code class="language-text">eventKey</code> corresponds to the index in the <code class="language-text">data</code> array (or <code class="language-text">tickValues</code> array) corresponding to a rendered element. This value may be given as a single string or number, an array of strings or numbers, or as “all”. It is not typically necessary to specify an individual <code class="language-text">eventKey</code> for attaching events. When no <code class="language-text">eventKey</code> is given, events will be attached to all elements that match a given <code class="language-text">childName</code> and <code class="language-text">target</code>. Some components like <code class="language-text">VictoryArea</code> and <code class="language-text">VictoryLine</code> render only a single element for an entire series of data. For these, the <code class="language-text">eventKey</code> should be “all”.</p>\n</li>\n</ul>\n<p><code class="language-text">eventHandlers</code> should be given as an object whose keys are standard event names (<em>e.g.,</em> <code class="language-text">onClick</code>) and whose values are event callbacks. Callbacks are called with the props of the individual element that triggered the event. For example, when a click event occurs on a bar, the props object supplied to the <code class="language-text">onClick</code> handler will include props specific to that individual bar, such as <code class="language-text">datum</code>, <code class="language-text">index</code>, <code class="language-text">style</code>, etc. Return values from event handler callbacks may be used to mutate other elements.</p>\n<p>Event returns should be given as an array of objects composed of identifying properties for specifying the element(s) to be modified and a <code class="language-text">mutation</code> function. Identifying properties include <code class="language-text">childName</code>, <code class="language-text">target</code>, and <code class="language-text">eventKey</code>. When these values are not provided, the identifiers of the element that triggered the event will be used, including the specific <code class="language-text">eventKey</code>. The <code class="language-text">mutation</code> function will be called with the calculated props for each element that should be modified (<em>e.g.,</em> a bar label), and the object returned from the mutation function will override the props of that element via object assignment.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n  events={[{\n    childName: &quot;all&quot;,\n    target: &quot;data&quot;,\n    eventHandlers: {\n      onClick: () =&gt; {\n        return [\n          {\n            childName: &quot;area-2&quot;,\n            target: &quot;data&quot;,\n            mutation: (props) =&gt; ({ style: Object.assign({}, props.style, { fill: &quot;gold&quot; }) })\n          }, {\n            childName: &quot;area-3&quot;,\n            target: &quot;data&quot;,\n            mutation: (props) =&gt; ({ style: Object.assign({}, props.style, { fill: &quot;orange&quot; }) })\n          }, {\n            childName: &quot;area-4&quot;,\n            target: &quot;data&quot;,\n            mutation: (props) =&gt; ({ style: Object.assign({}, props.style, { fill: &quot;red&quot; }) })\n          }\n        ];\n      }\n    }\n  }]}\n&gt;\n  &lt;VictoryStack&gt;\n    &lt;VictoryArea name=&quot;area-1&quot; data={sampleData}/&gt;\n    &lt;VictoryArea name=&quot;area-2&quot; data={sampleData}/&gt;\n    &lt;VictoryArea name=&quot;area-3&quot; data={sampleData}/&gt;\n    &lt;VictoryArea name=&quot;area-4&quot; data={sampleData}/&gt;\n  &lt;/VictoryStack&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="externaleventmutations"><a href="#externaleventmutations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>externalEventMutations</h3>\n<p><code class="language-text">type: array[object]</code></p>\n<p>Occasionally is it necessary to trigger events in Victory’s event system from some external element such as a button or a form field. Use the <code class="language-text">externalEventMutation</code> prop to specify a set of mutations to apply to a given chart. The <code class="language-text">externalEventMutations</code> should be given in the following form:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">externalEventMutations<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">arrayOf</span><span class="token punctuation">(</span>PropTypes<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  callback<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token keyword">function</span><span class="token punctuation">,</span>\n  childName<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n    PropTypes<span class="token punctuation">.</span>array\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  eventKey<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>\n    CustomPropTypes<span class="token punctuation">.</span><span class="token function">allOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>CustomPropTypes<span class="token punctuation">.</span>integer<span class="token punctuation">,</span> CustomPropTypes<span class="token punctuation">.</span>nonNegative<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    PropTypes<span class="token punctuation">.</span>string\n  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  mutation<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token keyword">function</span><span class="token punctuation">,</span>\n  target<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>\n    PropTypes<span class="token punctuation">.</span>array\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The <code class="language-text">target</code>, <code class="language-text">eventKey</code>, and <code class="language-text">childName</code> (when applicable) must always be specified. The <code class="language-text">mutation</code> function will be called with the current props of the element specified by the <code class="language-text">target</code>, <code class="language-text">eventKey</code> and <code class="language-text">childName</code> provided. The mutation function should return a mutation object for that element. The <code class="language-text">callback</code> prop should be used to clear the <code class="language-text">externalEventMutations</code> prop once the mutation has been applied. Clearing <code class="language-text">externalEventMutations</code> is crucial for charts that animate.</p>\n<pre class="pre"><code class="language-playground_norender">class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      externalMutations: undefined\n    };\n  }\n  removeMutation() {\n    this.setState({\n      externalMutations: undefined\n    });\n  }\n\n  clearClicks() {\n    this.setState({\n      externalMutations: [\n        {\n          childName: &quot;Bar-1&quot;,\n          target: [&quot;data&quot;],\n          eventKey: &quot;all&quot;,\n          mutation: () =&gt; ({ style: undefined }),\n          callback: this.removeMutation.bind(this)\n        }\n      ]\n    });\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor: &quot;black&quot;,\n      color: &quot;white&quot;,\n      padding: &quot;10px&quot;,\n      marginTop: &quot;10px&quot;\n    };\n    return (\n      &lt;div&gt;\n        &lt;button\n          onClick={this.clearClicks.bind(this)}\n          style={buttonStyle}\n        &gt;\n          Reset\n        &lt;/button&gt;\n        &lt;VictoryChart domain={{ x: [0, 5 ] }}\n          externalEventMutations={this.state.externalMutations}\n          events={[\n            {\n              target: &quot;data&quot;,\n              childName: &quot;Bar-1&quot;,\n              eventHandlers: {\n                onClick: () =&gt; ({\n                  target: &quot;data&quot;,\n                  mutation: () =&gt; ({ style: { fill: &quot;orange&quot; } })\n                })\n              }\n            }\n          ]}\n        &gt;\n          &lt;VictoryBar name=&quot;Bar-1&quot;\n            style={{ data: { fill: &quot;grey&quot;} }}\n            labels={() =&gt; &quot;click me!&quot;}\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 4 },\n              { x: 3, y: 1 },\n              { x: 4, y: 5 }\n            ]}\n          /&gt;\n        &lt;/VictoryChart&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\n<p><em>Note</em> External mutations are applied to the same state object that is used to control events in Victory, so depending on the order in which they are triggered, external event mutations may override mutations caused by internal Victory events or vice versa.</p>\n<h3 id="groupcomponent"><a href="#groupcomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>groupComponent</h3>\n<p><code class="language-text">type: element</code></p>\n<p>The <code class="language-text">groupComponent</code> prop takes a component instance which will be used to create group elements for use within container elements. For most components, this prop defaults to a <code class="language-text">&lt;g&gt;</code> tag. Continuous data components like <code class="language-text">VictoryLine</code> and <code class="language-text">VictoryArea</code> use <a href="https://formidable.com/open-source/victory/docs/victory-clip-container">VictoryClipContainer</a> a component which renders a <code class="language-text">&lt;g&gt;</code> tag with a <code class="language-text">clipPath</code> <code class="language-text">def</code>. This allows continuous data components to transition smoothly when new data points enter and exit. <code class="language-text">VictoryClipContainer</code> may also be used with components like <code class="language-text">VictoryScatter</code> to prevent data from overflowing the chart area.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart&gt;\n  &lt;VictoryScatter\n    data={sampleData}\n    size={20}\n    groupComponent={&lt;VictoryClipContainer/&gt;}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="height"><a href="#height" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>height</h3>\n<p><code class="language-text">type: number</code></p>\n<p>The <code class="language-text">height</code> prop determines the height of the containing <code class="language-text">&lt;svg&gt;</code>. By default Victory components render responsive containers with the <code class="language-text">viewBox</code> attribute set to <code class="language-text">viewBox=&quot;0, 0, width, height&quot;</code> and <code class="language-text">width=&quot;100%</code>, <code class="language-text">height=&quot;auto</code>. In responsive containers, the <code class="language-text">width</code> and <code class="language-text">height</code> props affect the <em>aspect ratio</em> of the rendered component, while the absolute width and height are determined by the container. To render a static container, pass <code class="language-text">responsive={false}</code> to the <code class="language-text">containerComponent</code> like <code class="language-text">containerComponent={&lt;VictoryContainer responsive={false}/&gt;}</code>, or set <code class="language-text">standalone={false}</code> and render the resulting <code class="language-text">&lt;g&gt;</code> tag in your own <code class="language-text">&lt;svg&gt;</code> container. When a component is nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> setting the <code class="language-text">height</code> prop on the child component will have no effect.</p>\n<p><em>default (provided by default theme):</em> <code class="language-text">height={300}</code></p>\n<pre class="pre"><code class="language-playground">&lt;div&gt;\n  &lt;VictoryBar height={500}/&gt;\n  &lt;VictoryBar height={500}\n    containerComponent={&lt;VictoryContainer responsive={false}/&gt;}\n  /&gt;\n&lt;/div&gt;</code></pre>\n<h3 id="labelcomponent"><a href="#labelcomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>labelComponent</h3>\n<p><code class="language-text">type: element</code></p>\n<p>The <code class="language-text">labelComponent</code> prop takes a component instance which will be used to render labels for the component. The new element created from the passed <code class="language-text">labelComponent</code> will be supplied with the following properties: x, y, index, data, datum, verticalAnchor, textAnchor, angle, style, text, and events. Any of these props may be overridden by passing in props to the supplied component, or modified or ignored within the custom component itself. If <code class="language-text">labelComponent</code> is omitted, a new <a href="https://formidable.com/open-source/victory/docs/victory-label">VictoryLabel</a> will be created with the props described above. <a href="https://formidable.com/open-source/victory/docs/victory-tooltip">VictoryTooltip</a> is commonly used as a <code class="language-text">labelComponent</code></p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">labelComponent={&lt;VictoryLabel dy={20}/&gt;}</code></li>\n<li><code class="language-text">labelComponent={&lt;VictoryTooltip/&gt;}</code></li>\n</ul>\n<p><em>default:</em> <code class="language-text">&lt;VictoryLabel/&gt;</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryBar\n  data={sampleData}\n  labels={(d) =&gt; d.y}\n  style={{ labels: { fill: &quot;white&quot; } }}\n  labelComponent={&lt;VictoryLabel dy={30}/&gt;}\n/&gt;</code></pre>\n<h3 id="labels"><a href="#labels" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>labels</h3>\n<p><code class="language-text">type: array || function</code></p>\n<p>The <code class="language-text">labels</code> prop defines the labels that will appear above each point. This prop should be given as an array or as a function of data.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">labels={[&quot;first&quot;, &quot;second&quot;, &quot;third&quot;]}</code></li>\n<li><code class="language-text">labels={(d) =&gt; d.y}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryBar\n  data={sampleData}\n  labels={(d) =&gt; `y: ${d.y}`}\n/&gt;</code></pre>\n<h3 id="maxdomain"><a href="#maxdomain" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>maxDomain</h3>\n<p><code class="language-text">type: number || { x: number, y: number }</code></p>\n<p>The <code class="language-text">maxDomain</code> prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum domain of a chart is static, while the minimum value depends on data or other variable information. If the <code class="language-text">domain</code> prop is set in addition to <code class="language-text">maximumDomain</code>, <code class="language-text">domain</code> will be used.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">maxDomain={0}</code></li>\n<li><code class="language-text">maxDomain={{ y: 0 }}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart maxDomain={{ y: 0 }}&gt;\n  &lt;VictoryLine\n    data={[\n      { x: 1, y: -2 },\n      { x: 2, y: 1 },\n      { x: 3, y: -1 },\n      { x: 4, y: -3 }\n    ]}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="mindomain"><a href="#mindomain" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>minDomain</h3>\n<p><code class="language-text">type: number || { x: number, y: number }</code></p>\n<p>The <code class="language-text">minDomain</code> prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum domain of a chart is static, while the maximum value depends on data or other variable information. If the <code class="language-text">domain</code> prop is set in addition to <code class="language-text">minimumDomain</code>, <code class="language-text">domain</code> will be used.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">minDomain={0}</code></li>\n<li><code class="language-text">minDomain={{ y: 0 }}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart minDomain={{ y: 0 }}&gt;\n  &lt;VictoryLine\n    data={[\n      { x: 1, y: 2 },\n      { x: 2, y: -1 },\n      { x: 3, y: 1 },\n      { x: 4, y: 3 }\n    ]}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="name"><a href="#name" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>name</h3>\n<p><code class="language-text">type: string</code></p>\n<p>The <code class="language-text">name</code> prop is used to reference a component instance when defining shared events.</p>\n<p><em>example:</em> <code class="language-text">name=&quot;series-1&quot;</code></p>\n<h3 id="origin"><a href="#origin" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>origin</h3>\n<p><code class="language-text">type: { x: number, y: number }</code></p>\n<p>The origin prop is used to define the center point in svg coordinates for polar charts. All children within a polar chart must share the same origin, so setting this prop on children nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> will have no effect. When this prop is not set, it will be calculated based on the <code class="language-text">width</code>, <code class="language-text">height</code> and <code class="language-text">padding</code> of the chart. <strong>This prop is usually not set manually.</strong></p>\n<h3 id="padding"><a href="#padding" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>padding</h3>\n<p><code class="language-text">type: number || { top: number, bottom: number, left: number, right: number }</code></p>\n<p>The <code class="language-text">padding</code> prop specifies the amount of padding in number of pixels between the edge of the chart and any rendered child components. This prop can be given as a number or as an object with padding specified for top, bottom, left and right. As with <a href="https://formidable.com/open-source/victory/docs/common-props#width">width</a> and <a href="https://formidable.com/open-source/victory/docs/common-props#height">height</a>, the absolute padding will depend on whether the component is rendered in a responsive container. When a component is nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> setting <code class="language-text">padding</code> on the child component will have no effect.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">padding={{top: 20, bottom: 60}}</code></li>\n<li><code class="language-text">padding={40}</code></li>\n</ul>\n<p><em>default (provided by default theme):</em> <code class="language-text">padding={50}</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n  padding={{ top: 40, bottom: 80, left: 40, right: 80 }}\n&gt;\n&lt;VictoryLine data={sampleData} /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="polar"><a href="#polar" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>polar</h3>\n<p><code class="language-text">type: boolean</code></p>\n<p>The boolean <code class="language-text">polar</code> prop specifies whether a chart should be plotted on a polar coordinate system. All components in a given chart must share the same coordinate system, so setting this prop on children nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> will have no effect.</p>\n<pre class="pre"><code class="language-playground">&lt;div&gt;\n&lt;VictoryBar polar\n  data={sampleData}\n  labels={(d) =&gt; d.x}\n  width={400} height={400}\n  domain={{ y: [0, 7] }}\n  style={{ data: { fill: &quot;#c43a31&quot;, stroke: &quot;black&quot;, strokeWidth: 2 } }}\n/&gt;\n&lt;VictoryBar\n  data={sampleData}\n  labels={(d) =&gt; d.x}\n  width={400} height={400}\n  domain={{ y: [0, 7] }}\n  style={{ data: { fill: &quot;#c43a31&quot;, stroke: &quot;black&quot;, strokeWidth: 2 } }}\n/&gt;\n&lt;/div&gt;</code></pre>\n<h3 id="range"><a href="#range" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>range</h3>\n<p><code class="language-text">type: array[low, high] || { x: [low, high], y: [low, high] }</code></p>\n<p>The <code class="language-text">range</code> prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this corresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this corresponds to a range of angles and radii. When this value is not given it will be calculated from the <code class="language-text">width</code>, <code class="language-text">height</code>, and <code class="language-text">padding</code>, or from the <code class="language-text">startAngle</code> and <code class="language-text">endAngle</code> in the case of polar charts. All components in a given chart must share the same range, so setting this prop on children nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> will have no effect. <strong>This prop is usually not set manually.</strong></p>\n<p><em>examples:</em></p>\n<ul>\n<li>Cartesian: <code class="language-text">range={{ x: [50, 250], y: [50, 250] }}</code></li>\n<li>Polar: <code class="language-text">range={{ x: [0, 360], y: [0, 250] }}</code></li>\n</ul>\n<h3 id="samples"><a href="#samples" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>samples</h3>\n<p><code class="language-text">type: number</code></p>\n<p>The <code class="language-text">samples</code> prop specifies how many individual points to plot when plotting\ny as a function of x. The <code class="language-text">samples</code> prop is ignored if <code class="language-text">data</code> is supplied in props.</p>\n<p><em>default:</em> <code class="language-text">samples={50}</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart&gt;\n  &lt;VictoryLine\n    samples={25}\n    y={(d) =&gt; Math.sin(5 * Math.PI * d.x)}\n  /&gt;\n  &lt;VictoryLine\n    samples={100}\n    style={{ data: { stroke: &quot;red&quot; } }}\n    y={(d) =&gt; Math.cos(5 * Math.PI * d.x)}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="scale"><a href="#scale" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>scale</h3>\n<p><code class="language-text">type: scale || { x: scale, y: scale }</code></p>\n<p>The <code class="language-text">scale</code> prop determines which scales your chart should use. This prop can be given as a string specifying a supported scale (“linear”, “time”, “log”, “sqrt”), or as an object with scales specified for x and y. For “time” scales, data points should be <code class="language-text">Date</code> objects or <code class="language-text">getTime()</code> instances.</p>\n<p><em>default:</em> <code class="language-text">scale=&quot;linear&quot;</code></p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">scale=&quot;time&quot;</code></li>\n<li><code class="language-text">scale={{x: &quot;linear&quot;, y: &quot;log&quot;}}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n  scale={{ x: &quot;linear&quot;, y: &quot;log&quot; }}\n&gt;\n  &lt;VictoryLine\n    style={{ data: { stroke: &quot;red&quot; } }}\n    domain={{ x: [0, 5] }}\n    y={(d) =&gt; Math.pow(1 - d.x, 10)}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="sharedevents"><a href="#sharedevents" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>sharedEvents</h3>\n<p>The <code class="language-text">sharedEvents</code> prop is used to coordinate events between Victory components using <code class="language-text">VictorySharedEvents</code>. <strong>This prop should not be set manually.</strong></p>\n<h3 id="singlequadrantdomainpadding"><a href="#singlequadrantdomainpadding" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>singleQuadrantDomainPadding</h3>\n<p><code class="language-text">type: boolean || { x: boolean, y: boolean }</code></p>\n<p>By default <code class="language-text">domainPadding</code> is coerced to existing quadrants. This means that if a given domain only includes positive values, no amount of padding applied by <code class="language-text">domainPadding</code> will result in a domain with negative values. This is the desired behavior in most cases. For users that need to apply padding without regard to quadrant, the <code class="language-text">singleQuadrantDomainPadding</code> prop may be used. This prop may be given as a boolean or an object with boolean values specified for “x” and/or “y”. When this prop is false (or false for a given dimension), padding will be applied without regard to quadrant. If this prop is not specified, <code class="language-text">domainPadding</code> will be coerced to existing quadrants.</p>\n<p><em>examples:</em></p>\n<ul>\n<li><code class="language-text">singleQuadrantDomainPadding={false}</code></li>\n<li><code class="language-text">singleQuadrantDomainPadding={{ x: false }}</code></li>\n</ul>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart\n  singleQuadrantDomainPadding={{ x: false }}\n  domainPadding={100}\n&gt;\n  &lt;VictoryBar data={sampleData}/&gt;\n  &lt;VictoryAxis crossAxis={false}/&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="sortkey"><a href="#sortkey" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>sortKey</h3>\n<p><code class="language-text">type: string || integer || array[string] || function</code></p>\n<p>Use the <code class="language-text">sortKey</code> prop to indicate how data should be sorted. This prop is\ngiven directly to the lodash <a href="https://lodash.com/docs/4.17.4#sortBy">sortBy</a> function to be executed on the final\ndataset.</p>\n<p>This prop can be provided in a variety of formats</p>\n<p><strong>string:</strong> specify which property in a data object to sort the data array by</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">sortKey<span class="token operator">=</span><span class="token string">"x"</span></code></pre>\n      </div>\n<p><strong>function:</strong> use a function to determine how to sort data elements in an array</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">sortKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>datum<span class="token punctuation">)</span> <span class="token operator">=></span> datum<span class="token punctuation">.</span>xValue <span class="token operator">+</span> datum<span class="token punctuation">.</span>error<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>array index:</strong> specify which index of an array should be used to sort data when data is given as an array of arrays</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">sortKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>array:</strong> specify multiple properties to sort by</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">sortKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<pre class="pre"><code class="language-playground">&lt;VictoryLine\n  data={range(0, 2 * Math.PI, 0.01).map((t) =&gt; ({ t }))}\n  sortKey=&quot;t&quot;\n  x={(d) =&gt; Math.sin(3 * d.t + (2 * Math.PI))}\n  y={(d) =&gt; Math.sin(2 * d.t)}\n/&gt;</code></pre>\n<h3 id="sortorder"><a href="#sortorder" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>sortOrder</h3>\n<p><code class="language-text">type: &quot;ascending&quot; || &quot;descending&quot;</code></p>\n<p>The <code class="language-text">sortOrder</code> prop specifies whether sorted data should be returned in ascending or descending order.</p>\n<p><em>default:</em> <code class="language-text">sortOrder=&quot;ascending&quot;</code></p>\n<h3 id="standalone"><a href="#standalone" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>standalone</h3>\n<p><code class="language-text">type: boolean</code></p>\n<p>The <code class="language-text">standalone</code> props specifies whether the component should be rendered in a independent <code class="language-text">&lt;svg&gt;</code> element or in a <code class="language-text">&lt;g&gt;</code> tag. This prop defaults to true, and renders an <code class="language-text">svg</code>, however, wrapper components like <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, and <code class="language-text">VictoryGroup</code> force children to use <code class="language-text">standalone={false}</code>.</p>\n<p><em>default:</em> <code class="language-text">standalone={true}</code></p>\n<pre class="pre"><code class="language-playground">&lt;svg width={300} height={300}&gt;\n  &lt;circle cx={150} cy={150} r={150} fill=&quot;#c43a31&quot;/&gt;\n  &lt;VictoryArea\n    standalone={false}\n    width={300} height={300} padding={0}\n    data={sampleData}\n  /&gt;\n&lt;/svg&gt;</code></pre>\n<h3 id="style"><a href="#style" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>style</h3>\n<p><code class="language-text">type: object</code></p>\n<p>The <code class="language-text">style</code> prop defines the style of the component. The style prop should be given as an object with styles defined for <code class="language-text">data</code>, <code class="language-text">labels</code> and <code class="language-text">parent</code>. Any valid svg styles are supported, but <code class="language-text">width</code>, <code class="language-text">height</code>, and <code class="language-text">padding</code> should be specified via props as they determine relative layout for components in VictoryChart.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>fill<span class="token punctuation">:</span> <span class="token string">"tomato"</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token number">0.7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  labels<span class="token punctuation">:</span> <span class="token punctuation">{</span>fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  parent<span class="token punctuation">:</span> <span class="token punctuation">{</span>border<span class="token punctuation">:</span> <span class="token string">"1px solid #ccc"</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>note:</strong> The <code class="language-text">style</code> prop used by <code class="language-text">VictoryAxis</code> has a different format than the standard <code class="language-text">style</code> prop.</p>\n<p><strong>note:</strong> When a component is rendered as a child of another Victory component, or within a custom <code class="language-text">&lt;svg&gt;</code> element with <code class="language-text">standalone={false}</code> parent styles will be applied to the enclosing <code class="language-text">&lt;g&gt;</code> tag. Many styles that can be applied to a parent <code class="language-text">&lt;svg&gt;</code> will not be expressed when applied to a <code class="language-text">&lt;g&gt;</code>.</p>\n<p><strong>note:</strong> custom <code class="language-text">angle</code> and <code class="language-text">verticalAnchor</code> properties maybe included in labels styles.</p>\n<p><em>default (provided by default theme):</em> See <a href="https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-theme/grayscale.js">grayscale theme</a> for more detail</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryScatter\n  style={{\n    parent: {\n      border: &quot;1px solid #ccc&quot;\n    },\n    data: {\n      fill: &quot;#c43a31&quot;, fillOpacity: 0.6, stroke: &quot;#c43a31&quot;, strokeWidth: 3\n    },\n    labels: {\n      fontSize: 15, fill: &quot;#c43a31&quot;, padding: 15\n    }\n  }}\n  size={9}\n  data={sampleData}\n  labels={(datum) =&gt; datum.x}\n/&gt;</code></pre>\n<h3 id="theme"><a href="#theme" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>theme</h3>\n<p><code class="language-text">type: object</code></p>\n<p>The <code class="language-text">theme</code> prop specifies a theme to use for determining styles and layout properties for a component. Any styles or props defined in <code class="language-text">theme</code> may be overwritten by props specified on the component instance. By default, components use a <a href="https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-theme/grayscale.js">grayscale theme</a>.</p>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/themes">Themes Guide</a> for information about creating custom themes.</p>\n<p><em>default:</em> <code class="language-text">theme={VictoryTheme.grayscale}</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">theme<span class="token operator">=</span><span class="token punctuation">{</span>VictoryTheme<span class="token punctuation">.</span>material<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3 id="width"><a href="#width" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>width</h3>\n<p><code class="language-text">type: number</code></p>\n<p>The <code class="language-text">width</code> prop determines the width of the containing <code class="language-text">&lt;svg&gt;</code>. By default Victory components render responsive containers with the <code class="language-text">viewBox</code> attribute set to <code class="language-text">viewBox=&quot;0, 0, width, height&quot;</code> and <code class="language-text">width=&quot;100%</code>, <code class="language-text">height=&quot;auto</code>. In responsive containers, the <code class="language-text">width</code> and <code class="language-text">height</code> props affect the <em>aspect ratio</em> of the rendered component, while the absolute width and height are determined by the container. To render a static container, pass <code class="language-text">responsive={false}</code> to the <code class="language-text">containerComponent</code> like <code class="language-text">containerComponent={&lt;VictoryContainer responsive={false}/&gt;}</code>, or set <code class="language-text">standalone={false}</code> and render the resulting <code class="language-text">&lt;g&gt;</code> tag in your own <code class="language-text">&lt;svg&gt;</code> container. When a component is nested within <code class="language-text">VictoryChart</code>, <code class="language-text">VictoryStack</code>, or <code class="language-text">VictoryGroup</code> setting <code class="language-text">width</code> prop on the child component will have no effect.</p>\n<p><em>default (provided by default theme):</em> <code class="language-text">width={450}</code></p>\n<pre class="pre"><code class="language-playground">&lt;div&gt;\n  &lt;VictoryBar width={1200}/&gt;\n  &lt;VictoryBar width={1200}\n    containerComponent={&lt;VictoryContainer responsive={false}/&gt;}\n  /&gt;\n&lt;/div&gt;</code></pre>\n<h3 id="x"><a href="#x" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>x</h3>\n<p><code class="language-text">type: string || integer || array[string] || function</code></p>\n<p>Use the <code class="language-text">x</code> data accessor prop to determine how the component defines data in the x dimension. This prop may be given in a variety of formats:</p>\n<p><strong>string:</strong> specify which property in an array of data objects should be used as the x value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">x<span class="token operator">=</span><span class="token string">"month"</span></code></pre>\n      </div>\n<p><strong>function:</strong> use a function to translate each element in a data array into an x value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>datum<span class="token punctuation">)</span> <span class="token operator">=></span> datum<span class="token punctuation">.</span>xValue <span class="token operator">+</span> datum<span class="token punctuation">.</span>error<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>array index:</strong> specify which index of an array should be used as an x value when data is given as an array of arrays</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>path string or path array:</strong> specify which property in an array of nested data objects should be used as an x value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">x<span class="token operator">=</span><span class="token string">"employees.name"</span><span class="token template-string"><span class="token string">`, `</span></span>x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"employees"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/data-accessors">Data Accessors Guide</a> for more detail on formatting and processing data.</p>\n<h3 id="y"><a href="#y" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>y</h3>\n<p><code class="language-text">type: string || integer || array[string] || function</code></p>\n<p>Use <code class="language-text">y</code> data accessor prop to determine how the component defines data in the y dimension. This prop may be given in a variety of formats:</p>\n<p><strong>string:</strong> specify which property in an array of data objects should be used as the y value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y<span class="token operator">=</span><span class="token string">"profit"</span></code></pre>\n      </div>\n<p><strong>function:</strong> use a function to translate each element in a data array into a y value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>datum<span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> datum<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>array index:</strong> specify which index of an array should be used as a y value when data is given as an array of arrays</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>path string or path array:</strong> specify which property in an array of nested data objects should be used as a y value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y<span class="token operator">=</span><span class="token string">"employees.salary"</span><span class="token template-string"><span class="token string">`, `</span></span>y<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"employees"</span><span class="token punctuation">,</span> <span class="token string">"salary"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/data-accessors">Data Accessors Guide</a> for more detail on formatting and processing data.</p>\n<h3 id="y0"><a href="#y0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>y0</h3>\n<p><code class="language-text">type: string || integer || array[string] || function</code></p>\n<p>Use <code class="language-text">y0</code> data accessor prop to determine how the component defines the baseline y0 data. This prop is useful for defining custom baselines for components like <code class="language-text">VictoryBar</code> or <code class="language-text">VictoryArea</code>. This prop may be given in a variety of formats.</p>\n<p><strong>string:</strong> specify which property in an array of data objects should be used as the y0 value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y0<span class="token operator">=</span><span class="token string">"last_quarter_profit"</span></code></pre>\n      </div>\n<p><strong>function:</strong> use a function to translate each element in a data array into a y0 value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y0<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>array index:</strong> specify which index of an array should be used as a y0 value when data is given as an array of arrays</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y0<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p><strong>path string or path array:</strong> specify which property in an array of nested data objects should be used as a y0 value</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">y0<span class="token operator">=</span><span class="token string">"employees.salary"</span><span class="token template-string"><span class="token string">`, `</span></span>y<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"employees"</span><span class="token punctuation">,</span> <span class="token string">"salary"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<p>See the <a href="https://formidable.com/open-source/victory/guides/data-accessors">Data Accessors Guide</a> for more detail on formatting and processing data.</p>',
frontmatter:{id:2,scope:["range","sampleData"],title:"Common Props"},fields:{slug:"/docs/common-props/"}}},pathContext:{slug:"/docs/common-props/"}}}});
//# sourceMappingURL=path---docs-common-props-1046846a9dff739a98a6.js.map