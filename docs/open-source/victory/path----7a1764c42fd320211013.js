webpackJsonp([60335399758886],{236:function(e,t){e.exports={layoutContext:{}}},237:function(e,t){e.exports={data:{allMarkdownRemark:{edges:[{node:{fields:{slug:"/gallery/column-chart/",type:"gallery",raw:'---\nid: 3\ntitle: 100% Column Chart\n---\n\n```playground_norender\nconst myDataset = [\n  [\n      { x: "a", y: 1 },\n      { x: "b", y: 2 },\n      { x: "c", y: 3 },\n      { x: "d", y: 2 },\n      { x: "e", y: 1 }\n  ],\n  [\n      { x: "a", y: 2 },\n      { x: "b", y: 3 },\n      { x: "c", y: 4 },\n      { x: "d", y: 5 },\n      { x: "e", y: 5 }\n  ],\n  [\n      { x: "a", y: 1 },\n      { x: "b", y: 2 },\n      { x: "c", y: 3 },\n      { x: "d", y: 4 },\n      { x: "e", y: 4 }\n  ]\n];\n\nclass App extends React.Component {\n  // This is an example of a function you might use to transform your data to make 100% data\n  transformData(dataset) {\n    const totals = dataset[0].map((data, i) => {\n      return dataset.reduce((memo, curr) => {\n        return memo + curr[i].y;\n      }, 0);\n    });\n    return dataset.map((data) => {\n      return data.map((datum, i) => {\n        return { x: datum.x, y: (datum.y / totals[i]) * 100 };\n      });\n    });\n  }\n\n  render() {\n    const dataset = this.transformData(myDataset);\n    return (\n      <div>\n        <VictoryChart height={400} width={400}\n          domainPadding={{ x: 30, y: 20 }}\n        >\n            <VictoryStack\n              colorScale={["black", "blue", "tomato"]}\n            >\n              {dataset.map((data, i) => {\n                return <VictoryBar data={data} key={i}/>;\n              })}\n            </VictoryStack>\n            <VictoryAxis dependentAxis\n              tickFormat={(tick) => `${tick}%`}\n            />\n            <VictoryAxis\n              tickFormat={["a", "b", "c", "d", "e"]}\n            />\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:3,category:null,display:null,title:"100% Column Chart"}}},{node:{fields:{slug:"/gallery/alternative-events/",type:"gallery",raw:'---\nid: 0\ntitle: Alternative Events\n---\n\n```playground_norender\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      clicked: false,\n      style: {\n        data: { fill: "tomato" }\n      }\n    };\n  }\n\n  render() {\n    const handleMouseOver = () => {\n      const fillColor = this.state.clicked ? "blue" : "tomato";\n      const clicked = !this.state.clicked;\n      this.setState({\n        clicked,\n        style: {\n          data: { fill: fillColor }\n        }\n      });\n    };\n\n    return (\n      <div>\n        <VictoryChart height={400} width={400}\n          domainPadding={{ x: 50, y: [0, 20] }}\n          scale={{ x: "time" }}\n        >\n          <VictoryBar\n            dataComponent={\n              <Bar events={{ onMouseOver: handleMouseOver }}/>\n            }\n            style={this.state.style}\n            data={[\n              { x: new Date(1986, 1, 1), y: 2 },\n              { x: new Date(1996, 1, 1), y: 3 },\n              { x: new Date(2006, 1, 1), y: 5 },\n              { x: new Date(2016, 1, 1), y: 4 }\n            ]}\n          />\n        </VictoryChart>\n      </div>\n    );\n  }\n }\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:0,category:null,display:null,title:"Alternative Events"}}},{node:{fields:{slug:"/gallery/animating-circular-progress-bar/",type:"gallery",raw:'---\nid: 1\ntitle: Animating Circular Progress Bar\n---\n\n```playground_norender\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      percent: 25, data: this.getData(0)\n    };\n  }\n\n  componentDidMount() {\n    let percent = 25;\n    this.setStateInterval = window.setInterval(() => {\n      percent += (Math.random() * 25);\n      percent = (percent > 100) ? 0 : percent;\n      this.setState({\n        percent, data: this.getData(percent)\n      });\n    }, 2000);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.setStateInterval);\n  }\n\n  getData(percent) {\n    return [{ x: 1, y: percent }, { x: 2, y: 100 - percent }];\n  }\n\n  render() {\n    return (\n      <div>\n        <svg viewBox="0 0 400 400" width="100%" height="100%">\n          <VictoryPie\n            standalone={false}\n            animate={{ duration: 1000 }}\n            width={400} height={400}\n            data={this.state.data}\n            innerRadius={120}\n            cornerRadius={25}\n            labels={() => null}\n            style={{\n              data: { fill: (d) => {\n                const color = d.y > 30 ? "green" : "red";\n                return d.x === 1 ? color : "transparent";\n              }\n              }\n            }}\n          />\n          <VictoryAnimation duration={1000} data={this.state}>\n            {(newProps) => {\n              return (\n                <VictoryLabel\n                  textAnchor="middle" verticalAnchor="middle"\n                  x={200} y={200}\n                  text={`${Math.round(newProps.percent)}%`}\n                  style={{ fontSize: 45 }}\n                />\n              );\n            }}\n          </VictoryAnimation>\n        </svg>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:1,category:null,display:null,title:"Animating Circular Progress Bar"}}},{node:{fields:{slug:"/guides/animations/",type:"guides",raw:""},headings:[{depth:1,value:"Animations"},{depth:2,value:"Transitions"}],frontmatter:{id:1,category:null,display:null,title:"Animations"}}},{node:{fields:{slug:"/guides/brush-and-zoom/",type:"guides",raw:""},headings:[{depth:1,value:"Brush and Zoom"}],frontmatter:{id:2,category:null,display:null,title:"Brush and Zoom"}}},{node:{fields:{slug:"/gallery/brush-zoom/",type:"gallery",raw:'---\nid: 2\ntitle: Brush and Zoom\n---\n\n```playground_norender\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      zoomDomain: { x: [new Date(1990, 1, 1), new Date(2009, 1, 1)] }\n    };\n  }\n\n  handleZoom(domain) {\n    this.setState({ zoomDomain: domain });\n  }\n\n  render() {\n    return (\n      <div>\n        <VictoryChart width={600} height={470} scale={{ x: "time" }}\n          containerComponent={\n            <VictoryZoomContainer\n              zoomDimension="x"\n              zoomDomain={this.state.zoomDomain}\n              onZoomDomainChange={this.handleZoom.bind(this)}\n            />\n          }\n        >\n            <VictoryLine\n              style={{\n                data: { stroke: "tomato" }\n              }}\n              data={[\n                { a: new Date(1982, 1, 1), b: 125 },\n                { a: new Date(1987, 1, 1), b: 257 },\n                { a: new Date(1993, 1, 1), b: 345 },\n                { a: new Date(1997, 1, 1), b: 515 },\n                { a: new Date(2001, 1, 1), b: 132 },\n                { a: new Date(2005, 1, 1), b: 305 },\n                { a: new Date(2011, 1, 1), b: 270 },\n                { a: new Date(2015, 1, 1), b: 470 }\n              ]}\n              x="a"\n              y="b"\n            />\n\n          </VictoryChart>\n          <VictoryChart\n            padding={{ top: 0, left: 50, right: 50, bottom: 30 }}\n            width={600} height={100} scale={{ x: "time" }}\n            containerComponent={\n              <VictoryBrushContainer\n                brushDimension="x"\n                brushDomain={this.state.zoomDomain}\n                onBrushDomainChange={this.handleZoom.bind(this)}\n              />\n            }\n          >\n            <VictoryAxis\n              tickFormat={(x) => new Date(x).getFullYear()}\n            />\n            <VictoryLine\n              style={{\n                data: { stroke: "tomato" }\n              }}\n              data={[\n                { key: new Date(1982, 1, 1), b: 125 },\n                { key: new Date(1987, 1, 1), b: 257 },\n                { key: new Date(1993, 1, 1), b: 345 },\n                { key: new Date(1997, 1, 1), b: 515 },\n                { key: new Date(2001, 1, 1), b: 132 },\n                { key: new Date(2005, 1, 1), b: 305 },\n                { key: new Date(2011, 1, 1), b: 270 },\n                { key: new Date(2015, 1, 1), b: 470 }\n              ]}\n              x="key"\n              y="b"\n            />\n          </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:2,category:null,display:null,title:"Brush and Zoom"}}},{node:{fields:{slug:"/docs/common-container-props/",type:"docs",raw:""},headings:[{depth:1,value:"Common Container Props"},{depth:3,value:"children"},{depth:3,value:"className"},{depth:3,value:"containerId"},{depth:3,value:"containerRef"},{depth:3,value:"desc"},{depth:3,value:"events"},{depth:3,value:"height"},{depth:3,value:"portalComponent"},{depth:3,value:"portalZIndex"},{depth:3,value:"responsive"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"title"},{depth:3,value:"width"},{depth:2,value:"Native-Only Props"},{depth:3,value:"onTouchStart"},{depth:3,value:"onTouchEnd"}],frontmatter:{id:33,category:"containers",display:null,title:"Common Container Props"}}},{node:{fields:{slug:"/docs/common-props/",type:"docs",raw:""},headings:[{depth:1,value:"Common Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:2,category:"none",display:null,title:"Common Props"}}},{node:{fields:{slug:"/guides/custom-charts/",type:"guides",raw:""},headings:[{depth:1,value:"Custom Charts"}],frontmatter:{id:3,category:null,display:null,title:"Custom Charts"}}},{node:{fields:{slug:"/guides/custom-components/",type:"guides",raw:""},headings:[{depth:1,value:"Custom Components"},{depth:2,value:"Altering default components"},{depth:2,value:"Wrapping components"},{depth:2,value:"Creating new components"}],frontmatter:{id:4,category:null,display:null,title:"Custom Components"}}},{node:{fields:{slug:"/gallery/custom-tooltip-labels/",type:"gallery",raw:'---\nid: 4\ntitle: Custom Tooltip Labels\n---\n\n```playground_norender\nclass CustomLabel extends React.Component {\n  render() {\n    return (\n      <g>\n        <VictoryLabel {...this.props}/>\n        <VictoryTooltip\n          {...this.props}\n          x={200} y={250}\n          text={`# ${this.props.text}`}\n          orientation="top"\n          pointerLength={0}\n          cornerRadius={50}\n          width={100}\n          height={100}\n          flyoutStyle={{ fill: "black" }}\n        />\n      </g>\n    );\n  }\n}\n\nCustomLabel.defaultEvents = VictoryTooltip.defaultEvents;\nCustomLabel.propTypes = { text: PropTypes.string };\n\nclass App extends React.Component {\n  render() {\n    return (\n        <VictoryPie\n          style={{ labels: { fill: "white" } }}\n          innerRadius={100}\n          labelRadius={120}\n          labels={(d) => d.y}\n          labelComponent={<CustomLabel/>}\n          data={[\n            { x: 1, y: 5 },\n            { x: 2, y: 4 },\n            { x: 3, y: 2 },\n            { x: 4, y: 3 },\n            { x: 5, y: 1 }\n          ]}\n        />\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:4,category:null,display:null,title:"Custom Tooltip Labels"}}},{node:{fields:{slug:"/guides/data-accessors/",type:"guides",raw:""},headings:[{depth:1,value:"Data Accessors"},{depth:2,value:"Specifying x and y data"},{depth:2,value:"Processing data"},{depth:2,value:"Sorting data"},{depth:2,value:"Plotting functions"}],frontmatter:{id:5,category:null,display:null,title:"Data Accessors"}}},{node:{fields:{slug:"/guides/events/",type:"guides",raw:""},headings:[{depth:1,value:"Events"},{depth:2,value:"Single Component Events"},{depth:2,value:"Nested Component Events"},{depth:2,value:"VictorySharedEvents"},{depth:2,value:"External Event Mutations"},{depth:2,value:"Simple Events"}],frontmatter:{id:6,category:null,display:null,title:"Events"}}},{node:{fields:{slug:"/docs/faq/",type:"docs",raw:""},headings:[{depth:1,value:"Frequently Asked Questions (FAQ)"},{depth:2,value:"Styles"},{depth:3,value:"How can I change the colors of lines and other elements in Victory?"},{depth:3,value:"How can I change the color of an individual point or bar?"},{depth:3,value:"How can I use gradient fills in Victory?"},{depth:2,value:"Annotations"},{depth:3,value:"How can I add arbitrary labels to my charts?"},{depth:3,value:"How can I annotate my charts with lines and markers?"},{depth:2,value:"Axes"},{depth:3,value:"How do I turn off the axes on VictoryChart?"},{depth:3,value:"Why is VictoryChart rendering only one axis?"},{depth:3,value:"Can I make a chart with multiple dependent axes?"},{depth:3,value:"How can I change the position of my axis?"},{depth:3,value:"How can I format my axis labels?"},{depth:3,value:"My axis labels are cut off. How can I fix them?"},{depth:3,value:"My axis labels are showing very small numbers. How do I fix this?"},{depth:2,value:"Labels and Tooltips"},{depth:3,value:"How can I add tooltips to a line?"},{depth:3,value:"How can I add my own events when I’m using "},{depth:2,value:"Layout"},{depth:3,value:"Why are the bars in my bar chart overlapping with the axis?"},{depth:3,value:"How can I change the size of my chart?"},{depth:2,value:"Containers and Behaviors"},{depth:3,value:"How can I use containers in Victory?"},{depth:3,value:"How can I make a chart with voronoi tooltips that can also zoom?"}],frontmatter:{id:1,category:"faq",display:null,title:"FAQs"}}},{node:{fields:{slug:"/docs/",type:"docs",raw:""},headings:[{depth:1,value:"Getting Started with Victory"},{depth:4,value:"Getting Started with Victory Native?"},{depth:2,value:"Tutorial"},{depth:4,value:"1. Set up a basic React project"},{depth:4,value:"2. Add Victory"},{depth:4,value:"3. Add your data"},{depth:4,value:"4. Add your first Victory component"},{depth:4,value:"5. Add a Chart wrapper"},{depth:4,value:"6. Customize the axes"},{depth:4,value:"7. Add a theme"},{depth:4,value:"8. Stack multiple bar charts"},{depth:4,value:"9. Override theme’s color scale"},{depth:2,value:"Next Steps"},{depth:2,value:"Documentation, Contributing, and Source"}],frontmatter:{id:0,category:"introduction",display:null,title:"Getting Started"}}},{node:{fields:{slug:"/gallery/horizontal-grouped-bars/",type:"gallery",raw:'---\nid: 5\ntitle: Horizontal Grouped Bars\n---\n\n``` playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <VictoryChart\n          theme={VictoryTheme.material}\n          domain={{ y: [0.5, 5.5] }}\n        >\n            <VictoryGroup horizontal\n              offset={10}\n              style={{ data: { width: 6 } }}\n              colorScale={["brown", "tomato", "gold"]}\n            >\n              <VictoryBar\n                data={[\n                  { x: 1, y: 1 },\n                  { x: 2, y: 2 },\n                  { x: 3, y: 3 },\n                  { x: 4, y: 2 },\n                  { x: 5, y: 1 }\n                ]}\n              />\n              <VictoryBar\n                data={[\n                  { x: 1, y: 2 },\n                  { x: 2, y: 3 },\n                  { x: 3, y: 4 },\n                  { x: 4, y: 5 },\n                  { x: 5, y: 5 }\n                ]}\n              />\n              <VictoryBar\n                data={[\n                  { x: 1, y: 1 },\n                  { x: 2, y: 2 },\n                  { x: 3, y: 3 },\n                  { x: 4, y: 4 },\n                  { x: 5, y: 4 }\n                ]}\n              />\n          </VictoryGroup>\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:5,category:null,display:null,title:"Horizontal Grouped Bars"}}},{node:{fields:{slug:"/gallery/interpolation/",type:"gallery",raw:'---\nid: 6\ntitle: Interpolation\n---\n\n``` playground_norender\nconst data = [\n  { x: 0, y: 0 },\n  { x: 1, y: 2 },\n  { x: 2, y: 1 },\n  { x: 3, y: 4 },\n  { x: 4, y: 3 },\n  { x: 5, y: 5 }\n];\n\nconst cartesianInterpolations = [\n  "basis",\n  "bundle",\n  "cardinal",\n  "catmullRom",\n  "linear",\n  "monotoneX",\n  "monotoneY",\n  "natural",\n  "step",\n  "stepAfter",\n  "stepBefore"\n];\n\nconst polarInterpolations = [\n  "basis",\n  "cardinal",\n  "catmullRom",\n  "linear"\n];\n\nconst InterpolationSelect = ({ currentValue, values, onChange }) => (\n  <select onChange={onChange} value={currentValue} style={{ width: 75 }}>\n    {values.map(\n      (value) => <option value={value} key={value}>{value}</option>\n    )}\n  </select>\n);\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      interpolation: "linear",\n      polar: false\n    };\n  }\n  render() {\n    return (\n      <div>\n        <InterpolationSelect\n          currentValue={this.state.interpolation}\n          values={this.state.polar ? polarInterpolations : cartesianInterpolations }\n          onChange={(event) => this.setState({ interpolation: event.target.value })}\n        />\n        <input\n          type="checkbox"\n          id="polar"\n          value={this.state.polar}\n          onChange={\n            (event) => this.setState({\n              polar: event.target.checked,\n              interpolation: "linear"\n            })\n          }\n          style={{ marginLeft: 25, marginRight: 5 }}\n        />\n        <label htmlFor="polar">polar</label>\n        <VictoryChart polar={this.state.polar} height={390}>\n          <VictoryLine\n            interpolation={this.state.interpolation} data={data}\n            style={{ data: { stroke: "#c43a31" } }}\n          />\n          <VictoryScatter data={data}\n            size={5}\n            style={{ data: { fill: "#c43a31" } }}\n          />\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:6,category:null,display:null,title:"Interpolation"}}},{node:{fields:{slug:"/guides/layout/",type:"guides",raw:""},headings:[{depth:1,value:"Layout"},{depth:2,value:"Default Layout"},{depth:2,value:"SVG Render Order"},{depth:2,value:"VictoryPortal"},{depth:2,value:"Altering VictoryContainer"},{depth:2,value:"Rendering components in custom containers"}],frontmatter:{id:7,category:null,display:null,title:"Layout"}}},{node:{fields:{slug:"/gallery/multiple-dependent-axes/",type:"gallery",raw:'---\nid: 7\ntitle: Multiple Dependent Axes\n---\n\n``` playground_norender\nconst data = [\n  [{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }, { x: 4, y: 4 }],\n  [{ x: 1, y: 400 }, { x: 2, y: 350 }, { x: 3, y: 300 }, { x: 4, y: 250 }],\n  [{ x: 1, y: 75 }, { x: 2, y: 85 }, { x: 3, y: 95 }, { x: 4, y: 100 }]\n];\n// find maxima for normalizing data\nconst maxima = data.map(\n\t(dataset) => Math.max(...dataset.map((d) => d.y))\n);\n\nconst xOffsets = [50, 200, 350];\nconst tickPadding = [ 0, 0, -15 ];\nconst anchors = ["end", "end", "start"];\nconst colors = ["black", "red", "blue"];\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <VictoryChart\n          theme={VictoryTheme.material}\n          width={400} height={400}\n          domain={{ y: [0, 1] }}\n        >\n         <VictoryAxis />\n          {data.map((d, i) => (\n            <VictoryAxis dependentAxis\n              key={i}\n              offsetX={xOffsets[i]}\n              style={{\n                axis: { stroke: colors[i] },\n                ticks: { padding: tickPadding[i] },\n                tickLabels: { fill: colors[i], textAnchor: anchors[i] }\n              }}\n              // Use normalized tickValues (0 - 1)\n              tickValues={[0.25, 0.5, 0.75, 1]}\n              // Re-scale ticks by multiplying by correct maxima\n              tickFormat={(t) => t * maxima[i]}\n            />\n          ))}\n          {data.map((d, i) => (\n            <VictoryLine\n              key={i}\n              data={d}\n              style={{ data: { stroke: colors[i] } }}\n              // normalize data\n              y={(datum) => datum.y / maxima[i]}\n            />\n          ))}\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:7,category:null,display:null,title:"Multiple Dependent Axes"}}},{node:{fields:{slug:"/gallery/multipoint-tooltip-labels/",type:"gallery",raw:'---\nid: 8\ntitle: Multipoint Tooltip Labels\n---\n\n``` playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <VictoryChart height={400} width={400}\n        domainPadding={{ y: 10 }}\n        containerComponent={\n          <VictoryVoronoiContainer\n            voronoiDimension="x"\n            labels={(d) => `y: ${d.y}`}\n            labelComponent={\n              <VictoryTooltip\n                cornerRadius={0}\n                flyoutStyle={{ fill: "white" }}\n              />}\n          />}\n      >\n        <VictoryLine\n          data={[\n            { x: 1, y: 5, l: "one" },\n            { x: 1.5, y: 5, l: "one point five" },\n            { x: 2, y: 4, l: "two" },\n            { x: 3, y: -2, l: "three" }\n          ]}\n          style={{\n            data: {\n              stroke: "tomato",\n              strokeWidth: (d, active) => {return active ? 4 : 2;}\n            },\n            labels: { fill: "tomato" }\n          }}\n        />\n\n        <VictoryLine\n          data={[\n            { x: 1, y: -3, l: "red" },\n            { x: 2, y: 5, l: "green" },\n            { x: 3, y: 3, l: "blue" }\n          ]}\n          style={{\n            data: {\n              stroke: "blue",\n              strokeWidth: (d, active) => {return active ? 4 : 2;}\n            },\n            labels: { fill: "blue" }\n          }}\n        />\n\n        <VictoryLine\n          data={[\n            { x: 1, y: 5, l: "cat" },\n            { x: 2, y: -4, l: "dog" },\n            { x: 3, y: -2, l: "bird" }\n          ]}\n          style={{\n            data: {\n              stroke: "black",\n              strokeWidth: (d, active) => {return active ? 4 : 2;}\n            },\n            labels: { fill: "black" }\n          }}\n        />\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:8,category:null,display:null,title:"Multipoint Tooltip Labels"}}},{node:{fields:{slug:"/docs/native/",type:"docs",raw:""},headings:[{depth:1,value:"Getting Started with Victory Native"},{depth:4,value:"1. Adding Victory Native to your React Native app"},{depth:4,value:"2. Using Victory Native in your React Native app"},{depth:4,value:"3. Testing Components that use Victory Native"}],frontmatter:{id:1,category:"introduction",display:null,title:"Native"}}},{node:{fields:{slug:"/gallery/parallel-brush-axis/",type:"gallery",raw:'---\nid: 0\ntitle: Parallel Brush Axes\n---\n\n```playground_norender\nconst data = [\n  { name: "Adrien", strength: 5, intelligence: 30, speed: 500, luck: 3 },\n  { name: "Brice", strength: 1, intelligence: 13, speed: 550, luck: 2 },\n  { name: "Casey", strength: 4, intelligence: 15, speed: 80, luck: 1 },\n  { name: "Drew", strength: 3, intelligence: 25, speed: 600, luck: 5 },\n  { name: "Erin", strength: 9, intelligence: 50, speed: 350, luck: 4 },\n  { name: "Francis", strength: 2, intelligence: 40, speed: 200, luck: 2 }\n];\nconst attributes = ["strength", "intelligence", "speed", "luck"];\nconst height = 500;\nconst width = 500;\nconst padding = { top: 100, left: 50, right: 50, bottom: 50 };\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    const maximumValues = this.getMaximumValues();\n    const datasets = this.normalizeData(maximumValues);\n    this.state = {\n      maximumValues, datasets, filters: {}, activeDatasets: [], isFiltered: false\n    };\n  }\n\n  getMaximumValues() {\n    // Find the maximum value for each axis. This will be used to normalize data and re-scale axis ticks\n    return attributes.map((attribute) => {\n      return data.reduce((memo, datum) => {\n        return datum[attribute] > memo ? datum[attribute] : memo;\n      }, -Infinity);\n    });\n  }\n\n  normalizeData(maximumValues) {\n    // construct normalized datasets by dividing the value for each attribute by the maximum value\n    return data.map((datum) => ({\n      name: datum.name,\n      data: attributes.map((attribute, i) => (\n        { x: attribute, y: datum[attribute] / maximumValues[i] }\n      ))\n    }));\n  }\n\n  addNewFilters(domain, props) {\n    const filters = this.state.filters || {};\n    const extent = domain && Math.abs(domain[1] - domain[0]);\n    const minVal = 1 / Number.MAX_SAFE_INTEGER;\n    filters[props.name] = extent <= minVal ? undefined : domain;\n    return filters;\n  }\n\n  getActiveDatasets(filters) {\n    // Return the names from all datasets that have values within all filters\n    const isActive = (dataset) => {\n      return _.keys(filters).reduce((memo, name) => {\n        if (!memo || !Array.isArray(filters[name])) {\n          return memo;\n        }\n        const point = _.find(dataset.data, (d) => d.x === name);\n        return point &&\n          Math.max(...filters[name]) >= point.y && Math.min(...filters[name]) <= point.y;\n      }, true);\n    };\n\n    return this.state.datasets.map((dataset) => {\n      return isActive(dataset, filters) ? dataset.name : null;\n    }).filter(Boolean);\n  }\n\n  onDomainChange(domain, props) {\n    const filters = this.addNewFilters(domain, props);\n    const isFiltered = !_.isEmpty(_.values(filters).filter(Boolean));\n    const activeDatasets = isFiltered ? this.getActiveDatasets(filters) : this.state.datasets;\n    this.setState({ activeDatasets, filters, isFiltered });\n  }\n\n  isActive(dataset) {\n    // Determine whether a given dataset is active\n    return !this.state.isFiltered ? true : _.includes(this.state.activeDatasets, dataset.name);\n  }\n\n  getAxisOffset(index) {\n    const step = (width - padding.left - padding.right) / (attributes.length - 1);\n    return step * index + padding.left;\n  }\n\n  render() {\n    return (\n      <VictoryChart domain={{ y: [0, 1.1] }}\n        height={height} width={width} padding={padding}\n      >\n        <VictoryAxis\n          style={{\n            tickLabels: { fontSize: 20 }, axis: { stroke: "none" }\n          }}\n          tickLabelComponent={<VictoryLabel y={padding.top - 40}/>}\n        />\n        {this.state.datasets.map((dataset) => (\n          <VictoryLine\n            key={dataset.name} name={dataset.name} data={dataset.data}\n            groupComponent={<g/>}\n            style={{ data: {\n              stroke: "tomato",\n              opacity: this.isActive(dataset) ? 1 : 0.2\n            } }}\n          />\n        ))}\n        {attributes.map((attribute, index) => (\n          <VictoryAxis dependentAxis\n            key={index}\n            axisComponent={\n              <VictoryBrushLine name={attribute}\n                width={20}\n                onBrushDomainChange={this.onDomainChange.bind(this)}\n              />\n            }\n            offsetX={this.getAxisOffset(index)}\n            style={{\n              tickLabels: { fontSize: 15, padding: 15, pointerEvents: "none" },\n            }}\n            tickValues={[0.2, 0.4, 0.6, 0.8, 1]}\n            tickFormat={(tick) => Math.round(tick * this.state.maximumValues[index])}\n          />\n        ))}\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:0,category:null,display:null,title:"Parallel Brush Axes"}}},{node:{fields:{slug:"/gallery/polar-cardioid/",type:"gallery",raw:'---\nid: 9\ntitle: Polar Cardioid\n---\n\n```playground_norender\nconst colors = [ "#428517", "#77D200", "#D6D305", "#EC8E19", "#C92B05"];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <VictoryChart polar\n        theme={VictoryTheme.material}\n        domain={{ y: [0, 10] }}\n      >\n        <VictoryPolarAxis dependentAxis\n          style={{ axis: { stroke: "none" } }}\n          tickFormat={() => ""}\n        />\n        <VictoryPolarAxis\n          tickValues={[0, Math.PI / 2, Math.PI, (3 * Math.PI) / 2]}\n          tickFormat={["2π", "π/2", "π", "3π/2"]}\n          labelPlacement="vertical"\n        />\n        { [5, 4, 3, 2, 1].map((val, i) => {\n          return (\n            <VictoryLine\n              key={i}\n              samples={100}\n              style={{ data: { stroke: colors[i] } }}\n              y={(d) => val * (1 - Math.cos(d.x))}\n            />\n          );\n        })}\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:9,category:null,display:null,title:"Polar Cardioid"}}},{node:{fields:{slug:"/guides/polar-charts/",type:"guides",raw:""},headings:[{depth:1,value:"Polar Charts"},{depth:2,value:"Creating Polar Charts"}],frontmatter:{id:8,category:null,display:null,title:"Polar Charts"}}},{node:{fields:{slug:"/gallery/radar-chart/",type:"gallery",raw:'---\nid: 10\ntitle: Radar Chart\n---\n\n```playground_norender\nconst characterData = [\n  { strength: 1, intelligence: 250, luck: 1, stealth: 40, charisma: 50 },\n  { strength: 2, intelligence: 300, luck: 2, stealth: 80, charisma: 90 },\n  { strength: 5, intelligence: 225, luck: 3, stealth: 60, charisma: 120 }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.processData(characterData),\n      maxima: this.getMaxima(characterData)\n    };\n  }\n\n  getMaxima(data) {\n    const groupedData = Object.keys(data[0]).reduce((memo, key) => {\n      memo[key] = data.map((d) => d[key]);\n      return memo;\n    }, {});\n    return Object.keys(groupedData).reduce((memo, key) => {\n      memo[key] = Math.max(...groupedData[key]);\n      return memo;\n    }, {});\n  }\n\n  processData(data) {\n    const maxByGroup = this.getMaxima(data);\n    const makeDataArray = (d) => {\n      return Object.keys(d).map((key) => {\n        return { x: key, y: d[key] / maxByGroup[key] };\n      });\n    };\n    return data.map((datum) => makeDataArray(datum));\n  }\n\n  render() {\n    return (\n      <VictoryChart polar\n        theme={VictoryTheme.material}\n        domain={{ y: [ 0, 1 ] }}\n      >\n        <VictoryGroup colorScale={["gold", "orange", "tomato"]}\n          style={{ data: { fillOpacity: 0.2, strokeWidth: 2 } }}\n        >\n          {this.state.data.map((data, i) => {\n            return <VictoryArea key={i} data={data}/>;\n          })}\n        </VictoryGroup>\n      {\n        Object.keys(this.state.maxima).map((key, i) => {\n          return (\n            <VictoryPolarAxis key={i} dependentAxis\n              style={{\n                axisLabel: { padding: 10 },\n                axis: { stroke: "none" },\n                grid: { stroke: "grey", strokeWidth: 0.25, opacity: 0.5 }\n              }}\n              tickLabelComponent={\n                <VictoryLabel labelPlacement="vertical"/>\n              }\n              labelPlacement="perpendicular"\n              axisValue={i + 1} label={key}\n              tickFormat={(t) => Math.ceil(t * this.state.maxima[key])}\n              tickValues={[0.25, 0.5, 0.75]}\n            />\n          );\n        })\n      }\n        <VictoryPolarAxis\n          labelPlacement="parallel"\n          tickFormat={() => ""}\n          style={{\n            axis: { stroke: "none" },\n            grid: { stroke: "grey", opacity: 0.5 }\n          }}\n        />\n\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'
},headings:[],frontmatter:{id:10,category:null,display:null,title:"Radar Chart"}}},{node:{fields:{slug:"/gallery/victory-portal-stacked-area/",type:"gallery",raw:'---\nid: 18\ntitle: Stacked Areas with VictoryPortal\n---\n\n```playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <VictoryChart scale={{ x: "time" }} width={400} height={400}>\n          <VictoryStack colorScale="warm">\n            <VictoryGroup\n              data={[\n                { x: new Date(1986, 1, 1), y: 2 },\n                { x: new Date(1996, 1, 1), y: 3 },\n                { x: new Date(2006, 1, 1), y: 5 },\n                { x: new Date(2016, 1, 1), y: 4 }\n              ]}\n            >\n              <VictoryArea/>\n              <VictoryPortal>\n                <VictoryScatter\n                  style={{ data: { fill: "black" } }}\n                />\n              </VictoryPortal>\n            </VictoryGroup>\n            <VictoryGroup\n              data={[\n                { x: new Date(1986, 1, 1), y: 4 },\n                { x: new Date(1996, 1, 1), y: 3 },\n                { x: new Date(2006, 1, 1), y: 2 },\n                { x: new Date(2016, 1, 1), y: 5 }\n              ]}\n            >\n              <VictoryArea/>\n             <VictoryPortal>\n                <VictoryScatter\n                  style={{ data: { fill: "black" } }}\n                />\n              </VictoryPortal>\n            </VictoryGroup>\n            <VictoryGroup\n              data={[\n                { x: new Date(1986, 1, 1), y: 3 },\n                { x: new Date(1996, 1, 1), y: 1 },\n                { x: new Date(2006, 1, 1), y: 4 },\n                { x: new Date(2016, 1, 1), y: 2 }\n              ]}\n            >\n              <VictoryArea/>\n              <VictoryPortal>\n                <VictoryScatter\n                  style={{ data: { fill: "black" } }}\n                />\n              </VictoryPortal>\n            </VictoryGroup>\n          </VictoryStack>\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:18,category:null,display:null,title:"Stacked Areas with VictoryPortal"}}},{node:{fields:{slug:"/gallery/stacked-bars-central-axis/",type:"gallery",raw:'---\nid: 11\ntitle: Stacked Bars with Central Axis\n---\n\n```playground_norender\nconst dataA = [\n  { x: "Personal Drones", y: 57 },\n  { x: "Smart Thermostat", y: 40 },\n  { x: "Television", y: 38 },\n  { x: "Smartwatch", y: 37 },\n  { x: "Fitness Monitor", y: 25 },\n  { x: "Tablet", y: 19 },\n  { x: "Camera", y: 15 },\n  { x: "Laptop", y: 13 },\n  { x: "Phone", y: 12 }\n];\n\nconst dataB = dataA.map((point) => {\n  const y = Math.round(point.y + 3 * (Math.random() - 0.5));\n  return { ...point, y };\n});\n\nconst width = 500;\nconst height = 500;\nconst padding = { top: 80, bottom: 80, left: 20, right: 20 };\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <svg viewBox={`0 0 ${width} ${height}`}\n        style={{ width: "100%", height: "auto" }}\n      >\n        <VictoryStack horizontal\n          standalone={false}\n          /* setting a symmetric domain makes it much easier to center the axis  */\n          domain={{ x: [-60, 60] }}\n          padding={padding}\n          height={height}\n          width={width}\n          style={{ data: { width: 20 }, labels: { fontSize: 11 } }}\n        >\n          <VictoryBar\n            style={{ data: { fill: "tomato" } }}\n            data={dataA}\n            y={(data) => (-Math.abs(data.y))}\n            labels={(data) => (`${Math.abs(data.y)}%`)}\n          />\n          <VictoryBar\n            style={{ data: { fill: "orange" } }}\n            data={dataB}\n            labels={(data) => (`${Math.abs(data.y)}%`)}\n          />\n        </VictoryStack>\n\n        <VictoryAxis dependentAxis\n          height={height}\n          width={width}\n          padding={padding}\n          style={{\n            axis: { stroke: "transparent" },\n            ticks: { stroke: "transparent" },\n            tickLabels: { fontSize: 11, fill: "black" }\n          }}\n          /*\n            Use a custom tickLabelComponent with\n            an absolutely positioned x value to position\n            your tick labels in the center of the chart. The correct\n            y values are still provided by VictoryAxis for each tick\n          */\n          tickLabelComponent={<VictoryLabel x={250} textAnchor="middle"/>}\n          tickValues={dataA.map((point) => point.x).reverse()}\n        />\n      </svg>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:11,category:null,display:null,title:"Stacked Bars with Central Axis"}}},{node:{fields:{slug:"/gallery/stacked-grouped-bars/",type:"gallery",raw:'---\nid: 11\ntitle: Stacked Grouped Bars\n---\n\n```playground_norender\nclass App extends React.Component {\n\n  render() {\n    const getBarData = () => {\n      return [1, 2, 3, 4, 5].map(() => {\n        return [\n          { x: 1, y: Math.random() },\n          { x: 2, y: Math.random() },\n          { x: 3, y: Math.random() }\n        ];\n      });\n    };\n\n    return (\n      <div>\n        <VictoryChart domainPadding={{ x: 50 }} width={400} height={400}>\n            <VictoryGroup offset={20} style={{ data: { width: 15 } }}>\n              <VictoryStack colorScale={"red"}>\n                {getBarData().map((data, index) => {\n                  return <VictoryBar key={index} data={data}/>;\n                })}\n              </VictoryStack>\n              <VictoryStack colorScale={"green"}>\n                {getBarData().map((data, index) => {\n                  return <VictoryBar key={index} data={data}/>;\n                })}\n              </VictoryStack>\n              <VictoryStack colorScale={"blue"}>\n                {getBarData().map((data, index) => {\n                  return <VictoryBar key={index} data={data}/>;\n                })}\n              </VictoryStack>\n            </VictoryGroup>\n          </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:11,category:null,display:null,title:"Stacked Grouped Bars"}}},{node:{fields:{slug:"/gallery/stacked-polar-bars/",type:"gallery",raw:'---\nid: 12\ntitle: Stacked Polar Bars\n---\n\n```playground_norender\nconst directions = {\n  0: "E", 45: "NE", 90: "N", 135: "NW",\n  180: "W", 225: "SW", 270: "S", 315: "SE"\n};\n\nconst orange = { base: "gold", highlight: "darkOrange" };\n\nconst red = { base: "tomato", highlight: "orangeRed" };\n\nconst innerRadius = 30;\n\nclass CompassCenter extends React.Component {\n\n  render() {\n    const { origin } = this.props;\n    const circleStyle = {\n      stroke: red.base, strokeWidth: 2, fill: orange.base\n    };\n    return (\n      <g>\n        <circle\n          cx={origin.x} cy={origin.y} r={innerRadius} style={circleStyle}\n        />\n      </g>\n    );\n  }\n}\n\nclass CenterLabel extends React.Component {\n  render() {\n    const { datum, active, color } = this.props;\n    const text = [ `${directions[datum._x]}`, `${Math.round(datum._y1)} mph` ];\n    const baseStyle = { fill: color.highlight, textAnchor: "middle" };\n    const style = [\n      { ...baseStyle, fontSize: 18, fontWeight: "bold" },\n      { ...baseStyle, fontSize: 12 }\n    ];\n\n    return active ?\n      (\n        <VictoryLabel\n          text={text} style={style} x={175} y={175} renderInPortal\n        />\n      ) : null;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { wind: this.getWindData() };\n  }\n\n  componentDidMount() {\n    this.setStateInterval = window.setInterval(() => {\n      this.setState({ wind: this.getWindData() });\n    }, 4000);\n  }\n\n  getWindData() {\n    return _.keys(directions).map((d) => {\n      const speed = Math.floor(_.random() * 17) + 4;\n      return {\n        windSpeed: speed,\n        windGust: speed + _.random(2, 10),\n        windBearing: +d\n      };\n    });\n  }\n\n  render() {\n    return (\n      <VictoryChart\n        polar\n        animate={{ duration: 500, onLoad: { duration: 500 } }}\n        theme={VictoryTheme.material}\n        innerRadius={innerRadius}\n        domainPadding={{ y: 10 }}\n        events={[{\n          childName: "all",\n          target: "data",\n          eventHandlers: {\n            onMouseOver: () => {\n              return [\n                { target: "labels", mutation: () => ({ active: true }) },\n                { target: "data", mutation: () => ({ active: true }) }\n              ];\n            },\n            onMouseOut: () => {\n              return [\n                { target: "labels", mutation: () => ({ active: false }) },\n                { target: "data", mutation: () => ({ active: false }) }\n              ];\n            }\n          }\n        }]}\n      >\n        <VictoryPolarAxis\n          dependentAxis\n          labelPlacement="vertical"\n          style={{ axis: { stroke: "none" } }}\n          tickFormat={() => ""}\n        />\n        <VictoryPolarAxis\n          labelPlacement="parallel"\n          tickValues={_.keys(directions).map((k) => +k)}\n          tickFormat={_.values(directions)}\n        />\n        <VictoryStack>\n          <VictoryBar\n            style={{ data: {\n              fill: (d, a) => a ? orange.highlight : orange.base,\n              width: 40\n            } }}\n            data={this.state.wind}\n            x="windBearing"\n            y="windSpeed"\n            labels={() => ""}\n            labelComponent={<CenterLabel color={orange}/>}\n          />\n          <VictoryBar\n            style={{ data: {\n              fill: (d, a) => a ? red.highlight : red.base,\n              width: 40\n            } }}\n            data={this.state.wind}\n            x="windBearing"\n            y={(d) => d.windGust - d.windSpeed}\n            labels={() => ""}\n            labelComponent={<CenterLabel color={red}/>}\n          />\n        </VictoryStack>\n        <CompassCenter/>\n      </VictoryChart>\n    );\n  }\n }\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:12,category:null,display:null,title:"Stacked Polar Bars"}}},{node:{fields:{slug:"/gallery/stream-graph/",type:"gallery",raw:'---\nid: 13\ntitle: Stream Graph\n---\n\n```playground_norender\n// This custom component is supplied in place of Path\nclass GradientPath extends React.Component {\n  toGrayscale(color) {\n    const integerColor = parseInt(color.replace("#", ""), 16);\n    const r = (integerColor >> 16) & 255;\n    const g = (integerColor >> 8) & 255;\n    const b = integerColor & 255;\n    const gray = parseInt(0.299 * r + 0.587 * g + 0.114 * b, 10);\n    return `rgb(${gray}, ${gray}, ${gray})`;\n  }\n\n  render() {\n    const { style, d, events } = this.props;\n    const gradientId = `gradient-${Math.random()}`;\n    const areaStyle = Object.assign(\n      {}, style, { fill: `url(${location.href}#${gradientId})` }\n    );\n    const percent = `${this.props.percent}%`;\n    const gray = this.toGrayscale(style.fill);\n    return (\n      <g key="area">\n        <defs>\n          <linearGradient id={gradientId}>\n              <stop offset="0%" stopColor={style.fill}/>\n              <stop offset={percent} stopColor={style.fill}/>\n              <stop offset={percent} stopColor={gray}/>\n              <stop offset="100%" stopColor={gray}/>\n          </linearGradient>\n        </defs>\n        <path key="area" style={areaStyle} d={d} {...events}/>\n      </g>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      // Imagine tying this to some UI control instead\n      percent: _.random(30, 80)\n    };\n  }\n\n  // This data is manipulated to approximate a stream.\n  getStreamData() {\n    return _.range(7).map((i) => {\n      return _.range(26).map((j) => {\n        return {\n          x: j,\n          y: (10 - i) * _.random(10 - i, 20 - 2 * i),\n          _y0: -1 * (10 - i) * _.random(10 - i, 20 - 2 * i)\n        };\n      });\n    });\n  }\n\n  render() {\n    const streamData = this.getStreamData();\n\n    const colors = [\n      "#006064", "#00796B", "#8BC34A", "#DCE775",\n      "#FFF59D", "#F4511E", "#c33409"\n    ];\n\n    return (\n      <div>\n        <VictoryChart\n          width={400} height={400}\n          domain={{ x: [0, 25], y: [-250, 250] }}\n        >\n          <VictoryAxis\n            style={{\n              axis: { stroke: "none" },\n              ticks: { stroke: "none" },\n              tickLabels: { fill: "none" },\n              grid: { stroke: "lightGray" }\n            }}\n            tickCount={20}\n          />\n          <VictoryAxis dependentAxis\n            style={{\n              ticks: { stroke: "gray" },\n              tickLabels: { fill: "gray", fontSize: 12 }\n            }}\n            crossAxis={false}\n          />\n\n          {\n            streamData.map((d, i) => {\n              return (\n                <VictoryArea key={i}\n                  interpolation="monotoneX"\n                  data={d}\n                  style={{ data: { fill: colors[i], stroke: "none" } }}\n                  dataComponent={\n                    <Area\n                      pathComponent={<GradientPath percent={this.state.percent}/>}\n                    />\n                  }\n                />\n              );\n            })\n          }\n          <VictoryLine\n            style={{\n              data: { stroke: "#c33409", strokeWidth: 3 }\n            }}\n            data={[\n              { x: 25 * this.state.percent / 100, y: -300 },\n              { x: 25 * this.state.percent / 100, y: 300 }\n            ]}\n          />\n        </VictoryChart>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:13,category:null,display:null,title:"Stream Graph"}}},{node:{fields:{slug:"/guides/tooltips/",type:"guides",raw:""},headings:[{depth:1,value:"Tooltips"},{depth:2,value:"Simple tooltips"},{depth:2,value:"Customizing Tooltips"},{depth:2,value:"Tooltips with VictoryVoronoiContainer"},{depth:2,value:"Multi-point Tooltips with VictoryVoronoiContainer"},{depth:2,value:"Tooltips with Other Events"},{depth:2,value:"Wrapping VictoryTooltip"}],frontmatter:{id:9,category:null,display:null,title:"Tooltips"}}},{node:{fields:{slug:"/guides/",type:"guides",raw:""},headings:[{depth:1,value:"Victory Guides"}],frontmatter:{id:0,category:null,display:!1,title:"Victory Guides"}}},{node:{fields:{slug:"/docs/victory-animation/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryAnimation"},{depth:2,value:"Props"},{depth:3,value:"children"},{depth:3,value:"data"},{depth:3,value:"duration"},{depth:3,value:"delay"},{depth:3,value:"easing"},{depth:3,value:"onEnd"}],frontmatter:{id:3,category:"more",display:null,title:"VictoryAnimation"}}},{node:{fields:{slug:"/docs/victory-area/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryArea"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"interpolation"},{depth:3,value:"labelComponent"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"labels"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:4,category:"charts",display:null,title:"VictoryArea"}}},{node:{fields:{slug:"/gallery/victory-area-animation/",type:"gallery",raw:'---\nid: 14\ntitle: VictoryArea Animation\n---\n\n```playground_norender\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: this.getData() };\n  }\n\n  componentDidMount() {\n    this.setStateInterval = window.setInterval(() => {\n      this.setState({ data: this.getData() });\n    }, 4000);\n  }\n\n  getData() {\n    return _.range(7).map(() => {\n      return [\n        { x: 1, y: _.random(1, 5) },\n        { x: 2, y: _.random(1, 10) },\n        { x: 3, y: _.random(2, 10) },\n        { x: 4, y: _.random(2, 10) },\n        { x: 5, y: _.random(2, 15) }\n      ];\n    });\n  }\n\n  render() {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        animate={{ duration: 1000 }}\n      >\n        <VictoryStack\n          colorScale={"blue"}\n        >\n          {this.state.data.map((data, i) => {\n            return (\n              <VictoryArea\n                key={i}\n                data={data}\n                interpolation={"basis"}\n              />\n            );\n          })}\n        </VictoryStack>\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:14,category:null,display:null,title:"VictoryArea Animation"}}},{node:{fields:{slug:"/gallery/victory-area-stroke/",type:"gallery",raw:'---\nid: 15\ntitle: VictoryArea with Stroke\n---\n\n```playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <VictoryChart width={400} height={400}>\n        <VictoryGroup\n          style={{\n            data: { strokeWidth: 3, fillOpacity: 0.4 }\n          }}\n        >\n          <VictoryArea\n            style={{\n              data: { fill: "cyan", stroke: "cyan" }\n            }}\n            data={[\n              { x: 1, y: 2 },\n              { x: 2, y: 3 },\n              { x: 3, y: 5 },\n              { x: 4, y: 4 },\n              { x: 5, y: 7 }\n            ]}\n          />\n          <VictoryArea\n            style={{\n              data: { fill: "magenta", stroke: "magenta" }\n            }}\n            data={[\n              { x: 1, y: 3 },\n              { x: 2, y: 2 },\n              { x: 3, y: 6 },\n              { x: 4, y: 2 },\n              { x: 5, y: 6 }\n            ]}\n          />\n        </VictoryGroup>\n      </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:15,category:null,display:null,title:"VictoryArea with Stroke"}}},{node:{fields:{slug:"/docs/victory-axis/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryAxis"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"axisComponent"},{depth:3,value:"axisLabelComponent"},{depth:3,value:"containerComponent"},{depth:3,value:"crossAxis"},{depth:3,value:"dependentAxis"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"fixLabelOverlap"},{depth:3,value:"gridComponent"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"invertAxis"},{depth:3,value:"label"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"offsetX"},{depth:3,value:"offsetY"},{depth:3,value:"orientation"},{depth:3,value:"padding"},{depth:3,value:"range"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"tickComponent"},{depth:3,value:"tickCount"},{depth:3,value:"tickFormat"},{depth:3,value:"tickLabelComponent"},{depth:3,value:"tickValues"},{depth:3,value:"width"}],frontmatter:{id:5,category:"charts",display:null,title:"VictoryAxis"}}},{node:{fields:{slug:"/docs/victory-bar/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryBar"},{depth:2,value:"Props"},{depth:3,value:"alignment"},{depth:3,value:"animate"},{depth:3,value:"barRatio"},{depth:3,value:"barWidth"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"cornerRadius"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"horizontal"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:6,category:"charts",display:null,title:"VictoryBar"}}},{node:{fields:{slug:"/docs/victory-boxplot/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryBoxPlot"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"boxWidth"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"horizontal"},{depth:3,value:"labelOrientation"},{depth:3,value:"labels"},{depth:3,value:"max"},{depth:3,value:"maxComponent"},{depth:3,value:"maxLabelComponent"},{depth:3,value:"maxLabels"},{depth:3,value:"maxDomain"},{depth:3,value:"median"},{depth:3,value:"medianComponent"},{depth:3,value:"medianLabelComponent"},{depth:3,value:"medianLabels"},{depth:3,value:"min"},{depth:3,value:"minComponent"},{depth:3,value:"minLabelComponent"},{depth:3,value:"minLabels"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"q1"},{depth:3,value:"q1Component"},{depth:3,value:"q1LabelComponent"},{depth:3,value:"q1Labels"},{depth:3,value:"q3"},{depth:3,value:"q3Component"},{depth:3,value:"q3LabelComponent"},{depth:3,value:"q3Labels"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"whiskerWidth"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:0,category:"charts",display:null,title:"VictoryBoxPlot"}}},{node:{fields:{slug:"/docs/victory-brush-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryBrushContainer"},{depth:2,value:"Props"},{depth:3,value:"allowDrag"},{depth:3,value:"allowResize"},{depth:3,value:"brushComponent"},{depth:3,value:"brushDimension"},{depth:3,value:"brushDomain"},{depth:3,value:"brushStyle"},{depth:3,value:"defaultBrushArea"},{depth:3,value:"disable"},{depth:3,value:"handleComponent"},{depth:3,value:"handleStyle"},{depth:3,value:"onBrushCleared"},{depth:3,value:"onBrushDomainChange"}],frontmatter:{id:7,category:"containers",display:null,title:"VictoryBrushContainer"}}},{node:{fields:{slug:"/docs/victory-brush-line/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryBrushLine"},{depth:2,value:"Props"},{depth:3,value:"allowDrag"},{depth:3,value:"allowResize"},{depth:3,value:"brushAreaComponent"},{depth:3,value:"brushAreaStyle"},{depth:3,value:"brushAreaWidth"},{depth:3,value:"brushComponent"},{depth:3,value:"brushDomain"},{depth:3,value:"brushStyle"},{depth:3,value:"brushWidth"},{depth:3,value:"className"},{depth:3,value:"dimension"},{depth:3,value:"disable"},{depth:3,value:"events"},{depth:3,value:"groupComponent"},{depth:3,value:"handleComponent"},{depth:3,value:"handleStyle"},{depth:3,value:"handleWidth"},{depth:3,value:"lineComponent"},{depth:3,value:"onBrushDomainChange"},{depth:3,value:"scale"},{depth:3,value:"style"},{depth:3,value:"type"},{depth:3,value:"width"}],frontmatter:{id:4,category:"more",display:null,title:"VictoryBrushLine"}}},{node:{fields:{slug:"/docs/victory-candlestick/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryCandlestick"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"candleColors"},{depth:3,value:"candleRatio"},{depth:3,value:"candleWidth"},{depth:3,value:"categories"},{depth:3,value:"close"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"high"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"low"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"open"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"wickStrokeWidth"},{depth:3,value:"width"},{depth:3,value:"x"}],frontmatter:{id:8,category:"charts",display:null,title:"VictoryCandlestick"}}},{node:{fields:{slug:"/docs/victory-chart/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryChart"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"children"},{depth:3,value:"containerComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"endAngle"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"innerRadius"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"standalone"},{depth:3,value:"startAngle"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"}],frontmatter:{id:9,category:"charts",display:null,title:"VictoryChart"}}},{node:{fields:{slug:"/docs/victory-clip-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryClipContainer"},{depth:2,value:"Props"},{depth:3,value:"children"},{depth:3,value:"circleComponent"},{depth:3,value:"className"},{depth:3,value:"clipHeight"},{depth:3,value:"clipId"},{depth:3,value:"clipPadding"},{depth:3,value:"clipPathComponent"},{depth:3,value:"clipWidth"},{depth:3,value:"events"},{depth:3,value:"groupComponent"},{depth:3,value:"origin"},{depth:3,value:"polar"},{depth:3,value:"radius"},{depth:3,value:"rectComponent"},{depth:3,value:"translateX"},{depth:3,value:"translateY"}],frontmatter:{id:10,category:"more",display:null,title:"VictoryClipContainer"}}},{node:{fields:{slug:"/docs/victory-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryContainer"}],frontmatter:{id:11,category:"containers",display:null,title:"VictoryContainer"}}},{node:{fields:{slug:"/docs/victory-cursor-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryCursorContainer"},{depth:2,value:"Props"},{depth:3,value:"cursorComponent"},{depth:3,value:"cursorDimension"},{depth:3,value:"cursorLabel"},{depth:3,value:"cursorLabelComponent"},{depth:3,value:"cursorLabelOffset"},{depth:3,value:"defaultCursorValue"},{depth:3,value:"disable"},{depth:3,value:"onCursorChange"}],frontmatter:{id:12,category:"containers",display:null,title:"VictoryCursorContainer"}}},{node:{fields:{slug:"/docs/victory-errorbar/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryErrorBar"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"borderWidth"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"errorX"},{depth:3,value:"errorY"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:13,category:"charts",display:null,title:"VictoryErrorBar"}}},{node:{fields:{slug:"/docs/victory-group/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryGroup"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"children"},{depth:3,value:"color"},{depth:3,value:"colorScale"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"horizontal"},{depth:3,value:"labels"},{depth:3,value:"labelComponent"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"offset"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:14,category:"charts",display:null,title:"VictoryGroup"}}},{node:{fields:{slug:"/docs/victory-label/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryLabel"},{depth:2,value:"Props"},{depth:3,value:"active"},{depth:3,value:"angle"},{depth:3,value:"capHeight"},{depth:3,value:"className"},{depth:3,value:"data"},{depth:3,value:"datum"},{depth:3,value:"desc"},{depth:3,value:"dx"},{depth:3,value:"dy"},{depth:3,value:"events"},{depth:3,value:"index"},{depth:3,value:"labelPlacement"},{depth:3,value:"lineHeight"},{depth:3,value:"origin"},{depth:3,value:"polar"},{depth:3,value:"renderInPortal"},{depth:3,value:"scale"},{depth:3,value:"style"},{depth:3,value:"text"},{depth:3,value:"textAnchor"},{depth:3,value:"transform"},{depth:3,value:"verticalAnchor"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:15,category:"more",display:null,title:"VictoryLabel"}}},{node:{fields:{slug:"/docs/victory-legend/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryLegend"},{depth:2,value:"Props"},{depth:3,value:"borderComponent"},{depth:3,value:"borderPadding"},{depth:3,value:"centerTitle"},{depth:3,value:"colorScale"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"gutter"},{depth:3,value:"height"},{depth:3,value:"itemsPerRow"},{depth:3,value:"labelComponent"},{depth:3,value:"orientation"},{depth:3,value:"padding"},{depth:3,
value:"rowGutter"},{depth:3,value:"sharedEvents"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"symbolSpacer"},{depth:3,value:"theme"},{depth:3,value:"title"},{depth:3,value:"titleComponent"},{depth:3,value:"titleOrientation"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:16,category:"more",display:null,title:"VictoryLegend"}}},{node:{fields:{slug:"/docs/victory-line/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryLine"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"interpolation"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:17,category:"charts",display:null,title:"VictoryLine"}}},{node:{fields:{slug:"/gallery/victory-line-null-data/",type:"gallery",raw:"---\nid: 16\ntitle: VictoryLine with Null Data\n---\n\n```playground_norender\nclass App extends React.Component {\n\n  render() {\n    return (\n      <VictoryChart theme={VictoryTheme.material}>\n        <VictoryLine\n          data={[\n            { x: 1, y: 1 },\n            { x: 2, y: 3 },\n            { x: 3, y: 5 },\n            { x: 4, y: 2 },\n            { x: 5, y: null },\n            { x: 6, y: null },\n            { x: 7, y: 6 },\n            { x: 8, y: 7 },\n            { x: 9, y: 8 },\n            { x: 10, y: 12 }\n          ]}\n        />\n      </VictoryChart>\n    );\n  }\n }\n\nReactDOM.render(<App/>, mountNode);\n```\n"},headings:[],frontmatter:{id:16,category:null,display:null,title:"VictoryLine with Null Data"}}},{node:{fields:{slug:"/docs/victory-pie/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryPie"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"colorScale"},{depth:3,value:"containerComponent"},{depth:3,value:"cornerRadius"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"endAngle"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"innerRadius"},{depth:3,value:"labelComponent"},{depth:3,value:"labelRadius"},{depth:3,value:"labels"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padAngle"},{depth:3,value:"padding"},{depth:3,value:"radius"},{depth:3,value:"sharedEvents"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"startAngle"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:18,category:"charts",display:null,title:"VictoryPie"}}},{node:{fields:{slug:"/gallery/victory-pie-center-label/",type:"gallery",raw:'---\nid: 17\ntitle: VictoryPie with Center Label\n---\n\n```playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <svg viewBox="0 0 400 400">\n        <VictoryPie\n          standalone={false}\n          width={400} height={400}\n          data={[\n            { x: 1, y: 120 }, { x: 2, y: 150 }, { x: 3, y: 75 }\n          ]}\n          innerRadius={68} labelRadius={100}\n          style={{ labels: { fontSize: 20, fill: "white" } }}\n        />\n        <VictoryLabel\n          textAnchor="middle"\n          style={{ fontSize: 20 }}\n          x={200} y={200}\n          text="Pie!"\n        />\n      </svg>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:17,category:null,display:null,title:"VictoryPie with Center Label"}}},{node:{fields:{slug:"/docs/victory-polar-axis/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryPolarAxis"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"axisAngle"},{depth:3,value:"axisComponent"},{depth:3,value:"axisLabelComponent"},{depth:3,value:"axisValue"},{depth:3,value:"circularAxisComponent"},{depth:3,value:"circularGridComponent"},{depth:3,value:"containerComponent"},{depth:3,value:"dependentAxis"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"endAngle"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"gridComponent"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"innerRadius"},{depth:3,value:"invertAxis"},{depth:3,value:"label"},{depth:3,value:"labelPlacement"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"range"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"standalone"},{depth:3,value:"startAngle"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"tickComponent"},{depth:3,value:"tickCount"},{depth:3,value:"tickFormat"},{depth:3,value:"tickLabelComponent"},{depth:3,value:"tickValues"},{depth:3,value:"width"}],frontmatter:{id:19,category:"charts",display:null,title:"VictoryPolarAxis"}}},{node:{fields:{slug:"/docs/victory-portal/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryPortal"},{depth:2,value:"Props"},{depth:3,value:"children"},{depth:3,value:"groupComponent"}],frontmatter:{id:20,category:"more",display:null,title:"VictoryPortal"}}},{node:{fields:{slug:"/docs/victory-primitives/",type:"docs",raw:""},headings:[{depth:1,value:"Victory Primitives"},{depth:2,value:"Primitive Components"},{depth:3,value:"Circle"},{depth:3,value:"ClipPath"},{depth:3,value:"Line"},{depth:3,value:"Path"},{depth:3,value:"Rect"},{depth:3,value:"Text"},{depth:3,value:"TSpan"},{depth:2,value:"Simple Components"},{depth:3,value:"Arc"},{depth:3,value:"Area"},{depth:3,value:"LineSegment"},{depth:3,value:"Bar"},{depth:3,value:"Box"},{depth:3,value:"Candle"},{depth:3,value:"Curve"},{depth:3,value:"ErrorBar"},{depth:3,value:"Flyout"},{depth:3,value:"Point"},{depth:3,value:"Slice"},{depth:3,value:"Voronoi"},{depth:3,value:"Whisker"}],frontmatter:{id:21,category:"more",display:null,title:"VictoryPrimitives"}}},{node:{fields:{slug:"/docs/victory-scatter/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryScatter"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"bubbleProperty"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxBubbleSize"},{depth:3,value:"maxDomain"},{depth:3,value:"minBubbleSize"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"size"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"symbol"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:22,category:"charts",display:null,title:"VictoryScatter"}}},{node:{fields:{slug:"/docs/victory-selection-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictorySelectionContainer"},{depth:2,value:"Props"},{depth:3,value:"activateSelectedData"},{depth:3,value:"disable"},{depth:3,value:"onSelection"},{depth:3,value:"onSelectionCleared"},{depth:3,value:"selectionBlacklist"},{depth:3,value:"selectionComponent"},{depth:3,value:"selectionDimension"},{depth:3,value:"selectionStyle"}],frontmatter:{id:23,category:"containers",display:null,title:"VictorySelectionContainer"}}},{node:{fields:{slug:"/docs/victory-shared-events/",type:"docs",raw:""},headings:[{depth:1,value:"VictorySharedEvents"},{depth:2,value:"Props"},{depth:3,value:"children"},{depth:3,value:"events"},{depth:3,value:"eventKey"},{depth:3,value:"externalEventMutations"}],frontmatter:{id:24,category:"more",display:null,title:"VictorySharedEvents"}}},{node:{fields:{slug:"/docs/victory-stack/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryStack"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"children"},{depth:3,value:"colorScale"},{depth:3,value:"containerComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"horizontal"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"xOffset"}],frontmatter:{id:25,category:"charts",display:null,title:"VictoryStack"}}},{node:{fields:{slug:"/docs/victory-theme/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryTheme"}],frontmatter:{id:26,category:"more",display:null,title:"VictoryTheme"}}},{node:{fields:{slug:"/docs/victory-tooltip/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryTooltip"},{depth:2,value:"Props"},{depth:3,value:"active"},{depth:3,value:"activateData"},{depth:3,value:"angle"},{depth:3,value:"cornerRadius"},{depth:3,value:"data"},{depth:3,value:"datum"},{depth:3,value:"dx"},{depth:3,value:"dy"},{depth:3,value:"events"},{depth:3,value:"flyoutStyle"},{depth:3,value:"flyoutComponent"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"horizontal"},{depth:3,value:"index"},{depth:3,value:"labelComponent"},{depth:3,value:"orientation"},{depth:3,value:"pointerLength"},{depth:3,value:"pointerWidth"},{depth:3,value:"renderInPortal"},{depth:3,value:"style"},{depth:3,value:"text"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"}],frontmatter:{id:27,category:"more",display:null,title:"VictoryTooltip"}}},{node:{fields:{slug:"/docs/victory-transition/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryTransition"},{depth:2,value:"Props"},{depth:3,value:"children"},{depth:3,value:"animate"},{depth:3,value:"animationWhitelist"}],frontmatter:{id:28,category:"more",display:null,title:"VictoryTransition"}}},{node:{fields:{slug:"/docs/victory-voronoi/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryVoronoi"},{depth:2,value:"Props"},{depth:3,value:"animate"},{depth:3,value:"categories"},{depth:3,value:"containerComponent"},{depth:3,value:"data"},{depth:3,value:"dataComponent"},{depth:3,value:"domain"},{depth:3,value:"domainPadding"},{depth:3,value:"eventKey"},{depth:3,value:"events"},{depth:3,value:"externalEventMutations"},{depth:3,value:"groupComponent"},{depth:3,value:"height"},{depth:3,value:"labelComponent"},{depth:3,value:"labels"},{depth:3,value:"maxDomain"},{depth:3,value:"minDomain"},{depth:3,value:"name"},{depth:3,value:"origin"},{depth:3,value:"padding"},{depth:3,value:"polar"},{depth:3,value:"range"},{depth:3,value:"samples"},{depth:3,value:"scale"},{depth:3,value:"sharedEvents"},{depth:3,value:"singleQuadrantDomainPadding"},{depth:3,value:"size"},{depth:3,value:"sortKey"},{depth:3,value:"sortOrder"},{depth:3,value:"standalone"},{depth:3,value:"style"},{depth:3,value:"theme"},{depth:3,value:"width"},{depth:3,value:"x"},{depth:3,value:"y"},{depth:3,value:"y0"}],frontmatter:{id:30,category:"charts",display:null,title:"VictoryVoronoi"}}},{node:{fields:{slug:"/docs/victory-voronoi-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryVoronoiContainer"},{depth:2,value:"Props"},{depth:3,value:"activateData"},{depth:3,value:"activateLabels"},{depth:3,value:"disable"},{depth:3,value:"labels"},{depth:3,value:"labelComponent"},{depth:3,value:"onActivated"},{depth:3,value:"onDeactivated"},{depth:3,value:"radius"},{depth:3,value:"voronoiBlacklist"},{depth:3,value:"voronoiDimension"},{depth:3,value:"voronoiPadding"}],frontmatter:{id:29,category:"containers",display:null,title:"VictoryVoronoiContainer"}}},{node:{fields:{slug:"/docs/victory-zoom-container/",type:"docs",raw:""},headings:[{depth:1,value:"VictoryZoomContainer"},{depth:2,value:"Props"},{depth:3,value:"allowPan"},{depth:3,value:"allowZoom"},{depth:3,value:"clipContainerComponent"},{depth:3,value:"disable"},{depth:3,value:"downsample"},{depth:3,value:"minimumZoom"},{depth:3,value:"onZoomDomainChange"},{depth:3,value:"zoomDomain"},{depth:3,value:"zoomDimension"}],frontmatter:{id:31,category:"containers",display:null,title:"VictoryZoomContainer"}}},{node:{fields:{slug:"/gallery/voronoi-tooltips-grouped/",type:"gallery",raw:'---\nid: 19\ntitle: Voronoi Tooltips with Grouped Components\n---\n\n```playground_norender\nclass App extends React.Component {\n  render() {\n    return (\n      <VictoryChart height={400} width={400}\n        containerComponent={<VictoryVoronoiContainer/>}\n      >\n          <VictoryGroup\n            color="#c43a31"\n            labels={(d) => `y: ${d.y}`}\n            labelComponent={\n              <VictoryTooltip\n                style={{ fontSize: 10 }}\n              />\n            }\n            data={[\n              { x: 1, y: -3 },\n              { x: 2, y: 5 },\n              { x: 3, y: 3 },\n              { x: 4, y: 0 },\n              { x: 5, y: -2 },\n              { x: 6, y: -2 },\n              { x: 7, y: 5 }\n            ]}\n          >\n            <VictoryLine/>\n            <VictoryScatter\n              size={(d, a) => {return a ? 8 : 3;}}\n            />\n          </VictoryGroup>\n          <VictoryGroup\n            labels={(d) => `y: ${d.y}`}\n            labelComponent={\n              <VictoryTooltip\n                style={{ fontSize: 10 }}\n              />\n            }\n            data={[\n              { x: 1, y: 3 },\n              { x: 2, y: 1 },\n              { x: 3, y: 2 },\n              { x: 4, y: -2 },\n              { x: 5, y: -1 },\n              { x: 6, y: 2 },\n              { x: 7, y: 3 }\n            ]}\n          >\n            <VictoryLine/>\n            <VictoryScatter\n              size={(d, a) => {return a ? 8 : 3;}}\n            />\n          </VictoryGroup>\n       </VictoryChart>\n    );\n  }\n}\n\nReactDOM.render(<App/>, mountNode);\n```\n'},headings:[],frontmatter:{id:19,category:null,display:null,title:"Voronoi Tooltips with Grouped Components"}}},{node:{fields:{slug:"/guides/zoom-large-data/",type:"guides",raw:""},headings:[{depth:1,value:"Zoom on Large Datasets"},{depth:2,value:"Basic scenario: time-series data"},{depth:2,value:"Render only visible points"},{depth:2,value:"Render a small sample of points"},{depth:2,value:"Demo"},{depth:2,value:"Extending this Demo"}],frontmatter:{id:10,category:null,display:null,title:"Zoom on Large Datasets"}}},{node:{fields:{slug:"/docs/create-container/",type:"docs",raw:""},headings:[{depth:1,value:"createContainer"},{depth:2,value:"Arguments"},{depth:3,value:"Behavior"},{depth:3,value:"Example"}],frontmatter:{id:32,category:"containers",display:null,title:"createContainer"}}}]}},layoutContext:{}}}});
//# sourceMappingURL=path----7a1764c42fd320211013.js.map