webpackJsonp([0x60fbb1303f2f],{853:function(e,t){e.exports={data:{markdownRemark:{html:'<h1 id="victoryvoronoicontainer"><a href="#victoryvoronoicontainer" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VictoryVoronoiContainer</h1>\n<p><code class="language-text">VictoryVoronoiContainer</code> adds the ability to associate a mouse position with the data point(s)\nclosest to it. When this container is added to a chart, changes in mouse position will add the <code class="language-text">active</code>\nprop to data and label components closest to the current mouse position. The closeness of data\npoints to a given position is determined by calculating a <a href="https://github.com/d3/d3-voronoi">voronoi diagram</a> based on the data of\nevery child <code class="language-text">VictoryVoronoiContainer</code> renders. This container is useful for adding hover interactions,\nlike tooltips, to small data points, or charts with dense or overlapping data. See\n<a href="https://formidable.com/open-source/victory/gallery/voronoi-tooltips-grouped">this example</a> to learn how to use <code class="language-text">VictoryVoronoiContainer</code> with tooltips.</p>\n<p><code class="language-text">VictoryVoronoiContainer</code> may be used with any Victory component that works with an x-y coordinate\nsystem, and should be added as the <code class="language-text">containerComponent</code> of the top-level component.\nHowever, the component that uses it must be standalone\n(<code class="language-text">standalone={true}</code>), which is the default for all top-level Victory components.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart domainPadding={{ y: 10 }}\n  containerComponent={\n    &lt;VictoryVoronoiContainer\n      labels={(d) =&gt; `${round(d.x, 2)}, ${round(d.y, 2)}`}\n    /&gt;\n  }\n&gt;\n  &lt;VictoryLine\n    y={(datum) =&gt; Math.sin(2 * Math.PI * datum.x)}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h2 id="props"><a href="#props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Props</h2>\n<p><code class="language-text">VictoryVoronoiContainer</code> uses a superset of props used by <a href="https://formidable.com/open-source/victory/docs/victory-container">VictoryContainer</a>. All props are optional.</p>\n<h3 id="activatedata"><a href="#activatedata" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>activateData</h3>\n<p><code class="language-text">type: boolean</code></p>\n<p>When the <code class="language-text">activateData</code> prop is set to true, the <code class="language-text">active</code> prop will be set to true on all data components within a voronoi area. When this prop is set to false, the <code class="language-text">onActivated</code> and <code class="language-text">onDeactivated</code> callbacks will still fire, but no mutations to data components will occur via Victory’s event system.</p>\n<p><em>default:</em> <code class="language-text">activateData={true}</code></p>\n<h3 id="activatelabels"><a href="#activatelabels" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>activateLabels</h3>\n<p><code class="language-text">type: boolean</code></p>\n<p>When the <code class="language-text">activateLabels</code> prop is set to true, the <code class="language-text">active</code> prop will be set to true on all labels corresponding to points within a voronoi area. When this prop is set to false, the <code class="language-text">onActivated</code> and <code class="language-text">onDeactivated</code> callbacks will still fire, but no mutations to label components will occur via Victory’s event system. Labels defined directly on <code class="language-text">VictoryVoronoiContainer</code> via the <code class="language-text">labels</code> prop will still appear when this prop is set to false.</p>\n<p><em>default:</em> <code class="language-text">activateLabels={true}</code></p>\n<h3 id="disable"><a href="#disable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>disable</h3>\n<p><code class="language-text">type: boolean</code></p>\n<p>When the <code class="language-text">disable</code> prop is set to <code class="language-text">true</code>, <code class="language-text">VictoryVoronoiContainer</code> events will not fire.</p>\n<h3 id="labels"><a href="#labels" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>labels</h3>\n<p><code class="language-text">type: function</code></p>\n<p>When a <code class="language-text">labels</code> prop is provided to <code class="language-text">VictoryVoronoiContainer</code> it will render a label component\nrather than activating labels on the child components it renders. This is useful for creating multi-\npoint tooltips. This prop should be given as a function which will be called once for each active point.  The <code class="language-text">labels</code> function will be called with the arguments <code class="language-text">point</code>, <code class="language-text">index</code>, and <code class="language-text">points</code>, where <code class="language-text">point</code> refers to a single active point, <code class="language-text">index</code> refers to the position of that point in the array of active points, and <code class="language-text">points</code> is an array of all active points.</p>\n<p><em>example:</em> <code class="language-text">labels={(point) =&gt; &quot;y: &quot; + point.y}</code></p>\n<h3 id="labelcomponent"><a href="#labelcomponent" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>labelComponent</h3>\n<p><code class="language-text">type: element</code></p>\n<p>The <code class="language-text">labelComponent</code> prop specified the component that will be rendered when <code class="language-text">labels</code> are defined\non <code class="language-text">VictoryVoronoiContainer</code>. If the <code class="language-text">labels</code> prop is omitted, no label component will be rendered.</p>\n<p><em>default:</em> <code class="language-text">labelComponent={&lt;VictoryTooltip/&gt;}</code></p>\n<h3 id="onactivated"><a href="#onactivated" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>onActivated</h3>\n<p><code class="language-text">type: function</code></p>\n<p>The <code class="language-text">onActivated</code> prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters <code class="language-text">points</code> (an array of active data objects) and <code class="language-text">props</code> (the props used by <code class="language-text">VictoryVoronoiContainer</code>).</p>\n<p><em>example:</em> <code class="language-text">onActivated={(points, props) =&gt; filterList(points, props)}</code></p>\n<h3 id="ondeactivated"><a href="#ondeactivated" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>onDeactivated</h3>\n<p><code class="language-text">type: function</code></p>\n<p>The <code class="language-text">onDeactivated</code> prop accepts a function to be called whenever points are deactivated.\nThe function is called with the parameters <code class="language-text">points</code> (an array of the newly-deactivated data objects) and <code class="language-text">props</code> (the props used by <code class="language-text">VictoryVoronoiContainer</code>).</p>\n<p><em>example:</em> <code class="language-text">onDeactivated={(points, props) =&gt; removeFromList(points, props)}</code></p>\n<h3 id="radius"><a href="#radius" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>radius</h3>\n<p><code class="language-text">type: number</code></p>\n<p>When the <code class="language-text">radius</code> prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number.</p>\n<p><em>example:</em> <code class="language-text">radius={25}</code></p>\n<h3 id="voronoiblacklist"><a href="#voronoiblacklist" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>voronoiBlacklist</h3>\n<p><code class="language-text">type: array[string]</code></p>\n<p>The <code class="language-text">voronoiBlacklist</code> prop is used to specify a list of components to ignore when calculating a shared voronoi diagram. Components with a <code class="language-text">name</code> prop matching an element in the <code class="language-text">voronoiBlacklist</code> array will be ignored by <code class="language-text">VictoryVoronoiContainer</code>. Ignored components will never be flagged as active, and will not contribute date to shared tooltips or labels.</p>\n<p><em>example:</em> <code class="language-text">voronoiBlacklist={[&quot;redPoints&quot;]}</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart domain={{ y: [0, 6] }}\n  containerComponent={\n    &lt;VictoryVoronoiContainer\n      voronoiBlacklist={[&quot;redPoints&quot;]}\n      labels={(d) =&gt; `y: ${d.y}`}\n    /&gt;\n  }\n&gt;\n  &lt;VictoryScatter name=&quot;redPoints&quot;\n  \tstyle={{ data: { fill: &quot;red&quot; }, labels: { fill: &quot;red&quot; } }}\n    data={[\n      { x: 0, y: 2 }, { x: 2, y: 3 }, { x: 4, y: 4 }, { x: 6, y: 5 }\n    ]}\n  /&gt;\n  &lt;VictoryScatter\n    data={[\n      { x: 2, y: 2 }, { x: 4, y: 3 }, { x: 6, y: 4 }, { x: 8, y: 5 }\n    ]}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="voronoidimension"><a href="#voronoidimension" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>voronoiDimension</h3>\n<p><code class="language-text">type: &quot;x&quot; || &quot;y&quot;</code></p>\n<p>When the <code class="language-text">voronoiDimension</code> prop is set, voronoi selection will only take the given dimension into account.\nFor example, when <code class="language-text">dimension</code> is set to “x”, all data points matching a particular x mouse position\nwill be activated regardless of y value. When this prop is not given, voronoi selection is\ndetermined by both x any y values.</p>\n<p><em>example:</em> <code class="language-text">voronoiDimension=&quot;x&quot;</code></p>\n<pre class="pre"><code class="language-playground">&lt;VictoryChart domain={{ y: [0, 6] }}\n  containerComponent={\n    &lt;VictoryVoronoiContainer\n      voronoiDimension=&quot;x&quot;\n      labels={(d) =&gt; `y: ${d.y}`}\n    /&gt;\n  }\n&gt;\n  &lt;VictoryScatter\n  \tstyle={{ data: { fill: &quot;red&quot; }, labels: { fill: &quot;red&quot; } }}\n    data={[\n      { x: 0, y: 2 }, { x: 2, y: 3 }, { x: 4, y: 4 }, { x: 6, y: 5 }\n    ]}\n  /&gt;\n  &lt;VictoryScatter\n    data={[\n      { x: 2, y: 2 }, { x: 4, y: 3 }, { x: 6, y: 4 }, { x: 8, y: 5 }\n    ]}\n  /&gt;\n&lt;/VictoryChart&gt;</code></pre>\n<h3 id="voronoipadding"><a href="#voronoipadding" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>voronoiPadding</h3>\n<p><code class="language-text">type: number</code></p>\n<p>When the <code class="language-text">voronoiPadding</code> prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number.</p>\n<p><em>example:</em> <code class="language-text">voronoiPadding={5}</code></p>',frontmatter:{id:29,scope:["round"],title:"VictoryVoronoiContainer"},fields:{slug:"/docs/victory-voronoi-container/"}}},pathContext:{slug:"/docs/victory-voronoi-container/"}}}});
//# sourceMappingURL=path---docs-victory-voronoi-container-b9d391c7b2722b0fc384.js.map