{"version":3,"sources":["webpack:///path---guides-data-accessors-dd140cdfa97e4debf953.js","webpack:///./.cache/json/guides-data-accessors.json"],"names":["webpackJsonp","884","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qmZAAyiaC,aAA8BC,GAAA,EAAAC,OAAA,kBAAAC,MAAA,kBAA2DC,QAAWC,KAAA,6BAAmCC,aAAgBD,KAAA","file":"path---guides-data-accessors-dd140cdfa97e4debf953.js","sourcesContent":["webpackJsonp([108064705166463],{\n\n/***/ 884:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"data-accessors\\\"><a href=\\\"#data-accessors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data Accessors</h1>\\n<p>Most Victory components expect data in the form of an array of data objects with values specified for <code class=\\\"language-text\\\">x</code> and <code class=\\\"language-text\\\">y</code>. Victory components expose data accessor props that may be used when data is not readily available in this format. Data accessor props may be used to specify how a data prop should be used, process a elements in a data array, or to plot math functions even when no data prop is given.</p>\\n<h2 id=\\\"specifying-x-and-y-data\\\"><a href=\\\"#specifying-x-and-y-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Specifying x and y data</h2>\\n<p>Some Victory components like <code class=\\\"language-text\\\">VictoryCandlestick</code> and <code class=\\\"language-text\\\">VictoryErrorBar</code> have unusual accessor props that match their expected data formats, but most Victory components expose standard <code class=\\\"language-text\\\">x</code> and <code class=\\\"language-text\\\">y</code> data accessor props. These props may be used to specify which properties or elements of the data array should be plotted on the x and y axes.</p>\\n<p>When given as strings, these accessors will specify which properties of a data object to plot. The following example will plot employees on the x axis and salaries on the y axis:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>VictoryBar</span>\\n  <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Jane Doe\\\"</span><span class=\\\"token punctuation\\\">,</span> salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">65000</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"John Doe\\\"</span><span class=\\\"token punctuation\\\">,</span> salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">62000</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">x</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>employee<span class=\\\"token punctuation\\\">\\\"</span></span>\\n  <span class=\\\"token attr-name\\\">y</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>salary<span class=\\\"token punctuation\\\">\\\"</span></span>\\n<span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>If data is given as an array of arrays, data accessors may be given as integers to specify the index of the nested array that should be plotted.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>VictoryBar</span>\\n  <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">x</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">y</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span></span>\\n<span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>Data accessors may also be given as path strings or arrays to specify deeply nested data.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token operator\\\">&lt;</span>VictoryBar\\n  data<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Doe\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> base<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">65000</span><span class=\\\"token punctuation\\\">,</span> bonus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2000</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"John\\\"</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Doe\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> base<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">62000</span><span class=\\\"token punctuation\\\">,</span> bonus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6000</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span>\\n  x<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"employee.firstName\\\"</span>\\n  y<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"salary\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"base\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<h2 id=\\\"processing-data\\\"><a href=\\\"#processing-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Processing data</h2>\\n<p>Data accessor props may be given as functions and used to process data, as in the following example.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryChart\\n    domainPadding={{x: 40}}\\n  &gt;\\n    &lt;VictoryBar\\n      data={[\\n        { experiment: &quot;trial 1&quot;, expected: 3.75, actual: 3.21 },\\n        { experiment: &quot;trial 2&quot;, expected: 3.75, actual: 3.38 },\\n        { experiment: &quot;trial 3&quot;, expected: 3.75, actual: 2.05 },\\n        { experiment: &quot;trial 4&quot;, expected: 3.75, actual: 3.71 }\\n      ]}\\n      x=&quot;experiment&quot;\\n      y={(d) =&gt; (d.actual / d.expected) * 100}\\n    /&gt;\\n    &lt;VictoryAxis\\n      label=&quot;experiment&quot;\\n      style={{\\n        axisLabel: { padding: 30 }\\n      }}\\n    /&gt;\\n    &lt;VictoryAxis dependentAxis\\n      label=&quot;percent yield&quot;\\n      style={{\\n        axisLabel: { padding: 40 }\\n      }}\\n    /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"sorting-data\\\"><a href=\\\"#sorting-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sorting data</h2>\\n<p>Sorting can be applied to the final data via the sortKey prop. This prop\\ncorresponds to the lodash <a href=\\\"https://lodash.com/docs/4.17.4#sortBy\\\">sortBy</a> function.</p>\\n<p>This prop can be provided as a string, function, or array of either.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryLine\\n    data={_.range(0, 2 * Math.PI, 0.01).map((t) =&gt; ({t}))}\\n    sortKey=&quot;t&quot;\\n    x={({t}) =&gt; Math.sin(3 * t + (2 * Math.PI))}\\n    y={({t}) =&gt; Math.sin(2 * t)}\\n  /&gt;</code></pre>\\n<h2 id=\\\"plotting-functions\\\"><a href=\\\"#plotting-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Plotting functions</h2>\\n<p>If data is not given, data accessor props may be used to plot math functions. In this scenarios, initial data will be generated based on the domain and number of samples. Alter the <code class=\\\"language-text\\\">samples</code> and <code class=\\\"language-text\\\">domain</code> props to change how functions are plotted.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryChart&gt;\\n    &lt;VictoryLine\\n      samples={50}\\n      style={{data:\\n        {stroke: &quot;red&quot;, strokeWidth: 4}\\n      }}\\n      y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\\n    /&gt;\\n\\n    &lt;VictoryLine\\n      samples={10}\\n      style={{data:\\n        {stroke: &quot;blue&quot;, strokeWidth: 4}\\n      }}\\n      y={(data) =&gt; Math.cos(2 * Math.PI * data.x)}\\n    /&gt;\\n  &lt;/VictoryChart&gt;</code></pre>\",\"frontmatter\":{\"id\":5,\"scope\":[\"assign\",\"range\"],\"title\":\"Data Accessors\"},\"fields\":{\"slug\":\"/guides/data-accessors/\"}}},\"pathContext\":{\"slug\":\"/guides/data-accessors/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-data-accessors-dd140cdfa97e4debf953.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"data-accessors\\\"><a href=\\\"#data-accessors\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Data Accessors</h1>\\n<p>Most Victory components expect data in the form of an array of data objects with values specified for <code class=\\\"language-text\\\">x</code> and <code class=\\\"language-text\\\">y</code>. Victory components expose data accessor props that may be used when data is not readily available in this format. Data accessor props may be used to specify how a data prop should be used, process a elements in a data array, or to plot math functions even when no data prop is given.</p>\\n<h2 id=\\\"specifying-x-and-y-data\\\"><a href=\\\"#specifying-x-and-y-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Specifying x and y data</h2>\\n<p>Some Victory components like <code class=\\\"language-text\\\">VictoryCandlestick</code> and <code class=\\\"language-text\\\">VictoryErrorBar</code> have unusual accessor props that match their expected data formats, but most Victory components expose standard <code class=\\\"language-text\\\">x</code> and <code class=\\\"language-text\\\">y</code> data accessor props. These props may be used to specify which properties or elements of the data array should be plotted on the x and y axes.</p>\\n<p>When given as strings, these accessors will specify which properties of a data object to plot. The following example will plot employees on the x axis and salaries on the y axis:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>VictoryBar</span>\\n  <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Jane Doe\\\"</span><span class=\\\"token punctuation\\\">,</span> salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">65000</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"John Doe\\\"</span><span class=\\\"token punctuation\\\">,</span> salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">62000</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">x</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>employee<span class=\\\"token punctuation\\\">\\\"</span></span>\\n  <span class=\\\"token attr-name\\\">y</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>salary<span class=\\\"token punctuation\\\">\\\"</span></span>\\n<span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>If data is given as an array of arrays, data accessors may be given as integers to specify the index of the nested array that should be plotted.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>VictoryBar</span>\\n  <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">x</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token attr-name\\\">y</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">}</span></span>\\n<span class=\\\"token punctuation\\\">/></span></span></code></pre>\\n      </div>\\n<p>Data accessors may also be given as path strings or arrays to specify deeply nested data.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\"><span class=\\\"token operator\\\">&lt;</span>VictoryBar\\n  data<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Jane\\\"</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Doe\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> base<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">65000</span><span class=\\\"token punctuation\\\">,</span> bonus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2000</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      employee<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"John\\\"</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Doe\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      salary<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> base<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">62000</span><span class=\\\"token punctuation\\\">,</span> bonus<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">6000</span> <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token operator\\\">...</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">}</span>\\n  x<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"employee.firstName\\\"</span>\\n  y<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"salary\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"base\\\"</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span></code></pre>\\n      </div>\\n<h2 id=\\\"processing-data\\\"><a href=\\\"#processing-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Processing data</h2>\\n<p>Data accessor props may be given as functions and used to process data, as in the following example.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryChart\\n    domainPadding={{x: 40}}\\n  &gt;\\n    &lt;VictoryBar\\n      data={[\\n        { experiment: &quot;trial 1&quot;, expected: 3.75, actual: 3.21 },\\n        { experiment: &quot;trial 2&quot;, expected: 3.75, actual: 3.38 },\\n        { experiment: &quot;trial 3&quot;, expected: 3.75, actual: 2.05 },\\n        { experiment: &quot;trial 4&quot;, expected: 3.75, actual: 3.71 }\\n      ]}\\n      x=&quot;experiment&quot;\\n      y={(d) =&gt; (d.actual / d.expected) * 100}\\n    /&gt;\\n    &lt;VictoryAxis\\n      label=&quot;experiment&quot;\\n      style={{\\n        axisLabel: { padding: 30 }\\n      }}\\n    /&gt;\\n    &lt;VictoryAxis dependentAxis\\n      label=&quot;percent yield&quot;\\n      style={{\\n        axisLabel: { padding: 40 }\\n      }}\\n    /&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"sorting-data\\\"><a href=\\\"#sorting-data\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Sorting data</h2>\\n<p>Sorting can be applied to the final data via the sortKey prop. This prop\\ncorresponds to the lodash <a href=\\\"https://lodash.com/docs/4.17.4#sortBy\\\">sortBy</a> function.</p>\\n<p>This prop can be provided as a string, function, or array of either.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryLine\\n    data={_.range(0, 2 * Math.PI, 0.01).map((t) =&gt; ({t}))}\\n    sortKey=&quot;t&quot;\\n    x={({t}) =&gt; Math.sin(3 * t + (2 * Math.PI))}\\n    y={({t}) =&gt; Math.sin(2 * t)}\\n  /&gt;</code></pre>\\n<h2 id=\\\"plotting-functions\\\"><a href=\\\"#plotting-functions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Plotting functions</h2>\\n<p>If data is not given, data accessor props may be used to plot math functions. In this scenarios, initial data will be generated based on the domain and number of samples. Alter the <code class=\\\"language-text\\\">samples</code> and <code class=\\\"language-text\\\">domain</code> props to change how functions are plotted.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryChart&gt;\\n    &lt;VictoryLine\\n      samples={50}\\n      style={{data:\\n        {stroke: &quot;red&quot;, strokeWidth: 4}\\n      }}\\n      y={(data) =&gt; Math.sin(2 * Math.PI * data.x)}\\n    /&gt;\\n\\n    &lt;VictoryLine\\n      samples={10}\\n      style={{data:\\n        {stroke: &quot;blue&quot;, strokeWidth: 4}\\n      }}\\n      y={(data) =&gt; Math.cos(2 * Math.PI * data.x)}\\n    /&gt;\\n  &lt;/VictoryChart&gt;</code></pre>\",\"frontmatter\":{\"id\":5,\"scope\":[\"assign\",\"range\"],\"title\":\"Data Accessors\"},\"fields\":{\"slug\":\"/guides/data-accessors/\"}}},\"pathContext\":{\"slug\":\"/guides/data-accessors/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides-data-accessors.json\n// module id = 884\n// module chunks = 108064705166463"],"sourceRoot":""}