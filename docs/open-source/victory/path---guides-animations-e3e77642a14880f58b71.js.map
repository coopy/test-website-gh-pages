{"version":3,"sources":["webpack:///path---guides-animations-e3e77642a14880f58b71.js","webpack:///./.cache/json/guides-animations.json"],"names":["webpackJsonp","880","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,g0KAAg4KC,aAA0CC,GAAA,EAAAC,OAAA,kBAAAC,MAAA,cAAuDC,QAAWC,KAAA,yBAA+BC,aAAgBD,KAAA","file":"path---guides-animations-e3e77642a14880f58b71.js","sourcesContent":["webpackJsonp([223549105555860],{\n\n/***/ 880:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"animations\\\"><a href=\\\"#animations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Animations</h1>\\n<p>VictoryAnimation is able to animate changes in props using <a href=\\\"https://github.com/d3/d3-interpolate\\\">d3-interpolate</a>. Victory components define their animations via the <code class=\\\"language-text\\\">animate</code> prop. <code class=\\\"language-text\\\">duration</code>, <code class=\\\"language-text\\\">delay</code>, <code class=\\\"language-text\\\">easing</code> and <code class=\\\"language-text\\\">onEnd</code> functions may all be specified via the <code class=\\\"language-text\\\">animate</code> prop.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      scatterData: this.getScatterData()\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this.setStateInterval = window.setInterval(() =&gt; {\\n      this.setState({\\n        scatterData: this.getScatterData()\\n      });\\n    }, 3000);\\n  }\\n\\n  componentWillUnmount() {\\n    window.clearInterval(this.setStateInterval);\\n  }\\n\\n\\n  getScatterData() {\\n    const colors =[\\n      &quot;violet&quot;, &quot;cornflowerblue&quot;, &quot;gold&quot;, &quot;orange&quot;,\\n      &quot;turquoise&quot;, &quot;tomato&quot;, &quot;greenyellow&quot;\\n    ];\\n    const symbols = [\\n      &quot;circle&quot;, &quot;star&quot;, &quot;square&quot;, &quot;triangleUp&quot;,\\n      &quot;triangleDown&quot;, &quot;diamond&quot;, &quot;plus&quot;\\n    ];\\n    return range(25).map((index) =&gt; {\\n      const scaledIndex = Math.floor(index % 7);\\n      return {\\n        x: random(10, 50),\\n        y: random(2, 100),\\n        size: random(8) + 3,\\n        symbol: symbols[scaledIndex],\\n        fill: colors[random(0, 6)],\\n        opacity: 0.6\\n      };\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      &lt;VictoryChart animate={{ duration: 2000, easing: &quot;bounce&quot; }}&gt;\\n        &lt;VictoryScatter\\n          data={this.state.scatterData}\\n          style={{\\n            data: {\\n              fill: (d) =&gt; d.fill,\\n              opacity: (d) =&gt; d.opacity\\n            }\\n          }}\\n        /&gt;\\n      &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\\n<h2 id=\\\"transitions\\\"><a href=\\\"#transitions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transitions</h2>\\n<p>Victory components define default transitions for entering and exiting nodes, but these may be overridden with the <code class=\\\"language-text\\\">onEnter</code> and <code class=\\\"language-text\\\">onExit</code> properties of the <code class=\\\"language-text\\\">animate</code> object. The <code class=\\\"language-text\\\">before</code> and <code class=\\\"language-text\\\">after</code> properties take functions whose return values alter the datum of the transitioning node before or after the transition. These functions are called with the original datum of the transitioning node, the index of that datum, and the entire data array.</p>\\n<p><strong>Note:</strong> Use private variables <code class=\\\"language-text\\\">_x</code>, <code class=\\\"language-text\\\">_y</code>, <code class=\\\"language-text\\\">_y0</code> and <code class=\\\"language-text\\\">_y1</code> when altering position data during transitions.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      data: this.getData()\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this.setStateInterval = window.setInterval(() =&gt; {\\n      this.setState({\\n        data: this.getData()\\n      });\\n    }, 3000);\\n  }\\n\\n  componentWillUnmount() {\\n    window.clearInterval(this.setStateInterval);\\n  }\\n\\n  getData() {\\n    const bars = random(6, 10);\\n    return range(bars).map((bar) =&gt; {\\n      return {x: bar + 1, y: random(2, 10)};\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n        domainPadding={{ x: 20 }}\\n        animate={{duration: 500}}\\n      &gt;\\n        &lt;VictoryBar\\n          data={this.state.data}\\n          style={{\\n            data: { fill: &quot;tomato&quot;, width: 12 }\\n          }}\\n          animate={{\\n            onExit: {\\n              duration: 500,\\n              before: () =&gt; ({\\n                _y: 0,\\n                fill: &quot;orange&quot;,\\n                label: &quot;BYE&quot;\\n              })\\n            }\\n          }}\\n        /&gt;\\n      &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\",\"frontmatter\":{\"id\":1,\"scope\":[\"range\",\"random\"],\"title\":\"Animations\"},\"fields\":{\"slug\":\"/guides/animations/\"}}},\"pathContext\":{\"slug\":\"/guides/animations/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-animations-e3e77642a14880f58b71.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"animations\\\"><a href=\\\"#animations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Animations</h1>\\n<p>VictoryAnimation is able to animate changes in props using <a href=\\\"https://github.com/d3/d3-interpolate\\\">d3-interpolate</a>. Victory components define their animations via the <code class=\\\"language-text\\\">animate</code> prop. <code class=\\\"language-text\\\">duration</code>, <code class=\\\"language-text\\\">delay</code>, <code class=\\\"language-text\\\">easing</code> and <code class=\\\"language-text\\\">onEnd</code> functions may all be specified via the <code class=\\\"language-text\\\">animate</code> prop.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      scatterData: this.getScatterData()\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this.setStateInterval = window.setInterval(() =&gt; {\\n      this.setState({\\n        scatterData: this.getScatterData()\\n      });\\n    }, 3000);\\n  }\\n\\n  componentWillUnmount() {\\n    window.clearInterval(this.setStateInterval);\\n  }\\n\\n\\n  getScatterData() {\\n    const colors =[\\n      &quot;violet&quot;, &quot;cornflowerblue&quot;, &quot;gold&quot;, &quot;orange&quot;,\\n      &quot;turquoise&quot;, &quot;tomato&quot;, &quot;greenyellow&quot;\\n    ];\\n    const symbols = [\\n      &quot;circle&quot;, &quot;star&quot;, &quot;square&quot;, &quot;triangleUp&quot;,\\n      &quot;triangleDown&quot;, &quot;diamond&quot;, &quot;plus&quot;\\n    ];\\n    return range(25).map((index) =&gt; {\\n      const scaledIndex = Math.floor(index % 7);\\n      return {\\n        x: random(10, 50),\\n        y: random(2, 100),\\n        size: random(8) + 3,\\n        symbol: symbols[scaledIndex],\\n        fill: colors[random(0, 6)],\\n        opacity: 0.6\\n      };\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      &lt;VictoryChart animate={{ duration: 2000, easing: &quot;bounce&quot; }}&gt;\\n        &lt;VictoryScatter\\n          data={this.state.scatterData}\\n          style={{\\n            data: {\\n              fill: (d) =&gt; d.fill,\\n              opacity: (d) =&gt; d.opacity\\n            }\\n          }}\\n        /&gt;\\n      &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\\n<h2 id=\\\"transitions\\\"><a href=\\\"#transitions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transitions</h2>\\n<p>Victory components define default transitions for entering and exiting nodes, but these may be overridden with the <code class=\\\"language-text\\\">onEnter</code> and <code class=\\\"language-text\\\">onExit</code> properties of the <code class=\\\"language-text\\\">animate</code> object. The <code class=\\\"language-text\\\">before</code> and <code class=\\\"language-text\\\">after</code> properties take functions whose return values alter the datum of the transitioning node before or after the transition. These functions are called with the original datum of the transitioning node, the index of that datum, and the entire data array.</p>\\n<p><strong>Note:</strong> Use private variables <code class=\\\"language-text\\\">_x</code>, <code class=\\\"language-text\\\">_y</code>, <code class=\\\"language-text\\\">_y0</code> and <code class=\\\"language-text\\\">_y1</code> when altering position data during transitions.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      data: this.getData()\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this.setStateInterval = window.setInterval(() =&gt; {\\n      this.setState({\\n        data: this.getData()\\n      });\\n    }, 3000);\\n  }\\n\\n  componentWillUnmount() {\\n    window.clearInterval(this.setStateInterval);\\n  }\\n\\n  getData() {\\n    const bars = random(6, 10);\\n    return range(bars).map((bar) =&gt; {\\n      return {x: bar + 1, y: random(2, 10)};\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      &lt;VictoryChart\\n        domainPadding={{ x: 20 }}\\n        animate={{duration: 500}}\\n      &gt;\\n        &lt;VictoryBar\\n          data={this.state.data}\\n          style={{\\n            data: { fill: &quot;tomato&quot;, width: 12 }\\n          }}\\n          animate={{\\n            onExit: {\\n              duration: 500,\\n              before: () =&gt; ({\\n                _y: 0,\\n                fill: &quot;orange&quot;,\\n                label: &quot;BYE&quot;\\n              })\\n            }\\n          }}\\n        /&gt;\\n      &lt;/VictoryChart&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\",\"frontmatter\":{\"id\":1,\"scope\":[\"range\",\"random\"],\"title\":\"Animations\"},\"fields\":{\"slug\":\"/guides/animations/\"}}},\"pathContext\":{\"slug\":\"/guides/animations/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides-animations.json\n// module id = 880\n// module chunks = 223549105555860"],"sourceRoot":""}