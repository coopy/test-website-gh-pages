{"version":3,"sources":["webpack:///path---guides-events-ea6599dacc27013d7dfe.js","webpack:///./.cache/json/guides-events.json"],"names":["webpackJsonp","885","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wxlBAAgomBC,aAA8BC,GAAA,EAAAC,OAAA,UAAAC,MAAA,UAA2CC,QAAWC,KAAA,qBAA2BC,aAAgBD,KAAA","file":"path---guides-events-ea6599dacc27013d7dfe.js","sourcesContent":["webpackJsonp([201074688312094],{\n\n/***/ 885:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h1>\\n<p>Victory uses a flexible event system that is agnostic of event type. Browser events like <code class=\\\"language-text\\\">onClick</code> are handled identically to mobile touch events like <code class=\\\"language-text\\\">onPressIn</code>.  Victory’s event system allows users to attach events to any rendered element, and trigger mutations on any other rendered element.</p>\\n<p>This guide will demonstrate how to use Victory’s event system within a single component, between several components nested within wrapper components like <code class=\\\"language-text\\\">VictoryChart</code> or <code class=\\\"language-text\\\">VictoryGroup</code>, and between several components using the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper. This guide will also explain how to bypass Victory’s event system entirely, and attach simple events directly to rendered components.</p>\\n<h2 id=\\\"single-component-events\\\"><a href=\\\"#single-component-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Single Component Events</h2>\\n<p>Events within a single component like <code class=\\\"language-text\\\">VictoryBar</code> may be defined by the <code class=\\\"language-text\\\">events</code> prop of the component. The component will be responsible for storing event-driven mutations on its state object. The <code class=\\\"language-text\\\">events</code> prop should be given as an array of event objects. Each object defines an event or set of events to attach to a particular target element, or set of target elements.</p>\\n<p>Target elements are specified by the <code class=\\\"language-text\\\">target</code> and <code class=\\\"language-text\\\">eventKey</code> properties. Valid <code class=\\\"language-text\\\">target</code> properties match the namespaces of the style element of any given component. For most components valid target properties are “data”, “labels”, and “parent”. The <code class=\\\"language-text\\\">target</code> property is required. The optional <code class=\\\"language-text\\\">eventKey</code> property may be given as a value or array of values.</p>\\n<p>Events are defined by the <code class=\\\"language-text\\\">eventHandlers</code> property which should be given as an object whose properties are named events such as <code class=\\\"language-text\\\">onClick</code>, and whose values are event handlers. Event handlers are called with the event, the props defining the element that triggered the event, and the event key of the element that triggered the event.</p>\\n<p>Return values from event handlers are used to define mutations affecting rendered elements. Return values from event handlers should be given as an array of mutation objects. Mutation objects may have <code class=\\\"language-text\\\">target</code> and <code class=\\\"language-text\\\">eventKey</code> properties to specify an element to mutate. If these properties are not given, the mutation will effect the element that triggered the event. Mutation objects should also have a <code class=\\\"language-text\\\">mutation</code> property whose value is a function. The mutation function will be called with the event, the props defining the element that will be mutated, and the event key of the element that will be mutated. The mutation function should return an object of props to be modified, and the new values for those props.</p>\\n<p>In the example below, clicking on any of the bars will trigger a change in the text of the corresponding labels.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryBar\\n    data={[\\n      {x: 1, y: 2, label: &quot;A&quot;},\\n      {x: 2, y: 4, label: &quot;B&quot;},\\n      {x: 3, y: 7, label: &quot;C&quot;},\\n      {x: 4, y: 3, label: &quot;D&quot;},\\n      {x: 5, y: 5, label: &quot;E&quot;},\\n    ]}\\n    events={[\\n      {\\n        target: &quot;data&quot;,\\n        eventHandlers: {\\n          onClick: () =&gt; {\\n            return [{\\n              target: &quot;labels&quot;,\\n              mutation: (props) =&gt; {\\n                return props.text === &quot;clicked&quot; ?\\n                  null : { text: &quot;clicked&quot; }\\n              }\\n            }];\\n          }\\n        }\\n      }\\n    ]}\\n  /&gt;</code></pre>\\n<h2 id=\\\"nested-component-events\\\"><a href=\\\"#nested-component-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nested Component Events</h2>\\n<p>Wrapper components like <code class=\\\"language-text\\\">VictoryChart</code>, <code class=\\\"language-text\\\">VictoryGroup</code>, and <code class=\\\"language-text\\\">VictoryStack</code> may define events for their children. Component events defined by wrappers operate much the same as single component events, except that the events are defined on the parent component, and event-driven mutations are stored in the parent’s state. Events on child components are specified with the <code class=\\\"language-text\\\">childName</code> property. Components that have a <code class=\\\"language-text\\\">name</code> prop specified will be referenced by name. If child components do not have a <code class=\\\"language-text\\\">name</code> specified they will be referenced by index. In the example below, clicking on either of the bottom two areas in the stack will change the color of the top area.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  events={[{\\n    childName: [&quot;area-1&quot;, &quot;area-2&quot;],\\n    target: &quot;data&quot;,\\n    eventHandlers: {\\n      onClick: () =&gt; {\\n        return [{\\n          childName: &quot;area-4&quot;,\\n          mutation: (props) =&gt; {\\n            const fill = props.style.fill;\\n            return fill === &quot;tomato&quot; ? null : {style: {fill: &quot;tomato&quot;}};\\n          }\\n        }];\\n      }\\n    }\\n  }]}\\n&gt;\\n  &lt;VictoryStack&gt;\\n    &lt;VictoryArea name=&quot;area-1&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 4}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-2&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 1}, {x: &quot;b&quot;, y: 4}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 7}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-3&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 3}, {x: &quot;b&quot;, y: 2}, {x: &quot;c&quot;, y: 6}, {x: &quot;d&quot;, y: 2}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-4&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 3}, {x: &quot;d&quot;, y: 4}\\n      ]}\\n    /&gt;\\n  &lt;/VictoryStack&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"victorysharedevents\\\"><a href=\\\"#victorysharedevents\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>VictorySharedEvents</h2>\\n<p>Components like <code class=\\\"language-text\\\">VictoryChart</code> use the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper automatically, but the wrapper may also be used on its own. Nest child components within the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper, and reference them as you would when using <code class=\\\"language-text\\\">VictoryChart</code></p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;svg viewBox=&quot;0 0 450 350&quot;&gt;\\n  &lt;VictorySharedEvents\\n    events={[{\\n      childName: [&quot;pie&quot;, &quot;bar&quot;],\\n      target: &quot;data&quot;,\\n      eventHandlers: {\\n        onMouseOver: () =&gt; {\\n          return [{\\n            childName: [&quot;pie&quot;, &quot;bar&quot;],\\n            mutation: (props) =&gt; {\\n              return {\\n                style: Object.assign({}, props.style, {fill: &quot;tomato&quot;})\\n              };\\n            }\\n          }];\\n        },\\n        onMouseOut: () =&gt; {\\n          return [{\\n            childName: [&quot;pie&quot;, &quot;bar&quot;],\\n            mutation: () =&gt; {\\n              return null;\\n            }\\n          }];\\n        }\\n      }\\n    }]}\\n  &gt;\\n    &lt;g transform={&quot;translate(150, 50)&quot;}&gt;\\n      &lt;VictoryBar name=&quot;bar&quot;\\n        width={300}\\n        standalone={false}\\n        style={{\\n          data: { width: 20 },\\n          labels: {fontSize: 25}\\n        }}\\n        data={[\\n          {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 4}\\n        ]}\\n        labels={[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]}\\n        labelComponent={&lt;VictoryLabel y={280}/&gt;}\\n      /&gt;\\n    &lt;/g&gt;\\n    &lt;g transform={&quot;translate(0, -75)&quot;}&gt;\\n      &lt;VictoryPie name=&quot;pie&quot;\\n        width={250}\\n        standalone={false}\\n        style={{ labels: {fontSize: 25, padding: 10}}}\\n        data={[\\n          {x: &quot;a&quot;, y: 1}, {x: &quot;b&quot;, y: 4}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 7}\\n        ]}\\n      /&gt;\\n    &lt;/g&gt;\\n  &lt;/VictorySharedEvents&gt;\\n&lt;/svg&gt;</code></pre>\\n<h2 id=\\\"external-event-mutations\\\"><a href=\\\"#external-event-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>External Event Mutations</h2>\\n<p>Occasionally is it necessary to trigger events in Victory’s event system from some external element such as a button or a form field. Use the <code class=\\\"language-text\\\">externalEventMutation</code> prop to specify a set of mutations to apply to a given chart. The <code class=\\\"language-text\\\">externalEventMutations</code> should be given in the following form:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\">externalEventMutations<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  callback<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">,</span>\\n  childName<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  eventKey<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n    CustomPropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>CustomPropTypes<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">,</span> CustomPropTypes<span class=\\\"token punctuation\\\">.</span>nonNegative<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  mutation<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">,</span>\\n  target<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The <code class=\\\"language-text\\\">target</code>, <code class=\\\"language-text\\\">eventKey</code>, and <code class=\\\"language-text\\\">childName</code> (when applicable) must always be specified. The <code class=\\\"language-text\\\">mutation</code> function will be called with the current props of the element specified by the <code class=\\\"language-text\\\">target</code>, <code class=\\\"language-text\\\">eventKey</code> and <code class=\\\"language-text\\\">childName</code> provided. The mutation function should return a mutation object for that element. The <code class=\\\"language-text\\\">callback</code> prop should be used to clear the <code class=\\\"language-text\\\">externalEventMutations</code> prop once the mutation has been applied. Clearing <code class=\\\"language-text\\\">externalEventMutations</code> is crucial for charts that animate.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      externalMutations: undefined\\n    };\\n  }\\n\\n  removeMutation() {\\n    this.setState({\\n      externalMutations: undefined\\n    });\\n  }\\n\\n  clearClicks() {\\n    this.setState({\\n      externalMutations: [\\n        {\\n          childName: &quot;Bar-1&quot;,\\n          target: [&quot;data&quot;],\\n          eventKey: &quot;all&quot;,\\n          mutation: () =&gt; ({ style: undefined }),\\n          callback: this.removeMutation.bind(this)\\n        }\\n      ]\\n    });\\n  }\\n\\n  render() {\\n    const buttonStyle = {\\n      backgroundColor: &quot;black&quot;,\\n      color: &quot;white&quot;,\\n      padding: &quot;10px&quot;,\\n      marginTop: &quot;10px&quot;\\n    };\\n    return (\\n      &lt;div&gt;\\n        &lt;button\\n          onClick={this.clearClicks.bind(this)}\\n          style={buttonStyle}\\n        &gt;\\n          Reset\\n        &lt;/button&gt;\\n        &lt;VictoryChart domain={{ x: [0, 5 ] }}\\n          externalEventMutations={this.state.externalMutations}\\n          events={[\\n            {\\n              target: &quot;data&quot;,\\n              childName: &quot;Bar-1&quot;,\\n              eventHandlers: {\\n                onClick: () =&gt; ({\\n                  target: &quot;data&quot;,\\n                  mutation: () =&gt; ({ style: { fill: &quot;orange&quot; } })\\n                })\\n              }\\n            }\\n          ]}\\n        &gt;\\n          &lt;VictoryBar name=&quot;Bar-1&quot;\\n            style={{ data: { fill: &quot;grey&quot;} }}\\n            labels={() =&gt; &quot;click me!&quot;}\\n            data={[\\n              { x: 1, y: 2 },\\n              { x: 2, y: 4 },\\n              { x: 3, y: 1 },\\n              { x: 4, y: 5 }\\n            ]}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n      &lt;/div&gt;\\n    )\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\\n<p><em>Note</em> External mutations are applied to the same state object that is used to control events in Victory, so depending on the order in which they are triggered, external event mutations may override mutations caused by internal Victory events or vice versa.</p>\\n<h2 id=\\\"simple-events\\\"><a href=\\\"#simple-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple Events</h2>\\n<p>For simple events, it may be desireable to bypass Victory’s event system. To do so, specify <code class=\\\"language-text\\\">events</code> props directly on primitive components rather than using the <code class=\\\"language-text\\\">events</code> prop on Victory components. The simple <code class=\\\"language-text\\\">events</code> prop should be given as an object whose properties are event names like <code class=\\\"language-text\\\">onClick</code>, and whose values are event handlers. Events specified this way will only be called with the standard event objects.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryBar\\n    data={[\\n      {x: 1, y: 2},\\n      {x: 2, y: 4},\\n      {x: 3, y: 7},\\n      {x: 4, y: 3},\\n      {x: 5, y: 5},\\n    ]}\\n    dataComponent={\\n      &lt;Bar\\n        events={{\\n          onClick: (evt) =&gt; alert(`(${evt.clientX}, ${evt.clientY})`)\\n        }}\\n      /&gt;\\n    }\\n  /&gt;</code></pre>\",\"frontmatter\":{\"id\":6,\"scope\":[\"assign\"],\"title\":\"Events\"},\"fields\":{\"slug\":\"/guides/events/\"}}},\"pathContext\":{\"slug\":\"/guides/events/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-events-ea6599dacc27013d7dfe.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"events\\\"><a href=\\\"#events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Events</h1>\\n<p>Victory uses a flexible event system that is agnostic of event type. Browser events like <code class=\\\"language-text\\\">onClick</code> are handled identically to mobile touch events like <code class=\\\"language-text\\\">onPressIn</code>.  Victory’s event system allows users to attach events to any rendered element, and trigger mutations on any other rendered element.</p>\\n<p>This guide will demonstrate how to use Victory’s event system within a single component, between several components nested within wrapper components like <code class=\\\"language-text\\\">VictoryChart</code> or <code class=\\\"language-text\\\">VictoryGroup</code>, and between several components using the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper. This guide will also explain how to bypass Victory’s event system entirely, and attach simple events directly to rendered components.</p>\\n<h2 id=\\\"single-component-events\\\"><a href=\\\"#single-component-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Single Component Events</h2>\\n<p>Events within a single component like <code class=\\\"language-text\\\">VictoryBar</code> may be defined by the <code class=\\\"language-text\\\">events</code> prop of the component. The component will be responsible for storing event-driven mutations on its state object. The <code class=\\\"language-text\\\">events</code> prop should be given as an array of event objects. Each object defines an event or set of events to attach to a particular target element, or set of target elements.</p>\\n<p>Target elements are specified by the <code class=\\\"language-text\\\">target</code> and <code class=\\\"language-text\\\">eventKey</code> properties. Valid <code class=\\\"language-text\\\">target</code> properties match the namespaces of the style element of any given component. For most components valid target properties are “data”, “labels”, and “parent”. The <code class=\\\"language-text\\\">target</code> property is required. The optional <code class=\\\"language-text\\\">eventKey</code> property may be given as a value or array of values.</p>\\n<p>Events are defined by the <code class=\\\"language-text\\\">eventHandlers</code> property which should be given as an object whose properties are named events such as <code class=\\\"language-text\\\">onClick</code>, and whose values are event handlers. Event handlers are called with the event, the props defining the element that triggered the event, and the event key of the element that triggered the event.</p>\\n<p>Return values from event handlers are used to define mutations affecting rendered elements. Return values from event handlers should be given as an array of mutation objects. Mutation objects may have <code class=\\\"language-text\\\">target</code> and <code class=\\\"language-text\\\">eventKey</code> properties to specify an element to mutate. If these properties are not given, the mutation will effect the element that triggered the event. Mutation objects should also have a <code class=\\\"language-text\\\">mutation</code> property whose value is a function. The mutation function will be called with the event, the props defining the element that will be mutated, and the event key of the element that will be mutated. The mutation function should return an object of props to be modified, and the new values for those props.</p>\\n<p>In the example below, clicking on any of the bars will trigger a change in the text of the corresponding labels.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryBar\\n    data={[\\n      {x: 1, y: 2, label: &quot;A&quot;},\\n      {x: 2, y: 4, label: &quot;B&quot;},\\n      {x: 3, y: 7, label: &quot;C&quot;},\\n      {x: 4, y: 3, label: &quot;D&quot;},\\n      {x: 5, y: 5, label: &quot;E&quot;},\\n    ]}\\n    events={[\\n      {\\n        target: &quot;data&quot;,\\n        eventHandlers: {\\n          onClick: () =&gt; {\\n            return [{\\n              target: &quot;labels&quot;,\\n              mutation: (props) =&gt; {\\n                return props.text === &quot;clicked&quot; ?\\n                  null : { text: &quot;clicked&quot; }\\n              }\\n            }];\\n          }\\n        }\\n      }\\n    ]}\\n  /&gt;</code></pre>\\n<h2 id=\\\"nested-component-events\\\"><a href=\\\"#nested-component-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nested Component Events</h2>\\n<p>Wrapper components like <code class=\\\"language-text\\\">VictoryChart</code>, <code class=\\\"language-text\\\">VictoryGroup</code>, and <code class=\\\"language-text\\\">VictoryStack</code> may define events for their children. Component events defined by wrappers operate much the same as single component events, except that the events are defined on the parent component, and event-driven mutations are stored in the parent’s state. Events on child components are specified with the <code class=\\\"language-text\\\">childName</code> property. Components that have a <code class=\\\"language-text\\\">name</code> prop specified will be referenced by name. If child components do not have a <code class=\\\"language-text\\\">name</code> specified they will be referenced by index. In the example below, clicking on either of the bottom two areas in the stack will change the color of the top area.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;VictoryChart\\n  events={[{\\n    childName: [&quot;area-1&quot;, &quot;area-2&quot;],\\n    target: &quot;data&quot;,\\n    eventHandlers: {\\n      onClick: () =&gt; {\\n        return [{\\n          childName: &quot;area-4&quot;,\\n          mutation: (props) =&gt; {\\n            const fill = props.style.fill;\\n            return fill === &quot;tomato&quot; ? null : {style: {fill: &quot;tomato&quot;}};\\n          }\\n        }];\\n      }\\n    }\\n  }]}\\n&gt;\\n  &lt;VictoryStack&gt;\\n    &lt;VictoryArea name=&quot;area-1&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 4}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-2&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 1}, {x: &quot;b&quot;, y: 4}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 7}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-3&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 3}, {x: &quot;b&quot;, y: 2}, {x: &quot;c&quot;, y: 6}, {x: &quot;d&quot;, y: 2}\\n      ]}\\n    /&gt;\\n    &lt;VictoryArea name=&quot;area-4&quot;\\n      data={[\\n        {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 3}, {x: &quot;d&quot;, y: 4}\\n      ]}\\n    /&gt;\\n  &lt;/VictoryStack&gt;\\n&lt;/VictoryChart&gt;</code></pre>\\n<h2 id=\\\"victorysharedevents\\\"><a href=\\\"#victorysharedevents\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>VictorySharedEvents</h2>\\n<p>Components like <code class=\\\"language-text\\\">VictoryChart</code> use the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper automatically, but the wrapper may also be used on its own. Nest child components within the <code class=\\\"language-text\\\">VictorySharedEvents</code> wrapper, and reference them as you would when using <code class=\\\"language-text\\\">VictoryChart</code></p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">&lt;svg viewBox=&quot;0 0 450 350&quot;&gt;\\n  &lt;VictorySharedEvents\\n    events={[{\\n      childName: [&quot;pie&quot;, &quot;bar&quot;],\\n      target: &quot;data&quot;,\\n      eventHandlers: {\\n        onMouseOver: () =&gt; {\\n          return [{\\n            childName: [&quot;pie&quot;, &quot;bar&quot;],\\n            mutation: (props) =&gt; {\\n              return {\\n                style: Object.assign({}, props.style, {fill: &quot;tomato&quot;})\\n              };\\n            }\\n          }];\\n        },\\n        onMouseOut: () =&gt; {\\n          return [{\\n            childName: [&quot;pie&quot;, &quot;bar&quot;],\\n            mutation: () =&gt; {\\n              return null;\\n            }\\n          }];\\n        }\\n      }\\n    }]}\\n  &gt;\\n    &lt;g transform={&quot;translate(150, 50)&quot;}&gt;\\n      &lt;VictoryBar name=&quot;bar&quot;\\n        width={300}\\n        standalone={false}\\n        style={{\\n          data: { width: 20 },\\n          labels: {fontSize: 25}\\n        }}\\n        data={[\\n          {x: &quot;a&quot;, y: 2}, {x: &quot;b&quot;, y: 3}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 4}\\n        ]}\\n        labels={[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]}\\n        labelComponent={&lt;VictoryLabel y={280}/&gt;}\\n      /&gt;\\n    &lt;/g&gt;\\n    &lt;g transform={&quot;translate(0, -75)&quot;}&gt;\\n      &lt;VictoryPie name=&quot;pie&quot;\\n        width={250}\\n        standalone={false}\\n        style={{ labels: {fontSize: 25, padding: 10}}}\\n        data={[\\n          {x: &quot;a&quot;, y: 1}, {x: &quot;b&quot;, y: 4}, {x: &quot;c&quot;, y: 5}, {x: &quot;d&quot;, y: 7}\\n        ]}\\n      /&gt;\\n    &lt;/g&gt;\\n  &lt;/VictorySharedEvents&gt;\\n&lt;/svg&gt;</code></pre>\\n<h2 id=\\\"external-event-mutations\\\"><a href=\\\"#external-event-mutations\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>External Event Mutations</h2>\\n<p>Occasionally is it necessary to trigger events in Victory’s event system from some external element such as a button or a form field. Use the <code class=\\\"language-text\\\">externalEventMutation</code> prop to specify a set of mutations to apply to a given chart. The <code class=\\\"language-text\\\">externalEventMutations</code> should be given in the following form:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code class=\\\"language-jsx\\\">externalEventMutations<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  callback<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">,</span>\\n  childName<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  eventKey<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n    CustomPropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">allOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>CustomPropTypes<span class=\\\"token punctuation\\\">.</span>integer<span class=\\\"token punctuation\\\">,</span> CustomPropTypes<span class=\\\"token punctuation\\\">.</span>nonNegative<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  mutation<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">,</span>\\n  target<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>array\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The <code class=\\\"language-text\\\">target</code>, <code class=\\\"language-text\\\">eventKey</code>, and <code class=\\\"language-text\\\">childName</code> (when applicable) must always be specified. The <code class=\\\"language-text\\\">mutation</code> function will be called with the current props of the element specified by the <code class=\\\"language-text\\\">target</code>, <code class=\\\"language-text\\\">eventKey</code> and <code class=\\\"language-text\\\">childName</code> provided. The mutation function should return a mutation object for that element. The <code class=\\\"language-text\\\">callback</code> prop should be used to clear the <code class=\\\"language-text\\\">externalEventMutations</code> prop once the mutation has been applied. Clearing <code class=\\\"language-text\\\">externalEventMutations</code> is crucial for charts that animate.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class App extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      externalMutations: undefined\\n    };\\n  }\\n\\n  removeMutation() {\\n    this.setState({\\n      externalMutations: undefined\\n    });\\n  }\\n\\n  clearClicks() {\\n    this.setState({\\n      externalMutations: [\\n        {\\n          childName: &quot;Bar-1&quot;,\\n          target: [&quot;data&quot;],\\n          eventKey: &quot;all&quot;,\\n          mutation: () =&gt; ({ style: undefined }),\\n          callback: this.removeMutation.bind(this)\\n        }\\n      ]\\n    });\\n  }\\n\\n  render() {\\n    const buttonStyle = {\\n      backgroundColor: &quot;black&quot;,\\n      color: &quot;white&quot;,\\n      padding: &quot;10px&quot;,\\n      marginTop: &quot;10px&quot;\\n    };\\n    return (\\n      &lt;div&gt;\\n        &lt;button\\n          onClick={this.clearClicks.bind(this)}\\n          style={buttonStyle}\\n        &gt;\\n          Reset\\n        &lt;/button&gt;\\n        &lt;VictoryChart domain={{ x: [0, 5 ] }}\\n          externalEventMutations={this.state.externalMutations}\\n          events={[\\n            {\\n              target: &quot;data&quot;,\\n              childName: &quot;Bar-1&quot;,\\n              eventHandlers: {\\n                onClick: () =&gt; ({\\n                  target: &quot;data&quot;,\\n                  mutation: () =&gt; ({ style: { fill: &quot;orange&quot; } })\\n                })\\n              }\\n            }\\n          ]}\\n        &gt;\\n          &lt;VictoryBar name=&quot;Bar-1&quot;\\n            style={{ data: { fill: &quot;grey&quot;} }}\\n            labels={() =&gt; &quot;click me!&quot;}\\n            data={[\\n              { x: 1, y: 2 },\\n              { x: 2, y: 4 },\\n              { x: 3, y: 1 },\\n              { x: 4, y: 5 }\\n            ]}\\n          /&gt;\\n        &lt;/VictoryChart&gt;\\n      &lt;/div&gt;\\n    )\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\\n<p><em>Note</em> External mutations are applied to the same state object that is used to control events in Victory, so depending on the order in which they are triggered, external event mutations may override mutations caused by internal Victory events or vice versa.</p>\\n<h2 id=\\\"simple-events\\\"><a href=\\\"#simple-events\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Simple Events</h2>\\n<p>For simple events, it may be desireable to bypass Victory’s event system. To do so, specify <code class=\\\"language-text\\\">events</code> props directly on primitive components rather than using the <code class=\\\"language-text\\\">events</code> prop on Victory components. The simple <code class=\\\"language-text\\\">events</code> prop should be given as an object whose properties are event names like <code class=\\\"language-text\\\">onClick</code>, and whose values are event handlers. Events specified this way will only be called with the standard event objects.</p>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground\\\">  &lt;VictoryBar\\n    data={[\\n      {x: 1, y: 2},\\n      {x: 2, y: 4},\\n      {x: 3, y: 7},\\n      {x: 4, y: 3},\\n      {x: 5, y: 5},\\n    ]}\\n    dataComponent={\\n      &lt;Bar\\n        events={{\\n          onClick: (evt) =&gt; alert(`(${evt.clientX}, ${evt.clientY})`)\\n        }}\\n      /&gt;\\n    }\\n  /&gt;</code></pre>\",\"frontmatter\":{\"id\":6,\"scope\":[\"assign\"],\"title\":\"Events\"},\"fields\":{\"slug\":\"/guides/events/\"}}},\"pathContext\":{\"slug\":\"/guides/events/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides-events.json\n// module id = 885\n// module chunks = 201074688312094"],"sourceRoot":""}