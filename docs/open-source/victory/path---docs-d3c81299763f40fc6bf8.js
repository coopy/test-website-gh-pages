webpackJsonp([0x7733ec7aff49],{856:function(a,n){a.exports={data:{markdownRemark:{html:'<h1 id="getting-started-with-victory"><a href="#getting-started-with-victory" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started with Victory</h1>\n<p>Victory is an opinionated, but fully overridable, ecosystem of composable React components for building interactive data visualizations. The following tutorial explains how to set up a basic chart. For next steps, please see our <a href="https://formidable.com/open-source/victory/docs/faq">FAQs</a> and <a href="https://formidable.com/open-source/victory/gallery">Gallery</a> sections. For more advanced examples, check out <a href="https://formidable.com/open-source/victory/guides">our guides</a>.</p>\n<h4 id="getting-started-with-victory-native"><a href="#getting-started-with-victory-native" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting Started with Victory Native?</h4>\n<p><a href="https://formidable.com/open-source/victory/docs/native">Check out the native version of this getting started tutorial</a></p>\n<h2 id="tutorial"><a href="#tutorial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tutorial</h2>\n<p>In this guide, we’ll show you how to get started with Victory and walk you through the creation and customization of a composed chart. We’ve created a GitHub repository with the completed project, and will link to the corresponding commit where appropriate to help you follow along. If you want, you can <a href="https://github.com/FormidableLabs/victory-tutorial/blob/master/src/js/client.js">view the completed tutorial here</a>.</p>\n<h4 id="1-set-up-a-basic-react-project"><a href="#1-set-up-a-basic-react-project" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Set up a basic React project</h4>\n<p>You can do this on your own if you’d like, or you can…</p>\n<ul>\n<li>Clone down <a href="https://github.com/FormidableLabs/victory-tutorial">this project we’ve started for you</a> using <code class="language-text">git clone git@github.com:FormidableLabs/victory-tutorial.git</code></li>\n<li><code class="language-text">cd victory-tutorial</code></li>\n<li>Replace the existing code in the <code class="language-text">client.js</code> file with:</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Victory Tutorial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'app\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<ul>\n<li>Run <code class="language-text">npm install</code> to install all necessary dependencies.</li>\n</ul>\n<p>Once you’ve completed these steps, you can run the webpack server with the command <code class="language-text">npm start</code>, and the project will render at <code class="language-text">localhost:8080</code>. All modifications will take place in your client.js file.</p>\n<h4 id="2-add-victory"><a href="#2-add-victory" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Add Victory</h4>\n<p>Add Victory to your project with the command <code class="language-text">npm install victory</code>, then import it into your React project. For now, let’s import the whole library until we know what chart type we’ll be using. The imports at the top of your main Javascript file should now look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">V</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4 id="3-add-your-data"><a href="#3-add-your-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Add your data</h4>\n<p>You can import your data from an external file or API, or create an array of data points as a variable. Here is the data that we’ll be using for our chart, which is tracking earnings per fiscal quarter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>quarter<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> earnings<span class="token punctuation">:</span> <span class="token number">13000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>quarter<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> earnings<span class="token punctuation">:</span> <span class="token number">16500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>quarter<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> earnings<span class="token punctuation">:</span> <span class="token number">14250</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>quarter<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> earnings<span class="token punctuation">:</span> <span class="token number">19000</span><span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h4 id="4-add-your-first-victory-component"><a href="#4-add-your-first-victory-component" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. Add your first Victory component</h4>\n<p>Since we’re doing a simple comparison of earnings between quarters, let’s use a bar chart to visualize the data. We aren’t going to need the whole Victory library, so let’s change our import statement to reflect only the components that we need.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VictoryBar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Components include sensible defaults, so even without data <code class="language-text">VictoryBar</code> will render a series of bars with default data.</p>\n<pre class="pre"><code class="language-playground">// renders the default component with fallback data\n&lt;VictoryBar/&gt;</code></pre>\n<p>Let’s add some data. VictoryBar looks for <code class="language-text">x</code> and <code class="language-text">y</code> values in data points, which our data doesn’t have. We can work around this by adding accessor props to our <code class="language-text">VictoryBar</code> component. (<a href="https://github.com/FormidableLabs/victory-tutorial/blob/3a0951d78202e4333fc8ae07a673173732209ee5/src/js/client.js">See the commit here</a>.)</p>\n<pre class="pre"><code class="language-playground_norender">const data = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryBar\n        data={data}\n        // data accessor for x values\n        x=&quot;quarter&quot;\n        // data accessor for y values\n        y=&quot;earnings&quot;\n      /&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h4 id="5-add-a-chart-wrapper"><a href="#5-add-a-chart-wrapper" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>5. Add a Chart wrapper</h4>\n<p><code class="language-text">VictoryChart</code> is a wrapper component that plots all of its children on the same scale. <code class="language-text">VictoryChart</code> also provides default axes. Import <code class="language-text">VictoryChart</code> like so:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VictoryBar<span class="token punctuation">,</span> VictoryChart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Next wrap the <code class="language-text">VictoryBar</code> component in <code class="language-text">VictoryChart</code>. Default axes are automatically configured to match data provided by <code class="language-text">VictoryBar</code>. (<a href="https://github.com/FormidableLabs/victory-tutorial/blob/15063b2f79cff843f668f43ddd46d4bcd7f96acd/src/js/client.js">See the commit here</a>.)</p>\n<pre class="pre"><code class="language-playground_norender">const data = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart&gt;\n        &lt;VictoryBar\n          data={data}\n          x=&quot;quarter&quot;\n          y=&quot;earnings&quot;\n        /&gt;\n      &lt;/VictoryChart&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h4 id="6-customize-the-axes"><a href="#6-customize-the-axes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>6. Customize the axes</h4>\n<p>Next, let’s modify the tick labels on the axes to be a little more descriptive. We can do this by adding and configuring <code class="language-text">VictoryAxis</code> components to our chart, so let’s import <code class="language-text">VictoryAxis</code>. Import statements should now look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VictoryBar<span class="token punctuation">,</span> VictoryChart<span class="token punctuation">,</span> VictoryAxis <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In the chart below, we’ve modified the axes to better fit our needs. If you want to retain a vertical axis, remember to add a second axis component with the <code class="language-text">dependentAxis</code> prop set to <code class="language-text">true</code>. We’ve modified the format of the tick labels on our vertical axis with the <code class="language-text">tickFormat</code> prop, and have included only the tick values that we need on the horizontal axis by passing an array to the <code class="language-text">tickValues</code> prop. We’ve also added the <code class="language-text">domainPadding</code> prop to our <code class="language-text">VictoryChart</code> component for good measure, to space the bars further from the y-axis (<a href="https://github.com/FormidableLabs/victory-tutorial/blob/c5be2277266d6e78f9402a610decb08e07642de2/src/js/client.js">See the commit here</a>.)</p>\n<pre class="pre"><code class="language-playground_norender">const data = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart\n        // domainPadding will add space to each side of VictoryBar to\n        // prevent it from overlapping the axis\n        domainPadding={20}\n      &gt;\n        &lt;VictoryAxis\n          // tickValues specifies both the number of ticks and where\n          // they are placed on the axis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[&quot;Quarter 1&quot;, &quot;Quarter 2&quot;, &quot;Quarter 3&quot;, &quot;Quarter 4&quot;]}\n        /&gt;\n        &lt;VictoryAxis\n          dependentAxis\n          // tickFormat specifies how ticks should be displayed\n          tickFormat={(x) =&gt; (`$${x / 1000}k`)}\n        /&gt;\n        &lt;VictoryBar\n          data={data}\n          x=&quot;quarter&quot;\n          y=&quot;earnings&quot;\n        /&gt;\n      &lt;/VictoryChart&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h4 id="7-add-a-theme"><a href="#7-add-a-theme" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>7. Add a theme</h4>\n<p>Victory charts come with a default grayscale theme so that all components look clean and consistent. But let’s switch it up with the Victory-provided Material theme. We can do that by importing VictoryTheme and adding a theme prop to <code class="language-text">VictoryChart</code>. Themes should always be applied to the outermost wrapper component in a chart.</p>\n<p>Import statements should look like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VictoryBar<span class="token punctuation">,</span> VictoryChart<span class="token punctuation">,</span> VictoryAxis<span class="token punctuation">,</span>\n        VictoryTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>And here’s the code and rendered component with the new theme (<a href="https://github.com/FormidableLabs/victory-tutorial/tree/fb904143eea6046e6841b4284e044360d4af5cf1/src/js/client.js">See the commit here</a>):</p>\n<pre class="pre"><code class="language-playground_norender">const data = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart\n        // adding the material theme provided with Victory\n        theme={VictoryTheme.material}\n        domainPadding={20}\n      &gt;\n        &lt;VictoryAxis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[&quot;Quarter 1&quot;, &quot;Quarter 2&quot;, &quot;Quarter 3&quot;, &quot;Quarter 4&quot;]}\n        /&gt;\n        &lt;VictoryAxis\n          dependentAxis\n          tickFormat={(x) =&gt; (`$${x / 1000}k`)}\n        /&gt;\n        &lt;VictoryBar\n          data={data}\n          x=&quot;quarter&quot;\n          y=&quot;earnings&quot;\n        /&gt;\n      &lt;/VictoryChart&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h4 id="8-stack-multiple-bar-charts"><a href="#8-stack-multiple-bar-charts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>8. Stack multiple bar charts</h4>\n<p>Next, let’s add more data. In this example we’ll compare three years’ worth of quarterly earnings in a stacked bar chart. <code class="language-text">VictoryStack</code> will handle the layout.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> VictoryBar<span class="token punctuation">,</span> VictoryChart<span class="token punctuation">,</span> VictoryAxis<span class="token punctuation">,</span>\n        VictoryTheme<span class="token punctuation">,</span> VictoryStack <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'victory\'</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Wrap all four <code class="language-text">VictoryBar</code> components with <code class="language-text">VictoryStack</code>. (<a href="https://github.com/FormidableLabs/victory-tutorial/tree/9bf170061599027e4bd5fcf8128e47adb83c0e98/src/js/client.js">See the commit here</a>.)</p>\n<pre class="pre"><code class="language-playground_norender">const data2012 = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nconst data2013 = [\n  {quarter: 1, earnings: 15000},\n  {quarter: 2, earnings: 12500},\n  {quarter: 3, earnings: 19500},\n  {quarter: 4, earnings: 13000}\n];\n\nconst data2014 = [\n  {quarter: 1, earnings: 11500},\n  {quarter: 2, earnings: 13250},\n  {quarter: 3, earnings: 20000},\n  {quarter: 4, earnings: 15500}\n];\n\nconst data2015 = [\n  {quarter: 1, earnings: 18000},\n  {quarter: 2, earnings: 13250},\n  {quarter: 3, earnings: 15000},\n  {quarter: 4, earnings: 12000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart\n        domainPadding={20}\n        theme={VictoryTheme.material}\n      &gt;\n        &lt;VictoryAxis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[&quot;Quarter 1&quot;, &quot;Quarter 2&quot;, &quot;Quarter 3&quot;, &quot;Quarter 4&quot;]}\n        /&gt;\n        &lt;VictoryAxis\n          dependentAxis\n          tickFormat={(x) =&gt; (`$${x / 1000}k`)}\n        /&gt;\n        &lt;VictoryStack&gt;\n          &lt;VictoryBar\n            data={data2012}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2013}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2014}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2015}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n        &lt;/VictoryStack&gt;\n      &lt;/VictoryChart&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h4 id="9-override-themes-color-scale"><a href="#9-override-themes-color-scale" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>9. Override theme’s color scale</h4>\n<p><code class="language-text">VictoryStack</code> can also be used to provide shared styles and props to its children. Let’s add a <code class="language-text">colorScale</code> prop to <code class="language-text">VictoryStack</code> to override the default <code class="language-text">colorScale</code> defined in <code class="language-text">VictoryTheme.material</code>. (<a href="https://github.com/FormidableLabs/victory-tutorial/tree/9c77240e45db4e9fde4123ae29304461739a7035/src/js/client.js">See the commit here</a>.)</p>\n<pre class="pre"><code class="language-playground_norender">const data2012 = [\n  {quarter: 1, earnings: 13000},\n  {quarter: 2, earnings: 16500},\n  {quarter: 3, earnings: 14250},\n  {quarter: 4, earnings: 19000}\n];\n\nconst data2013 = [\n  {quarter: 1, earnings: 15000},\n  {quarter: 2, earnings: 12500},\n  {quarter: 3, earnings: 19500},\n  {quarter: 4, earnings: 13000}\n];\n\nconst data2014 = [\n  {quarter: 1, earnings: 11500},\n  {quarter: 2, earnings: 13250},\n  {quarter: 3, earnings: 20000},\n  {quarter: 4, earnings: 15500}\n];\n\nconst data2015 = [\n  {quarter: 1, earnings: 18000},\n  {quarter: 2, earnings: 13250},\n  {quarter: 3, earnings: 15000},\n  {quarter: 4, earnings: 12000}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;VictoryChart\n        domainPadding={20}\n        theme={VictoryTheme.material}\n      &gt;\n        &lt;VictoryAxis\n          tickValues={[1, 2, 3, 4]}\n          tickFormat={[&quot;Quarter 1&quot;, &quot;Quarter 2&quot;, &quot;Quarter 3&quot;, &quot;Quarter 4&quot;]}\n        /&gt;\n        &lt;VictoryAxis\n          dependentAxis\n          tickFormat={(x) =&gt; (`$${x / 1000}k`)}\n        /&gt;\n        &lt;VictoryStack\n          colorScale={&quot;warm&quot;}\n        &gt;\n          &lt;VictoryBar\n            data={data2012}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2013}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2014}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n          &lt;VictoryBar\n            data={data2015}\n            x=&quot;quarter&quot;\n            y=&quot;earnings&quot;\n          /&gt;\n        &lt;/VictoryStack&gt;\n      &lt;/VictoryChart&gt;\n    )\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\n<h2 id="next-steps"><a href="#next-steps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Next Steps</h2>\n<p>Congratulations! You’ve created your first chart with Victory. Next, check out our <a href="https://formidable.com/open-source/victory/docs/faq">FAQs</a> and <a href="https://formidable.com/open-source/victory/gallery">Gallery</a> for more examples and information. Happy charting.</p>\n<h2 id="documentation-contributing-and-source"><a href="#documentation-contributing-and-source" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Documentation, Contributing, and Source</h2>\n<p>For more information about Victory and its components, check out the docs - see <a href="https://formidable.com/open-source/victory/docs/victory-chart">VictoryChart</a> to get started. Interested in helping out or seeing what’s happening under the hood? Victory is maintained at <a href="https://github.com/FormidableLabs/victory">github.com/FormidableLabs/victory</a>, and you can <a href="https://github.com/FormidableLabs/victory/#contributing">start contributing here</a>.</p>',
frontmatter:{id:0,scope:null,title:"Getting Started"},fields:{slug:"/docs/"}}},pathContext:{slug:"/docs/"}}}});
//# sourceMappingURL=path---docs-d3c81299763f40fc6bf8.js.map