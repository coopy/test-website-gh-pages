{"version":3,"sources":["webpack:///path---gallery-stacked-bars-central-axis-84807465a2b371a78720.js","webpack:///./.cache/json/gallery-stacked-bars-central-axis.json"],"names":["webpackJsonp","869","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,0hFAAshFC,aAA8BC,GAAA,GAAAC,MAAA,KAAAC,MAAA,kCAA8DC,QAAWC,KAAA,yCAA+CC,aAAgBD,KAAA","file":"path---gallery-stacked-bars-central-axis-84807465a2b371a78720.js","sourcesContent":["webpackJsonp([233584069262644],{\n\n/***/ 869:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">const dataA = [\\n  { x: &quot;Personal Drones&quot;, y: 57 },\\n  { x: &quot;Smart Thermostat&quot;, y: 40 },\\n  { x: &quot;Television&quot;, y: 38 },\\n  { x: &quot;Smartwatch&quot;, y: 37 },\\n  { x: &quot;Fitness Monitor&quot;, y: 25 },\\n  { x: &quot;Tablet&quot;, y: 19 },\\n  { x: &quot;Camera&quot;, y: 15 },\\n  { x: &quot;Laptop&quot;, y: 13 },\\n  { x: &quot;Phone&quot;, y: 12 }\\n];\\n\\nconst dataB = dataA.map((point) =&gt; {\\n  const y = Math.round(point.y + 3 * (Math.random() - 0.5));\\n  return { ...point, y };\\n});\\n\\nconst width = 500;\\nconst height = 500;\\nconst padding = { top: 80, bottom: 80, left: 20, right: 20 };\\n\\nclass App extends React.Component {\\n\\n  render() {\\n    return (\\n      &lt;svg viewBox={`0 0 ${width} ${height}`}\\n        style={{ width: &quot;100%&quot;, height: &quot;auto&quot; }}\\n      &gt;\\n        &lt;VictoryStack horizontal\\n          standalone={false}\\n          /* setting a symmetric domain makes it much easier to center the axis  */\\n          domain={{ x: [-60, 60] }}\\n          padding={padding}\\n          height={height}\\n          width={width}\\n          style={{ data: { width: 20 }, labels: { fontSize: 11 } }}\\n        &gt;\\n          &lt;VictoryBar\\n            style={{ data: { fill: &quot;tomato&quot; } }}\\n            data={dataA}\\n            y={(data) =&gt; (-Math.abs(data.y))}\\n            labels={(data) =&gt; (`${Math.abs(data.y)}%`)}\\n          /&gt;\\n          &lt;VictoryBar\\n            style={{ data: { fill: &quot;orange&quot; } }}\\n            data={dataB}\\n            labels={(data) =&gt; (`${Math.abs(data.y)}%`)}\\n          /&gt;\\n        &lt;/VictoryStack&gt;\\n\\n        &lt;VictoryAxis dependentAxis\\n          height={height}\\n          width={width}\\n          padding={padding}\\n          style={{\\n            axis: { stroke: &quot;transparent&quot; },\\n            ticks: { stroke: &quot;transparent&quot; },\\n            tickLabels: { fontSize: 11, fill: &quot;black&quot; }\\n          }}\\n          /*\\n            Use a custom tickLabelComponent with\\n            an absolutely positioned x value to position\\n            your tick labels in the center of the chart. The correct\\n            y values are still provided by VictoryAxis for each tick\\n          */\\n          tickLabelComponent={&lt;VictoryLabel x={250} textAnchor=&quot;middle&quot;/&gt;}\\n          tickValues={dataA.map((point) =&gt; point.x).reverse()}\\n        /&gt;\\n      &lt;/svg&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":11,\"scope\":null,\"title\":\"Stacked Bars with Central Axis\"},\"fields\":{\"slug\":\"/gallery/stacked-bars-central-axis/\"}}},\"pathContext\":{\"slug\":\"/gallery/stacked-bars-central-axis/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---gallery-stacked-bars-central-axis-84807465a2b371a78720.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">const dataA = [\\n  { x: &quot;Personal Drones&quot;, y: 57 },\\n  { x: &quot;Smart Thermostat&quot;, y: 40 },\\n  { x: &quot;Television&quot;, y: 38 },\\n  { x: &quot;Smartwatch&quot;, y: 37 },\\n  { x: &quot;Fitness Monitor&quot;, y: 25 },\\n  { x: &quot;Tablet&quot;, y: 19 },\\n  { x: &quot;Camera&quot;, y: 15 },\\n  { x: &quot;Laptop&quot;, y: 13 },\\n  { x: &quot;Phone&quot;, y: 12 }\\n];\\n\\nconst dataB = dataA.map((point) =&gt; {\\n  const y = Math.round(point.y + 3 * (Math.random() - 0.5));\\n  return { ...point, y };\\n});\\n\\nconst width = 500;\\nconst height = 500;\\nconst padding = { top: 80, bottom: 80, left: 20, right: 20 };\\n\\nclass App extends React.Component {\\n\\n  render() {\\n    return (\\n      &lt;svg viewBox={`0 0 ${width} ${height}`}\\n        style={{ width: &quot;100%&quot;, height: &quot;auto&quot; }}\\n      &gt;\\n        &lt;VictoryStack horizontal\\n          standalone={false}\\n          /* setting a symmetric domain makes it much easier to center the axis  */\\n          domain={{ x: [-60, 60] }}\\n          padding={padding}\\n          height={height}\\n          width={width}\\n          style={{ data: { width: 20 }, labels: { fontSize: 11 } }}\\n        &gt;\\n          &lt;VictoryBar\\n            style={{ data: { fill: &quot;tomato&quot; } }}\\n            data={dataA}\\n            y={(data) =&gt; (-Math.abs(data.y))}\\n            labels={(data) =&gt; (`${Math.abs(data.y)}%`)}\\n          /&gt;\\n          &lt;VictoryBar\\n            style={{ data: { fill: &quot;orange&quot; } }}\\n            data={dataB}\\n            labels={(data) =&gt; (`${Math.abs(data.y)}%`)}\\n          /&gt;\\n        &lt;/VictoryStack&gt;\\n\\n        &lt;VictoryAxis dependentAxis\\n          height={height}\\n          width={width}\\n          padding={padding}\\n          style={{\\n            axis: { stroke: &quot;transparent&quot; },\\n            ticks: { stroke: &quot;transparent&quot; },\\n            tickLabels: { fontSize: 11, fill: &quot;black&quot; }\\n          }}\\n          /*\\n            Use a custom tickLabelComponent with\\n            an absolutely positioned x value to position\\n            your tick labels in the center of the chart. The correct\\n            y values are still provided by VictoryAxis for each tick\\n          */\\n          tickLabelComponent={&lt;VictoryLabel x={250} textAnchor=&quot;middle&quot;/&gt;}\\n          tickValues={dataA.map((point) =&gt; point.x).reverse()}\\n        /&gt;\\n      &lt;/svg&gt;\\n    );\\n  }\\n}\\n\\nReactDOM.render(&lt;App/&gt;, mountNode);</code></pre>\",\"frontmatter\":{\"id\":11,\"scope\":null,\"title\":\"Stacked Bars with Central Axis\"},\"fields\":{\"slug\":\"/gallery/stacked-bars-central-axis/\"}}},\"pathContext\":{\"slug\":\"/gallery/stacked-bars-central-axis/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/gallery-stacked-bars-central-axis.json\n// module id = 869\n// module chunks = 233584069262644"],"sourceRoot":""}