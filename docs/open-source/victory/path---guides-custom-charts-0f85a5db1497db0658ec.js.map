{"version":3,"sources":["webpack:///path---guides-custom-charts-0f85a5db1497db0658ec.js","webpack:///./.cache/json/guides-custom-charts.json"],"names":["webpackJsonp","882","module","exports","data","markdownRemark","html","frontmatter","id","scope","title","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,2yTAAmzTC,aAA0CC,GAAA,EAAAC,OAAA,kBAAAC,MAAA,iBAA0DC,QAAWC,KAAA,4BAAkCC,aAAgBD,KAAA","file":"path---guides-custom-charts-0f85a5db1497db0658ec.js","sourcesContent":["webpackJsonp([110787567556812],{\n\n/***/ 882:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"custom-charts\\\"><a href=\\\"#custom-charts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Charts</h1>\\n<p>Victory lets you create fully custom charts that integrate seamlessly with the look and feel of your project. The following guide demonstrates how custom styles and modular chart components are used to create a cohesive chart with distinctive branding.</p>\\n<p>The following example shows how to create a chart with multiple independent axes without using the <code class=\\\"language-text\\\">VictoryChart</code> wrapper. This example also includes functional styles and axis customization.</p>\\n<hr>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomTheme extends React.Component {\\n  render() {\\n    const styles = this.getStyles();\\n    const dataSetOne = this.getDataSetOne();\\n    const dataSetTwo = this.getDataSetTwo();\\n    const tickValues = this.getTickValues();\\n\\n    return (\\n      &lt;div&gt;\\n        &lt;svg style={styles.parent} viewBox=&quot;0 0 450 350&quot;&gt;\\n\\n          {/* Create stylistic elements */}\\n          &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;30&quot; fill=&quot;#f01616&quot;/&gt;\\n          &lt;rect x=&quot;420&quot; y=&quot;10&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#458ca8&quot;/&gt;\\n\\n          {/* Define labels */}\\n          &lt;VictoryLabel x={25} y={24} style={styles.title}\\n            text=&quot;An outlook&quot;\\n          /&gt;\\n          &lt;VictoryLabel x={430} y={20} style={styles.labelNumber}\\n            text=&quot;1&quot;\\n          /&gt;\\n          &lt;VictoryLabel x={25} y={55} style={styles.labelOne}\\n            text={&quot;Economy \\\\n % change on a year earlier&quot;}\\n          /&gt;\\n          &lt;VictoryLabel x={425} y={55} style={styles.labelTwo}\\n            text={&quot;Dinosaur exports\\\\n $bn&quot;}\\n          /&gt;\\n\\n          &lt;g transform={&quot;translate(0, 40)&quot;}&gt;\\n            {/* Add shared independent axis */}\\n            &lt;VictoryAxis\\n              scale=&quot;time&quot;\\n              standalone={false}\\n              style={styles.axisYears}\\n              tickValues={tickValues}\\n              tickFormat={\\n                (x) =&gt; {\\n                  if (x.getFullYear() === 2000) {\\n                    return x.getFullYear();\\n                  }\\n                  if (x.getFullYear() % 5 === 0) {\\n                    return x.getFullYear().toString().slice(2);\\n                  }\\n                }\\n              }\\n            /&gt;\\n\\n            {/*\\n              Add the dependent axis for the first data set.\\n              Note that all components plotted against this axis will have the same y domain\\n            */}\\n            &lt;VictoryAxis dependentAxis\\n              domain={[-10, 15]}\\n              offsetX={50}\\n              orientation=&quot;left&quot;\\n              standalone={false}\\n              style={styles.axisOne}\\n            /&gt;\\n\\n            {/* Red annotation line */}\\n            &lt;VictoryLine\\n              data={[\\n                {x: new Date(1999, 1, 1), y: 0},\\n                {x: new Date(2014, 6, 1), y: 0}\\n              ]}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [-10, 15]\\n              }}\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineThree}\\n            /&gt;\\n\\n            {/* dataset one */}\\n            &lt;VictoryLine\\n              data={dataSetOne}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [-10, 15]\\n              }}\\n              interpolation=&quot;monotoneX&quot;\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineOne}\\n            /&gt;\\n\\n            {/*\\n              Add the dependent axis for the second data set.\\n              Note that all components plotted against this axis will have the same y domain\\n            */}\\n            &lt;VictoryAxis dependentAxis\\n              domain={[0, 50]}\\n              orientation=&quot;right&quot;\\n              standalone={false}\\n              style={styles.axisTwo}\\n            /&gt;\\n\\n            {/* dataset two */}\\n            &lt;VictoryLine\\n              data={dataSetTwo}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [0, 50]\\n              }}\\n              interpolation=&quot;monotoneX&quot;\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineTwo}\\n            /&gt;\\n          &lt;/g&gt;\\n        &lt;/svg&gt;\\n      &lt;/div&gt;\\n    );\\n  }\\n\\n  getDataSetOne() {\\n    return [\\n      {x: new Date(2000, 1, 1), y: 12},\\n      {x: new Date(2000, 6, 1), y: 10},\\n      {x: new Date(2000, 12, 1), y: 11},\\n      {x: new Date(2001, 1, 1), y: 5},\\n      {x: new Date(2002, 1, 1), y: 4},\\n      {x: new Date(2003, 1, 1), y: 6},\\n      {x: new Date(2004, 1, 1), y: 5},\\n      {x: new Date(2005, 1, 1), y: 7},\\n      {x: new Date(2006, 1, 1), y: 8},\\n      {x: new Date(2007, 1, 1), y: 9},\\n      {x: new Date(2008, 1, 1), y: -8.5},\\n      {x: new Date(2009, 1, 1), y: -9},\\n      {x: new Date(2010, 1, 1), y: 5},\\n      {x: new Date(2013, 1, 1), y: 1},\\n      {x: new Date(2014, 1, 1), y: 2},\\n      {x: new Date(2015, 1, 1), y: -5}\\n    ];\\n  }\\n\\n  getDataSetTwo() {\\n    return [\\n      {x: new Date(2000, 1, 1), y: 5},\\n      {x: new Date(2003, 1, 1), y: 6},\\n      {x: new Date(2004, 1, 1), y: 4},\\n      {x: new Date(2005, 1, 1), y: 10},\\n      {x: new Date(2006, 1, 1), y: 12},\\n      {x: new Date(2007, 2, 1), y: 48},\\n      {x: new Date(2008, 1, 1), y: 19},\\n      {x: new Date(2009, 1, 1), y: 31},\\n      {x: new Date(2011, 1, 1), y: 49},\\n      {x: new Date(2014, 1, 1), y: 40},\\n      {x: new Date(2015, 1, 1), y: 21}\\n    ];\\n  }\\n\\n  getTickValues() {\\n    return [\\n      new Date(1999, 1, 1),\\n      new Date(2000, 1, 1),\\n      new Date(2001, 1, 1),\\n      new Date(2002, 1, 1),\\n      new Date(2003, 1, 1),\\n      new Date(2004, 1, 1),\\n      new Date(2005, 1, 1),\\n      new Date(2006, 1, 1),\\n      new Date(2007, 1, 1),\\n      new Date(2008, 1, 1),\\n      new Date(2009, 1, 1),\\n      new Date(2010, 1, 1),\\n      new Date(2011, 1, 1),\\n      new Date(2012, 1, 1),\\n      new Date(2013, 1, 1),\\n      new Date(2014, 1, 1),\\n      new Date(2015, 1, 1),\\n      new Date(2016, 1, 1)\\n    ];\\n  }\\n\\n  getStyles() {\\n    const BLUE_COLOR = &quot;#00a3de&quot;;\\n    const RED_COLOR = &quot;#7c270b&quot;;\\n\\n    return {\\n      parent: {\\n        background: &quot;#ccdee8&quot;,\\n        boxSizing: &quot;border-box&quot;,\\n        display: &quot;inline&quot;,\\n        padding: 0,\\n        fontFamily: &quot;&#39;Fira Sans&#39;, sans-serif&quot;,\\n        maxWidth: &quot;50%&quot;,\\n        height: &quot;auto&quot;\\n      },\\n      title: {\\n        textAnchor: &quot;start&quot;,\\n        verticalAnchor: &quot;end&quot;,\\n        fill: &quot;#000000&quot;,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: &quot;18px&quot;,\\n        fontWeight: &quot;bold&quot;\\n      },\\n      labelNumber: {\\n        textAnchor: &quot;middle&quot;,\\n        fill: &quot;#ffffff&quot;,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: &quot;14px&quot;\\n      },\\n\\n      // INDEPENDENT AXIS\\n      axisYears: {\\n        axis: { stroke: &quot;black&quot;, strokeWidth: 1},\\n        ticks: {\\n          size: (tick) =&gt; {\\n            const tickSize =\\n              tick.getFullYear() % 5 === 0 ? 10 : 5;\\n            return tickSize;\\n          },\\n          stroke: &quot;black&quot;,\\n          strokeWidth: 1\\n        },\\n        tickLabels: {\\n          fill: &quot;black&quot;,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n\\n      // DATA SET ONE\\n      axisOne: {\\n        grid: {\\n          stroke: (tick) =&gt;\\n            tick === -10 ? &quot;transparent&quot; : &quot;#ffffff&quot;,\\n          strokeWidth: 2\\n        },\\n        axis: { stroke: BLUE_COLOR, strokeWidth: 0 },\\n        ticks: { strokeWidth: 0 },\\n        tickLabels: {\\n          fill: BLUE_COLOR,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n      labelOne: {\\n        fill: BLUE_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: 12,\\n        fontStyle: &quot;italic&quot;\\n      },\\n      lineOne: {\\n        data: { stroke: BLUE_COLOR, strokeWidth: 4.5 }\\n      },\\n      axisOneCustomLabel: {\\n        fill: BLUE_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontWeight: 300,\\n        fontSize: 21\\n      },\\n\\n      // DATA SET TWO\\n      axisTwo: {\\n        axis: { stroke: RED_COLOR, strokeWidth: 0 },\\n        tickLabels: {\\n          fill: RED_COLOR,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n      labelTwo: {\\n        textAnchor: &quot;end&quot;,\\n        fill: RED_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: 12,\\n        fontStyle: &quot;italic&quot;\\n      },\\n      lineTwo: {\\n        data: { stroke: RED_COLOR, strokeWidth: 4.5 }\\n      },\\n\\n      // HORIZONTAL LINE\\n      lineThree: {\\n        data: { stroke: &quot;#e95f46&quot;, strokeWidth: 2 }\\n      }\\n    };\\n  }\\n}\\n\\nReactDOM.render(&lt;CustomTheme/&gt;, mountNode)</code></pre>\",\"frontmatter\":{\"id\":3,\"scope\":[\"range\",\"random\"],\"title\":\"Custom Charts\"},\"fields\":{\"slug\":\"/guides/custom-charts/\"}}},\"pathContext\":{\"slug\":\"/guides/custom-charts/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guides-custom-charts-0f85a5db1497db0658ec.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"custom-charts\\\"><a href=\\\"#custom-charts\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Custom Charts</h1>\\n<p>Victory lets you create fully custom charts that integrate seamlessly with the look and feel of your project. The following guide demonstrates how custom styles and modular chart components are used to create a cohesive chart with distinctive branding.</p>\\n<p>The following example shows how to create a chart with multiple independent axes without using the <code class=\\\"language-text\\\">VictoryChart</code> wrapper. This example also includes functional styles and axis customization.</p>\\n<hr>\\n<pre class=\\\"pre\\\"><code class=\\\"language-playground_norender\\\">class CustomTheme extends React.Component {\\n  render() {\\n    const styles = this.getStyles();\\n    const dataSetOne = this.getDataSetOne();\\n    const dataSetTwo = this.getDataSetTwo();\\n    const tickValues = this.getTickValues();\\n\\n    return (\\n      &lt;div&gt;\\n        &lt;svg style={styles.parent} viewBox=&quot;0 0 450 350&quot;&gt;\\n\\n          {/* Create stylistic elements */}\\n          &lt;rect x=&quot;0&quot; y=&quot;0&quot; width=&quot;10&quot; height=&quot;30&quot; fill=&quot;#f01616&quot;/&gt;\\n          &lt;rect x=&quot;420&quot; y=&quot;10&quot; width=&quot;20&quot; height=&quot;20&quot; fill=&quot;#458ca8&quot;/&gt;\\n\\n          {/* Define labels */}\\n          &lt;VictoryLabel x={25} y={24} style={styles.title}\\n            text=&quot;An outlook&quot;\\n          /&gt;\\n          &lt;VictoryLabel x={430} y={20} style={styles.labelNumber}\\n            text=&quot;1&quot;\\n          /&gt;\\n          &lt;VictoryLabel x={25} y={55} style={styles.labelOne}\\n            text={&quot;Economy \\\\n % change on a year earlier&quot;}\\n          /&gt;\\n          &lt;VictoryLabel x={425} y={55} style={styles.labelTwo}\\n            text={&quot;Dinosaur exports\\\\n $bn&quot;}\\n          /&gt;\\n\\n          &lt;g transform={&quot;translate(0, 40)&quot;}&gt;\\n            {/* Add shared independent axis */}\\n            &lt;VictoryAxis\\n              scale=&quot;time&quot;\\n              standalone={false}\\n              style={styles.axisYears}\\n              tickValues={tickValues}\\n              tickFormat={\\n                (x) =&gt; {\\n                  if (x.getFullYear() === 2000) {\\n                    return x.getFullYear();\\n                  }\\n                  if (x.getFullYear() % 5 === 0) {\\n                    return x.getFullYear().toString().slice(2);\\n                  }\\n                }\\n              }\\n            /&gt;\\n\\n            {/*\\n              Add the dependent axis for the first data set.\\n              Note that all components plotted against this axis will have the same y domain\\n            */}\\n            &lt;VictoryAxis dependentAxis\\n              domain={[-10, 15]}\\n              offsetX={50}\\n              orientation=&quot;left&quot;\\n              standalone={false}\\n              style={styles.axisOne}\\n            /&gt;\\n\\n            {/* Red annotation line */}\\n            &lt;VictoryLine\\n              data={[\\n                {x: new Date(1999, 1, 1), y: 0},\\n                {x: new Date(2014, 6, 1), y: 0}\\n              ]}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [-10, 15]\\n              }}\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineThree}\\n            /&gt;\\n\\n            {/* dataset one */}\\n            &lt;VictoryLine\\n              data={dataSetOne}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [-10, 15]\\n              }}\\n              interpolation=&quot;monotoneX&quot;\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineOne}\\n            /&gt;\\n\\n            {/*\\n              Add the dependent axis for the second data set.\\n              Note that all components plotted against this axis will have the same y domain\\n            */}\\n            &lt;VictoryAxis dependentAxis\\n              domain={[0, 50]}\\n              orientation=&quot;right&quot;\\n              standalone={false}\\n              style={styles.axisTwo}\\n            /&gt;\\n\\n            {/* dataset two */}\\n            &lt;VictoryLine\\n              data={dataSetTwo}\\n              domain={{\\n                x: [new Date(1999, 1, 1), new Date(2016, 1, 1)],\\n                y: [0, 50]\\n              }}\\n              interpolation=&quot;monotoneX&quot;\\n              scale={{x: &quot;time&quot;, y: &quot;linear&quot;}}\\n              standalone={false}\\n              style={styles.lineTwo}\\n            /&gt;\\n          &lt;/g&gt;\\n        &lt;/svg&gt;\\n      &lt;/div&gt;\\n    );\\n  }\\n\\n  getDataSetOne() {\\n    return [\\n      {x: new Date(2000, 1, 1), y: 12},\\n      {x: new Date(2000, 6, 1), y: 10},\\n      {x: new Date(2000, 12, 1), y: 11},\\n      {x: new Date(2001, 1, 1), y: 5},\\n      {x: new Date(2002, 1, 1), y: 4},\\n      {x: new Date(2003, 1, 1), y: 6},\\n      {x: new Date(2004, 1, 1), y: 5},\\n      {x: new Date(2005, 1, 1), y: 7},\\n      {x: new Date(2006, 1, 1), y: 8},\\n      {x: new Date(2007, 1, 1), y: 9},\\n      {x: new Date(2008, 1, 1), y: -8.5},\\n      {x: new Date(2009, 1, 1), y: -9},\\n      {x: new Date(2010, 1, 1), y: 5},\\n      {x: new Date(2013, 1, 1), y: 1},\\n      {x: new Date(2014, 1, 1), y: 2},\\n      {x: new Date(2015, 1, 1), y: -5}\\n    ];\\n  }\\n\\n  getDataSetTwo() {\\n    return [\\n      {x: new Date(2000, 1, 1), y: 5},\\n      {x: new Date(2003, 1, 1), y: 6},\\n      {x: new Date(2004, 1, 1), y: 4},\\n      {x: new Date(2005, 1, 1), y: 10},\\n      {x: new Date(2006, 1, 1), y: 12},\\n      {x: new Date(2007, 2, 1), y: 48},\\n      {x: new Date(2008, 1, 1), y: 19},\\n      {x: new Date(2009, 1, 1), y: 31},\\n      {x: new Date(2011, 1, 1), y: 49},\\n      {x: new Date(2014, 1, 1), y: 40},\\n      {x: new Date(2015, 1, 1), y: 21}\\n    ];\\n  }\\n\\n  getTickValues() {\\n    return [\\n      new Date(1999, 1, 1),\\n      new Date(2000, 1, 1),\\n      new Date(2001, 1, 1),\\n      new Date(2002, 1, 1),\\n      new Date(2003, 1, 1),\\n      new Date(2004, 1, 1),\\n      new Date(2005, 1, 1),\\n      new Date(2006, 1, 1),\\n      new Date(2007, 1, 1),\\n      new Date(2008, 1, 1),\\n      new Date(2009, 1, 1),\\n      new Date(2010, 1, 1),\\n      new Date(2011, 1, 1),\\n      new Date(2012, 1, 1),\\n      new Date(2013, 1, 1),\\n      new Date(2014, 1, 1),\\n      new Date(2015, 1, 1),\\n      new Date(2016, 1, 1)\\n    ];\\n  }\\n\\n  getStyles() {\\n    const BLUE_COLOR = &quot;#00a3de&quot;;\\n    const RED_COLOR = &quot;#7c270b&quot;;\\n\\n    return {\\n      parent: {\\n        background: &quot;#ccdee8&quot;,\\n        boxSizing: &quot;border-box&quot;,\\n        display: &quot;inline&quot;,\\n        padding: 0,\\n        fontFamily: &quot;&#39;Fira Sans&#39;, sans-serif&quot;,\\n        maxWidth: &quot;50%&quot;,\\n        height: &quot;auto&quot;\\n      },\\n      title: {\\n        textAnchor: &quot;start&quot;,\\n        verticalAnchor: &quot;end&quot;,\\n        fill: &quot;#000000&quot;,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: &quot;18px&quot;,\\n        fontWeight: &quot;bold&quot;\\n      },\\n      labelNumber: {\\n        textAnchor: &quot;middle&quot;,\\n        fill: &quot;#ffffff&quot;,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: &quot;14px&quot;\\n      },\\n\\n      // INDEPENDENT AXIS\\n      axisYears: {\\n        axis: { stroke: &quot;black&quot;, strokeWidth: 1},\\n        ticks: {\\n          size: (tick) =&gt; {\\n            const tickSize =\\n              tick.getFullYear() % 5 === 0 ? 10 : 5;\\n            return tickSize;\\n          },\\n          stroke: &quot;black&quot;,\\n          strokeWidth: 1\\n        },\\n        tickLabels: {\\n          fill: &quot;black&quot;,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n\\n      // DATA SET ONE\\n      axisOne: {\\n        grid: {\\n          stroke: (tick) =&gt;\\n            tick === -10 ? &quot;transparent&quot; : &quot;#ffffff&quot;,\\n          strokeWidth: 2\\n        },\\n        axis: { stroke: BLUE_COLOR, strokeWidth: 0 },\\n        ticks: { strokeWidth: 0 },\\n        tickLabels: {\\n          fill: BLUE_COLOR,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n      labelOne: {\\n        fill: BLUE_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: 12,\\n        fontStyle: &quot;italic&quot;\\n      },\\n      lineOne: {\\n        data: { stroke: BLUE_COLOR, strokeWidth: 4.5 }\\n      },\\n      axisOneCustomLabel: {\\n        fill: BLUE_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontWeight: 300,\\n        fontSize: 21\\n      },\\n\\n      // DATA SET TWO\\n      axisTwo: {\\n        axis: { stroke: RED_COLOR, strokeWidth: 0 },\\n        tickLabels: {\\n          fill: RED_COLOR,\\n          fontFamily: &quot;inherit&quot;,\\n          fontSize: 16\\n        }\\n      },\\n      labelTwo: {\\n        textAnchor: &quot;end&quot;,\\n        fill: RED_COLOR,\\n        fontFamily: &quot;inherit&quot;,\\n        fontSize: 12,\\n        fontStyle: &quot;italic&quot;\\n      },\\n      lineTwo: {\\n        data: { stroke: RED_COLOR, strokeWidth: 4.5 }\\n      },\\n\\n      // HORIZONTAL LINE\\n      lineThree: {\\n        data: { stroke: &quot;#e95f46&quot;, strokeWidth: 2 }\\n      }\\n    };\\n  }\\n}\\n\\nReactDOM.render(&lt;CustomTheme/&gt;, mountNode)</code></pre>\",\"frontmatter\":{\"id\":3,\"scope\":[\"range\",\"random\"],\"title\":\"Custom Charts\"},\"fields\":{\"slug\":\"/guides/custom-charts/\"}}},\"pathContext\":{\"slug\":\"/guides/custom-charts/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guides-custom-charts.json\n// module id = 882\n// module chunks = 110787567556812"],"sourceRoot":""}