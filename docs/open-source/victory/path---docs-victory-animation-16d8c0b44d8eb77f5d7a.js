webpackJsonp([0xfff9425ff64a],{825:function(a,n){a.exports={data:{markdownRemark:{html:'<h1 id="victoryanimation"><a href="#victoryanimation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>VictoryAnimation</h1>\n<p><code class="language-text">VictoryAnimation</code> animates prop changes for any React component. To animate prop changes, define a child function that accepts an object of tweened values and other animation information and returns a component to render.</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VictoryAnimation</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">animationProps</span><span class="token punctuation">}</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myComponentProps<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span>tweenedProps<span class="token punctuation">,</span> animationInfo<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>animationInfo<span class="token punctuation">.</span>animating <span class="token operator">&amp;&amp;</span> animationInfo<span class="token punctuation">.</span>progress <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">tweenedProps</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VictoryAnimation</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<h2 id="props"><a href="#props" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Props</h2>\n<h3 id="children"><a href="#children" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>children</h3>\n<p><code class="language-text">type: function</code></p>\n<p><code class="language-text">VictoryAnimation</code> takes a single child, which should be given as a function of a tweened props object and an animation information object. The child function should return a component to render.</p>\n<h3 id="data"><a href="#data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>data</h3>\n<p><code class="language-text">type: object || array</code></p>\n<p>The <code class="language-text">data</code> prop specifies a set of values to tween between. When this prop changes, <code class="language-text">VictoryAnimation</code> will begin animating between the current and next values. This prop should be given as an array or an object. <code class="language-text">VictoryAnimation</code> uses <a href="https://github.com/d3/d3-interpolate">d3-interpolate</a> to tween between values, with some <a href="https://github.com/FormidableLabs/victory/blob/master/packages/victory-core/src/victory-animation/util.js">slight modifications</a>.</p>\n<p><em>examples:</em> <code class="language-text">data={this.props}</code></p>\n<h3 id="duration"><a href="#duration" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>duration</h3>\n<p><code class="language-text">type: number</code></p>\n<p>The <code class="language-text">duration</code> prop determines the number of milliseconds the animation should take to complete. This prop should be given as a number.</p>\n<p><em>default:</em> <code class="language-text">duration={1000}</code></p>\n<h3 id="delay"><a href="#delay" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>delay</h3>\n<p><code class="language-text">type: number</code></p>\n<p>The <code class="language-text">delay</code> prop specifies a delay in milliseconds before the start of an animation, or between each animation in the queue. This prop should be given as a number.</p>\n<p><em>default:</em> <code class="language-text">delay={0}</code></p>\n<h3 id="easing"><a href="#easing" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>easing</h3>\n<p><code class="language-text">type: options</code></p>\n<p>The <code class="language-text">easing</code> prop specifies the type of easing to use for an animation. The supported types of easing are: <em>“back”, “backIn”, “backOut”, “backInOut”, “bounce”, “bounceIn”, “bounceOut”, “bounceInOut”, “circle”, “circleIn”, “circleOut”, “circleInOut”, “linear”, “linearIn”, “linearOut”, “linearInOut”, “cubic”, “cubicIn”, “cubicOut”, “cubicInOut”, “elastic”, “elasticIn”, “elasticOut”, “elasticInOut”, “exp”, “expIn”, “expOut”, “expInOut”, “poly”, “polyIn”, “polyOut”, “polyInOut”, “quad”, “quadIn”, “quadOut”, “quadInOut”, “sin”, “sinIn”, “sinOut”, “sinInOut”</em>.</p>\n<p><em>default:</em> <code class="language-text">easing=&quot;quadInOut&quot;</code></p>\n<h3 id="onend"><a href="#onend" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>onEnd</h3>\n<p><code class="language-text">type: function</code></p>\n<p>The <code class="language-text">onEnd</code> prop specifies a function that will be called when the animation ends. If there are multiple animations in the queue, the <code class="language-text">onEnd</code> function will be called after the last animation in the queue completes.</p>',frontmatter:{id:3,scope:null,title:"VictoryAnimation"},fields:{slug:"/docs/victory-animation/"}}},pathContext:{slug:"/docs/victory-animation/"}}}});
//# sourceMappingURL=path---docs-victory-animation-16d8c0b44d8eb77f5d7a.js.map