webpackJsonp([0xf07f7cf1fc28],{881:function(n,t){n.exports={data:{markdownRemark:{html:'<h1 id="brush-and-zoom"><a href="#brush-and-zoom" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Brush and Zoom</h1>\n<p>Use <code class="language-text">VictoryZoomContainer</code> as your containerComponent to add panning and zooming behavior to any Victory components that work with an x-y coordinate system.</p>\n<p>In the example below, an initial domain is set with the <code class="language-text">zoomDomain</code> prop. This prop may also be used to trigger pan and zoom behavior from other components.</p>\n<pre class="pre"><code class="language-playground_norender">class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    data: this.getScatterData()\n  }\n\n  getScatterData() {\n    return range(50).map((index) =&gt; {\n      return {\n        x: random(1, 50),\n        y: random(10, 90),\n        size: random(8) + 3\n      };\n    });\n  }\n\n  render() {\n    return (\n      &lt;VictoryChart\n        domain={{y: [0, 100]}}\n        containerComponent={&lt;VictoryZoomContainer zoomDomain={{x: [5, 35], y: [0, 100]}}/&gt;}\n      &gt;\n        &lt;VictoryScatter\n          data={this.state.data}\n          style={{\n            data: {\n              opacity: (d) =&gt;  d.y % 5 === 0 ? 1 : 0.7,\n              fill: (d) =&gt; d.y % 5 === 0 ? &quot;tomato&quot; : &quot;black&quot;\n            }\n          }}\n        /&gt;\n      &lt;/VictoryChart&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\n<p>In the next example, <code class="language-text">VictoryZoomContainer</code> and <code class="language-text">VictoryBrushContainer</code> are used to create a zoomable chart with a mini-map brush control.\nHere, the <code class="language-text">onZoomDomainChange</code> prop on <code class="language-text">VictoryZoomContainer</code> alters the <code class="language-text">brushDomain</code> prop on <code class="language-text">VictoryBrushContainer</code> tying highlighted brush region of the mini-map to the zoom level of the chart.\nThe <code class="language-text">onBrushDomainChange</code> prop on <code class="language-text">VictoryBrushContainer</code> alters the <code class="language-text">zoomDomain</code> prop on <code class="language-text">VictoryZoomContainer</code> so that the zoomed level of the chart matches the highlighted region of the mini-map.</p>\n<pre class="pre"><code class="language-playground_norender">class App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  handleZoom(domain) {\n    this.setState({selectedDomain: domain});\n  }\n\n  handleBrush(domain) {\n    this.setState({zoomDomain: domain});\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n          &lt;VictoryChart width={600} height={350} scale={{x: &quot;time&quot;}}\n            containerComponent={\n              &lt;VictoryZoomContainer responsive={false}\n                zoomDimension=&quot;x&quot;\n                zoomDomain={this.state.zoomDomain}\n                onZoomDomainChange={this.handleZoom.bind(this)}\n              /&gt;\n            }\n          &gt;\n            &lt;VictoryLine\n              style={{\n                data: {stroke: &quot;tomato&quot;}\n              }}\n              data={[\n                {x: new Date(1982, 1, 1), y: 125},\n                {x: new Date(1987, 1, 1), y: 257},\n                {x: new Date(1993, 1, 1), y: 345},\n                {x: new Date(1997, 1, 1), y: 515},\n                {x: new Date(2001, 1, 1), y: 132},\n                {x: new Date(2005, 1, 1), y: 305},\n                {x: new Date(2011, 1, 1), y: 270},\n                {x: new Date(2015, 1, 1), y: 470}\n              ]}\n            /&gt;\n\n          &lt;/VictoryChart&gt;\n\n          &lt;VictoryChart\n            padding={{top: 0, left: 50, right: 50, bottom: 30}}\n            width={600} height={90} scale={{x: &quot;time&quot;}}\n            containerComponent={\n              &lt;VictoryBrushContainer responsive={false}\n                brushDimension=&quot;x&quot;\n                brushDomain={this.state.selectedDomain}\n                onBrushDomainChange={this.handleBrush.bind(this)}\n              /&gt;\n            }\n          &gt;\n            &lt;VictoryAxis\n              tickValues={[\n                new Date(1985, 1, 1),\n                new Date(1990, 1, 1),\n                new Date(1995, 1, 1),\n                new Date(2000, 1, 1),\n                new Date(2005, 1, 1),\n                new Date(2010, 1, 1)\n              ]}\n              tickFormat={(x) =&gt; new Date(x).getFullYear()}\n            /&gt;\n            &lt;VictoryLine\n              style={{\n                data: {stroke: &quot;tomato&quot;}\n              }}\n              data={[\n                {x: new Date(1982, 1, 1), y: 125},\n                {x: new Date(1987, 1, 1), y: 257},\n                {x: new Date(1993, 1, 1), y: 345},\n                {x: new Date(1997, 1, 1), y: 515},\n                {x: new Date(2001, 1, 1), y: 132},\n                {x: new Date(2005, 1, 1), y: 305},\n                {x: new Date(2011, 1, 1), y: 270},\n                {x: new Date(2015, 1, 1), y: 470}\n              ]}\n            /&gt;\n          &lt;/VictoryChart&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nReactDOM.render(&lt;App/&gt;, mountNode)</code></pre>\n<p><code class="language-text">VictoryBrushContainer</code> may be used with any Victory component that works on an x-y coordinate system.\nBrushing behavior may be limited to the x or y dimensions with the <code class="language-text">brushDimension</code> prop, and the selected\narea may be styled, or even replaced with a custom component.</p>\n<pre class="pre"><code class="language-playground">&lt;VictoryLine\n  containerComponent={\n    &lt;VictoryBrushContainer\n      brushDomain={{x: [1, 7], y: [-3, 3]}}\n      brushDimension=&quot;y&quot;\n      brushStyle={{fill: &quot;teal&quot;, opacity: 0.2}}\n    /&gt;\n  }\n  style={{\n    data: {stroke: &quot;teal&quot;}\n  }}\n  data={[\n    {x: 1, y: -3},\n    {x: 2, y: 5},\n    {x: 3, y: -3},\n    {x: 4, y: 0},\n    {x: 5, y: -5},\n    {x: 6, y: 2},\n    {x: 7, y: 0}\n  ]}\n/&gt;</code></pre>',frontmatter:{id:2,scope:["range","random"],title:"Brush and Zoom"},fields:{slug:"/guides/brush-and-zoom/"}}},pathContext:{slug:"/guides/brush-and-zoom/"}}}});
//# sourceMappingURL=path---guides-brush-and-zoom-4645383dee13b3c82bc2.js.map