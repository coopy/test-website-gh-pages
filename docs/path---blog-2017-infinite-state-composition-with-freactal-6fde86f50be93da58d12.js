webpackJsonp([62798225663736],{744:function(n,a){n.exports={data:{markdownRemark:{html:'<p>In the beginning, there was <a href="https://facebook.github.io/react/">React</a>. You used <code class="language-text">createClass</code> to define an OOP-style UI component with associated reactive state, and custom mixins managed cross-cutting concerns. It was good.</p>\n<p>Then came <a href="https://github.com/lukehoban/es6features#classes">ES6 classes</a>. You used standard language features and semantics to define a component instead of using a custom userspace one. With no mixin feature in ES6 classes, mixins <a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">fell to the wayside.</a> It was good.</p>\n<p>Then came stateless functional components. You defined a component as a pure function of props, and for a large number of components, you could explicitly ignore state. It was good.</p>\n<p>Then came the rediscovery of <a href="https://medium.freecodecamp.com/functional-setstate-is-the-future-of-react-374f30401b6b">“functional <code class="language-text">setState</code>.”</a> Now, you could treat state changes in your stateful components as pure functions of props and state. It, too, was good.</p>\n<p>Notice the progression? New React releases and patterns chip away at OOP features and add functional ones. Mixins, an unambiguously object-oriented feature, died with ES6 classes. For stateless components, pure functions replaced classes. For “container” components, <code class="language-text">setState</code> functions deemphasized the stateful features of classes.</p>\n<p>React didn’t move in this direction in a vacuum: the JS ecosystem, now embracing functional programming, demanded and informed these changes. Even now, the shift from OOP to functional programming continues to drive the feedback loop between React and the JS community.</p>\n<p>Of course, the conversation isn’t always in lockstep. Constricted by the limitations (perceived or otherwise) of <code class="language-text">setState</code> and yearning for powerful dev tooling, open sorcerers unleashed a Cambrian explosion of state management libraries, the most popular being <a href="http://redux.js.org/">Redux</a> and <a href="https://mobx.js.org/index.html">MobX</a>. While agnostic to choice of view library, both Redux and MobX provide React bindings and show up in the typical React “stack”.</p>\n<p>Current state containers don’t have a concept of “components.” Redux prescribes a global state tree that isn’t in relation to any specific element of a UI. MobX provides primitives that don’t care about where they live.</p>\n<p>Are React apps as powerful when state and components live in different trees? As much as we love our new FP overlords, did we lose something valuable in our sprint away from OOP? Do new approaches to state violate the core contract of React?</p>\n<h2 id="interface-vs-implementation"><a href="#interface-vs-implementation" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Interface vs. Implementation</h2>\n<p>What <em>is</em> the core contract of React? It’s certainly not SFCs, HOCs, <code class="language-text">extends Component</code>, or <code class="language-text">createClass</code>. It’s not lifecycle methods, and it’s not elements, instances, classes, or JSX.</p>\n<p>The fundamental contract of React is the <em>component</em>. The only axioms of a component are:</p>\n<ul>\n<li>A component manages and contains its own state.</li>\n<li>A component is composed of, or composes, other components in an infinitely extendable tree.</li>\n<li>The concrete realization of a component is a pure derivation of props and state.</li>\n</ul>\n<p>What do these axioms enable?</p>\n<ul>\n<li>Model and view are colocated. Since they are both of a given component’s <em>concern,</em> they demand high locality (i.e. they’re not five directories away).</li>\n<li>The APIs for parents and children are <em>identical</em>. This minimizes API surface area and removes the need for special “orchestrators.”</li>\n<li>Rendering is <em>predictable</em> and <em>unidirectional</em>. Nothing from the depths of the component tree will mutate the result. It’s <code class="language-text">props</code> and <code class="language-text">state</code> all the way down.</li>\n</ul>\n<p>Components are the real promise of React. Reactive state isn’t new. Neither is colocation of model and view. It’s the combination of both, married to an infinitely recursive and composable API, that allows a React component to  “shrink the universe” and consider a single <em>application concern</em> at a time.</p>\n<h2 id="breach-of-contract"><a href="#breach-of-contract" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Breach of Contract</h2>\n<p>How well do new approaches to state fit into the component model?</p>\n<p>Let’s pick on Redux for a minute, only because it’s one of the more prescriptive state containers. Redux breaks two axioms of the component contract:</p>\n<ul>\n<li>\n<p>A component manages and contains its own state.</p>\n<ul>\n<li>While you can inject slices of the state tree into a component using\n<code class="language-text">react-redux</code>, that state is still a property of the state tree, not the component. You lose the scannable, explicit dependency of a hierarchical parent-child relationship, not to mention that any component a mile away can create an implicit dependency on a global state slice.</li>\n</ul>\n</li>\n<li>\n<p>A component is composed of, or composes, other components in an infinitely extendable tree.</p>\n<ul>\n<li>The Redux API is not <em>self-similar</em>. This means that the top-level “orchestrator” API (<code class="language-text">createStore</code>, middleware, enhancers, etc) does not resemble the API of its children (components). Therefore, stores cannot compose each other. Self-similarity is required for infinitely recursive, hierarchical, “fractal” architecture.</li>\n</ul>\n</li>\n</ul>\n<h2 id="the-hunt-for-red-ooptober"><a href="#the-hunt-for-red-ooptober" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>The Hunt for Red OOPtober</h2>\n<p>The dawn of Redux coincided with the community’s thirst for purely functional approaches to state. While quenching this thirst, we chugged a little too fast. We lost a key property of the component model, assuming it to be an OOP relic: encapsulation.</p>\n<p>Just as the promise of React isn’t its implementation, encapsulation isn’t access control modifiers, class properties, or grouped bags of mutable state and methods. Encapsulation is containing and restricting access to data. Without encapsulation, components have no boundaries. Their universe becomes as infinite as our own.</p>\n<p>Functional programming has encapsulation, and its implementation contains superpowers not available to OOP: <em>composition</em>. Not only does composition guarantee a defined boundary of data (e.g. arguments of a function or bindings in scope), it also unlocks self-similarity and hierarchy. React components couldn’t be fractal if each component defined its own bespoke API, hence the self-similar signature of <code class="language-text">props</code> and <code class="language-text">state</code>.</p>\n<p>Given that functional encapsulation exists, why don’t we find it in Redux? We can compose reducers, but this composition only encapsulates the transformation of the tree, not the tree itself. We can’t compose stores, since the “orchestrator” API isn’t fractal. We can’t compose middleware, since middleware is order-dependent. We can compose enhancers, but only if they all behave.</p>\n<p>Can we marry a functional approach to state, derivations, and effects to the component model of React? Can we obviate a slew of extensions (<code class="language-text">reselect</code>, <code class="language-text">redux-loop</code>, <code class="language-text">redux-thunk</code>, <code class="language-text">redux-saga</code>) in the process?</p>\n<p>Our engineer <a href="https://github.com/divmain/">Dale Bustad</a> did just that, and even brought fun back to state management, with <a href="https://github.com/FormidableLabs/freactal/">Freactal.</a></p>\n<h2 id="introducing-freactal"><a href="#introducing-freactal" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Introducing Fr(e)actal</h2>\n<p><a href="https://github.com/FormidableLabs/freactal/">Freactal</a> is a functional one-stop-shop for state, derivation, and effect management in React. It acknowledges the power of the Redux ecosystem while remaining true to the promise of React.</p>\n<p>In Freactal, a state container is <em>just a component.</em> You’re free to compose at any level of the component hierarchy with any granularity of state.</p>\n<p>Freactal handles state encapsulation, state injection into component children, effects, and computed values.</p>\n<h2 id="encapsulating-state-with-code-classlanguage-textprovidestatecode"><a href="#encapsulating-state-with-code-classlanguage-textprovidestatecode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Encapsulating state with <code class="language-text">provideState</code></h2>\n<p>Components are the only state container in Freactal, replacing the global state atom of Redux. The <code class="language-text">provideState</code> higher-order component defines a “schema” for your component’s state, as well as its initial state on mount.</p>\n<p>Here’s an example of <code class="language-text">provideState</code> creating a stateful component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> provideState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"freactal"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Creates a higher-order component that provides a state</span>\n<span class="token comment">// schema and initial state to a wrapped component</span>\n<span class="token keyword">const</span> wrapComponentWithState <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token function">wrapComponentWithState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token punctuation">{</span> <span class="token template-string"><span class="token string">`Our counter is at: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>counter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Note that <code class="language-text">provideState</code> only sets up the state schema and initial state–it does not provide access to any subsequent state changes. This allows <code class="language-text">provideState</code> to define reusable “state templates” to apply to multiple independent components.</p>\n<p>To access the live state values, wrap a component with <code class="language-text">injectState</code>. <code class="language-text">injectState</code> adds superpowers to child components of <code class="language-text">provideState</code>-wrapped components: the wrapped component will only re-render for pieces of state the component uses, rather than for each state change.</p>\n<p>If we update our previous example with <code class="language-text">injectState</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> provideState<span class="token punctuation">,</span> injectState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"freactal"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> wrapComponentWithState <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">:</span> <span class="token string">"Bob"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token function">wrapComponentWithState</span><span class="token punctuation">(</span><span class="token function">injectState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    <span class="token punctuation">{</span> <span class="token template-string"><span class="token string">`Our counter is at: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token punctuation">.</span>counter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>…that means that <code class="language-text">Parent</code> will only re-render when <code class="language-text">state.counter</code> changes.</p>\n<p><code class="language-text">provideState</code> shines when used in a component hierarchy. Child components using <code class="language-text">injectState</code> can access state provided by parents, grandparents, and so on, all the way up the tree. The only rule: if two ancestors contain conflicting state keys, the nearest ancestor’s key/value takes precedence.</p>\n<p>Watch as a child component accesses state from a parent and a grandparent:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">injectState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    This is the GrandChild<span class="token punctuation">.</span>\n    <span class="token punctuation">{</span>state<span class="token punctuation">.</span>fromParent<span class="token punctuation">}</span>\n    <span class="token punctuation">{</span>state<span class="token punctuation">.</span>fromGrandParent<span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Parent <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> fromParent<span class="token punctuation">:</span> <span class="token string">"ParentValue"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    This is the Child<span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>GrandChild <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> GrandParent <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> fromGrandParent<span class="token punctuation">:</span> <span class="token string">"GrandParentValue"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">></span>\n    This is the Parent<span class="token punctuation">.</span>\n    <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="effective-immediately"><a href="#effective-immediately" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Effective Immediately</h2>\n<p>Freactal combines side effects and state updates into a single abstraction, simply named “effects.” Effects resemble an action/reducer pair in Redux, but they embrace async as a first principle and allow for composable handling of intermediate state.</p>\n<p><code class="language-text">provideState</code> accepts an <code class="language-text">effects</code> key with a value of named effect definitions. An effect is just a function with the signature:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">(</span>effects<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token operator">&lt;</span>state <span class="token operator">=></span> newState<span class="token operator">></span></code></pre>\n      </div>\n<p>The <code class="language-text">effects</code> argument contains all of the defined effects in this container, as well as the effects defined by its ancestors. <code class="language-text">...args</code> are any arguments you pass when calling the effect (e.g. the 10 in <code class="language-text">effects.fetchPosts(10)</code>). That function returns a Promise that resolves to an updater function, <code class="language-text">state =&gt; newState</code>, which resembles a Redux reducer.</p>\n<p>Don’t memorize that, though! It’s painless in practice, and partial application is the bedrock for the powers of effects.</p>\n<p>Simple state changes are concise, since <code class="language-text">freactal</code> automatically <code class="language-text">Promise.resolve</code>s any synchronous updater functions provided:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  addOne<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Even easier, you can use the <code class="language-text">softUpdate</code> helper to replace the common <code class="language-text">Object.assign</code> pattern:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// { counter: 1 }</span>\n<span class="token punctuation">{</span>\n  increment<span class="token punctuation">:</span> <span class="token function">softUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> increment<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> increment\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\neffects<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token comment">// { counter: 6 }</span></code></pre>\n      </div>\n<p>This makes the bread and butter of state management a breeze.</p>\n<p>Async effects don’t require special treatment, since promises already provide the plumbing. If you define this effect:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fetchPosts<span class="token punctuation">:</span> <span class="token punctuation">(</span>effects<span class="token punctuation">,</span> limit<span class="token punctuation">)</span> <span class="token operator">=></span>\n      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/posts?limit=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=></span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>posts <span class="token operator">=></span> state <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>…you can call it like this in a child component:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">injectState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> effects <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> effects<span class="token punctuation">.</span><span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token punctuation">{</span> state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>post <span class="token operator">=></span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token punctuation">)</span> <span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>Fetch some posts<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>…and your state becomes:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  posts<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      title<span class="token punctuation">:</span> <span class="token string">"Freactal!"</span><span class="token punctuation">,</span>\n      body<span class="token punctuation">:</span> <span class="token string">"Freactalreactalactalctaltalall"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The real fun comes from <em>composing effects together.</em> Since effects just return promises, you compose them in a regular promise chain! You get the benefits of a linear sequence of side effects and intermediate state changes without coupling effects to a specific sequence, like in <code class="language-text">redux-thunk</code> or <code class="language-text">redux-saga</code>. Furthermore, subsequent effects <em>live in the same expression.</em> You can follow an entire trail of consequences within a “sentence” of code, unlike <a href="https://github.com/redux-loop/redux-loop"><code class="language-text">redux-loop</code></a> or <a href="http://elm-lang.org/">Elm</a> where the sequence of effects is obscured by vertical “loops” around the reducer. Finally, the partial application of effects allows <code class="language-text">freactal</code> to assemble and schedule state changes correctly while providing an indication of “completion” (a resolved promise), especially useful for server-side rendering and data fetching.</p>\n<p>Effect composition is great for indicating transient loading states, something notoriously fickle and error-prone in other solutions like <code class="language-text">redux-thunk</code>. Here’s an extended post-fetching example that sets a pending boolean state throughout a request cycle:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapComponentWithState <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    posts<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    postsPending<span class="token punctuation">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    setPostsPending<span class="token punctuation">:</span> <span class="token function">softUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> postsPending<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> postsPending <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    getPosts<span class="token punctuation">:</span> effects <span class="token operator">=></span> effects<span class="token punctuation">.</span><span class="token function">setPostsPending</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/api/posts"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=></span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> effects<span class="token punctuation">.</span><span class="token function">setPostsPending</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> posts<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>posts <span class="token operator">=></span> state <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2 id="does-not-compute"><a href="#does-not-compute" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Does <del>Not</del> Compute</h2>\n<p>Freactal obviates the need for the existing ecosystem of async/effects solutions popular with Redux. So what else can it consolidate?</p>\n<p>A common goal in immutable unidirectional architectures is to derive all data from the minimum amount of state possible without unnecessary recalculation. The solution usually manifests itself as “computed” values: memoized derivations that automatically recalculate (or don’t) on state changes. Redux users typically turn to <a href="https://github.com/reactjs/reselect"><code class="language-text">reselect</code></a> for this exact purpose. MobX treats computed values as its core primitive.</p>\n<p>Freactal provides an API for computed values, with the added benefit of colocating them next to the state they derive from. Just as in <code class="language-text">reselect</code> and MobX, any derivation can depend on a previous derivation and work transparently.</p>\n<p>Computed properties are just functions that are provided state and that return a derivation:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> wrapComponentWithState <span class="token operator">=</span> <span class="token function">provideState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  initialState<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    givenName<span class="token punctuation">:</span> <span class="token string">"Walter"</span><span class="token punctuation">,</span>\n    familyName<span class="token punctuation">:</span> <span class="token string">"Harriman"</span><span class="token punctuation">,</span>\n    locale<span class="token punctuation">:</span> <span class="token string">"en-us"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    setGivenName<span class="token punctuation">:</span> <span class="token function">softUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> givenName<span class="token punctuation">:</span> val <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    setFamilyName<span class="token punctuation">:</span> <span class="token function">softUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> familyName<span class="token punctuation">:</span> val <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    fullName<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">,</span> locale <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">startsWith</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">)</span> <span class="token operator">?</span>\n      <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>givenName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>familyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span>\n      <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>familyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>givenName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>\n    greeting<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> fullName<span class="token punctuation">,</span> locale <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">startsWith</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">)</span> <span class="token operator">?</span>\n      <span class="token template-string"><span class="token string">`Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and welcome!`</span></span> <span class="token punctuation">:</span>\n      <span class="token template-string"><span class="token string">`Helló </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, és szívesen!`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><code class="language-text">fullName</code> and <code class="language-text">greeting</code> will now both be accessible to child components as if they were properties on <code class="language-text">state</code>.</p>\n<p>Like other derivation libraries, Freactal’s computed values are memoized and invalidated when its dependent state changes. Freactal adds <em>laziness</em> to the picture: if a computed value <code class="language-text">greeting</code> is never accessed, it is never computed!</p>\n<h2 id="to-infinity-and-beyond"><a href="#to-infinity-and-beyond" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>To Infinity and Beyond</h2>\n<p>Freactal’s fractal architecture, combined with its consolidated toolbelt for managing state, renews the component contract and embraces the true promise of React.</p>\n<p>Freactal is still under development, and we’d appreciate any feedback! Feel free to open a PR or ping us on <a href="https://twitter.com/FormidableLabs">Twitter</a> with questions and ideas. A fancy set of devtools and logging middleware are on their way, alongside documentation additions.</p>\n<p>This is just a glimpse of Freactal. Dale’s written a wonderful <a href="https://github.com/FormidableLabs/freactal#guide">guide</a> where he deep-dives on the power of effects and explains other concepts like middleware and state update helpers. Oh, and his logo’s pretty slick too.</p>\n<p>Go check out Freactal on <a href="https://github.com/FormidableLabs/freactal">GitHub</a>!</p>',
fields:{slug:"/blog/2017/infinite-state-composition-with-freactal/"},frontmatter:{id:45,authorId:7,categoryIds:[1,4,5],date:"2017-05-03",pageDescription:"Freactal's fractal architecture, combined with its consolidated toolbelt for managing state, renews the component contract and embraces the true promise of React.",pageKeywords:"developer, react, OSS, open source software",pageTitle:"Don't Fear the Fractal: Infinite State Composition with Freactal",path:"/2017/infinite-state-composition-with-freactal/",title:"Don't Fear the Fractal: Infinite State Composition with Freactal"}}},pathContext:{slug:"/blog/2017/infinite-state-composition-with-freactal/",prev:{fields:{slug:"/blog/2017/join-formidable-at-seattlejs-conference/"},frontmatter:{authorId:15,categoryIds:[1,3,4,7],date:"2017-04-26",id:44,title:"Join Formidable at SeattleJS Conference"}}}}}});