webpackJsonp([62822904682922],{747:function(n,s){n.exports={data:{markdownRemark:{html:'<p>At Formidable, we’re always refining our knowledge of modern JavaScript tech.\nThis blog series, entitled “JavaScript Power Tools”, will take a deeper\nlook at some of the tools, frameworks, and libraries we use to deliver reliable\nand maintainable code.</p>\n<p>Today, I want to talk about <a href="https://redux-saga.js.org/"><code class="language-text">redux-saga</code></a>. You’ve probably heard about this\nlibrary while researching patterns for managing asynchronous behavior in Redux\napplications. It’s a powerful concurrency tool with all sorts of use cases\nbeyond just making API calls.</p>\n<p>In this article, we’ll take a look at <code class="language-text">redux-saga</code>’s core mechanism (the “saga”)\nand how it’s implemented. The next article will be a ‘field guide’ to the\nconcurrency patterns it provides, and the final article will demonstrate a\nfew real-world use cases that benefit from this approach.</p>\n<h2 id="what-is-a-saga"><a href="#what-is-a-saga" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>What is a Saga?</h2>\n<p><code class="language-text">redux-saga</code> is named after the ‘Saga pattern’, a server-side architectural\npattern introduced nearly 30 years ago, in which individual business-logic\nprocesses within a large distributed system avoid making multiple simultaneous\nconnections to databases or services. Instead, they send messages to a central\n‘execution coordinator’ which is responsible for dispatching requests on their\nbehalf. When designed in this way, such processes are termed ‘sagas’. We could\nspend a lot of time talking about the justification for this approach, but for\nnow let’s simply observe that they were originally designed as an approach for\nwriting code in highly asynchronous, performance-sensitive environments, and\nthat in this regard, the browser has a lot in common with a distributed system.</p>\n<p>So, with this in mind, we think of <code class="language-text">redux-saga</code> as the piece of our system which\ncoordinates the operation of a bunch of different interleaved “sagas”. These\nsagas take the form of JavaScript generator functions used in a slightly\nunusual fashion. To understand this, let’s take a look at the typical usage of\ngenerators, and work our way back from there.</p>\n<h2 id="from-generators-to-sagas"><a href="#from-generators-to-sagas" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>From Generators to Sagas</h2>\n<p>Here’s a simple generator:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>In this example, <code class="language-text">exampleGenerator</code>’s sole responsibility is to <em>provide</em>\nvalues, while <code class="language-text">run</code>’s responsibility is to perform side-effects that use those\nvalues (In this case, logging them to the console). If we squint a little bit,\nwe can visualize <code class="language-text">run</code> “pulling” values out of <code class="language-text">exampleGenerator</code> via the call\nto <code class="language-text">iter.next()</code>.</p>\n<p>What would happen if we swapped those responsibilities? What if <code class="language-text">exampleGenerator</code> was\nresponsible for doing the work, and <code class="language-text">run</code> was responsible for providing values?</p>\n<p>We can do this by calling <code class="language-text">iter.next()</code> with an argument. That argument becomes\nthe result of the last <code class="language-text">yield</code> statement that paused the generator:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Run the generator until the first `yield` statement</span>\n  iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  iter<span class="token punctuation">.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>It’s a bit weird, no? The generator became the “important” part of our code, but\nwe inverted control of it to the outside world by pushing values for it to use\nthrough the <code class="language-text">next()</code> function call. It’s turned into a sort of adding-and-logging\nengine, which will happily wait around forever for its next value until we stop\nit with <code class="language-text">iter.return()</code>.</p>\n<p>This control-flow mechanism unlocks interesting new patterns- for instance, we\ncan provide a value to the generator based on the last value it yielded to us:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">smileyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">"HAPPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">"SAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">"I HAVE OTHER EMOTIONS TOO, Y\'KNOW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getSmiley</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"HAPPY"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">":)"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"SAD"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">":("</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">"¯\\_(ツ)_/¯"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> smiley<span class="token punctuation">;</span>\n  <span class="token comment">// Run the generator until the first `yield` statement</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    smiley <span class="token operator">=</span> <span class="token function">getSmiley</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>smiley<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">smileyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This should be starting to look suspiciously familiar if you’ve ever heard of\nthe Command pattern. Module A (smileyGenerator) passes a “command object”\n(value) to module B (getSmiley), which fulfills that command on module A’s\nbehalf (returns a smiley).</p>\n<p>By expanding on this theme, we can build a generator which can request both\nactions and data.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> randomNumber <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"GET_RANDOM_NUMBER"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"LOG"</span><span class="token punctuation">,</span> <span class="token string">"Here\'s a random number:"</span><span class="token punctuation">,</span> randomNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs <span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>commandType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"GET_RANDOM_NUMBER"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"LOG"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>commandArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unknown command."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> command<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      commandResult <span class="token operator">=</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      iter<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// An error occurred! Throw it in the generator!</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>commandResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This example decouples <em>behavior</em> (<code class="language-text">exampleGenerator</code>) from <em>implementation</em>\n(<code class="language-text">performCommand</code>) which makes testing behavior rather easy:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> iter <span class="token operator">=</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> commandType<span class="token punctuation">,</span> commandArgs<span class="token punctuation">,</span> commandResult<span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span>commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs<span class="token punctuation">]</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEqual</span><span class="token punctuation">(</span>commandType<span class="token punctuation">,</span> <span class="token string">"GET_RANDOM_NUMBER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEqual</span><span class="token punctuation">(</span>commandArgs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span>commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs<span class="token punctuation">]</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEqual</span><span class="token punctuation">(</span>commandType<span class="token punctuation">,</span> <span class="token string">"LOG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEqual</span><span class="token punctuation">(</span>commandArgs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Here\'s a random number:"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We no longer have to stub out <code class="language-text">Math.random</code> or <code class="language-text">console.log</code> - we’re able to make\nassertions about behavior simply by comparing values.</p>\n<p>Now, it’d be a drag to have to add a new command every time we wanted to\nintroduce a new function, so let’s teach <code class="language-text">performCommand</code> to invoke arbitrary\nfunctions on our behalf:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs <span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>commandType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"GET_RANDOM_NUMBER"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"LOG"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>commandArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"CALL"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>fnArgs<span class="token punctuation">]</span> <span class="token operator">=</span> commandArgs<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">...</span>fnArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unknown command."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This completely obviates the need for <code class="language-text">&quot;GET_RANDOM_NUMBER&quot;</code> and <code class="language-text">&quot;LOG&quot;</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> randomValue <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"CALL"</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"CALL"</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token string">"Here\'s a random number:"</span><span class="token punctuation">,</span> randomValue<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This looks good, but we have one last problem: what if our function were\nasynchronus? Our driver code is synchronous, so we’ll have to stretch our brains\na little bit to come up with a solution. First, let’s look at the business-logic\ncode we’d like to support.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">delayedHello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">cb</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"CALL_ASYNC"</span><span class="token punctuation">,</span> delayedHello<span class="token punctuation">,</span> <span class="token string">\'world\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token punctuation">[</span><span class="token string">"CALL"</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> message<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>What we’re asking for here is the ability to treat <code class="language-text">delayedHello</code> as if it\nwere synchronous. We yield a <code class="language-text">&quot;CALL_ASYNC&quot;</code> command, asking the driver code to\nreturn control to us with the resulting value once it’s available. Let’s see\nwhat the supporting driver code looks like.</p>\n<p>First, we’ll stub in our <code class="language-text">&quot;CALL_ASYNC&quot;</code> command. It should look pretty similar\nto the <code class="language-text">&quot;CALL&quot;</code> command, but with an additional callback parameter for the\nfunction passed in:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs <span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>\n\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>commandType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"CALL"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>fnArgs<span class="token punctuation">]</span> <span class="token operator">=</span> commandArgs<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">...</span>fnArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"CALL_ASYNC"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>fnArgs<span class="token punctuation">]</span> <span class="token operator">=</span> commandArgs<span class="token punctuation">;</span>\n\n      <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">/* ??? */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">...</span>fnArgs<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unknown command."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>So, what goes in that callback? We’re in a tricky situation here, because <em>this</em>\ncode is synchronous, too. We’ve successfully pushed the problem into our\ndriver code, but now we have to actually <em>solve</em> the problem.</p>\n<p>Promises save the day! If we modify performCommand to always return a Promise,\nwe can support both the synchronous and asynchronous use cases.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span> commandType<span class="token punctuation">,</span> <span class="token operator">...</span>commandArgs <span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>commandType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">"CALL"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>fnArgs<span class="token punctuation">]</span> <span class="token operator">=</span> commandArgs<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">...</span>fnArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Resolves immediately with the result of invoking \'fn\'.</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">"CALL_ASYNC"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>fnArgs<span class="token punctuation">]</span> <span class="token operator">=</span> commandArgs<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// Continuation-passing style callback. If given an \'err\' argument, we</span>\n        <span class="token comment">// reject this promise- otherwise, the function was successful and we</span>\n        <span class="token comment">// resolve this promise.</span>\n        <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n          err <span class="token operator">?</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token operator">...</span>fnArgs<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Unknown command."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now, <code class="language-text">performCommand</code> will consistently return a Promise, whether it’s executing\nsynchronous or asynchronous behavior. All we have to do now is modify our <code class="language-text">run</code>\nfunction to work with Promises.</p>\n<p>Here’s our current implementation of <code class="language-text">run</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> command<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      commandResult <span class="token operator">=</span> <span class="token function">performCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      iter<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Ain\'t gonna work! commandResult is a Promise, not a value.</span>\n    <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>commandResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Unfortunately, we can’t use that while-loop anymore, since we don’t want to\nenter another iteration of the loop until our Promise resolves. To solve this,\nwe transform our iteration into recursion:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> lastResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Run the generator until the next `yield` statement</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>lastResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If the generator finished executing, we\'re done here.</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// Otherwise, get a Promise for the result of the next command.</span>\n  <span class="token function">performCommand</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n      <span class="token comment">// If we successfully performed the command, recurse again. This is</span>\n      <span class="token comment">// the equivalent of "going back to the top of the loop".</span>\n      <span class="token punctuation">(</span>commandResult<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> commandResult<span class="token punctuation">)</span>\n\n      <span class="token comment">// If the command failed, throw an error in our iterator and bail out,</span>\n      <span class="token comment">// ending the recursion.</span>\n      <span class="token punctuation">(</span>err<span class="token punctuation">)</span>           <span class="token operator">=></span> iter<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Looks good! This code would probably pass the initial smoke test, but we still\nhave one more gotcha to handle.</p>\n<p>If the user requests a series of synchronous function calls, this implementation\nwill block the JavaScript event loop because it directly makes the recursive\ncall to <code class="language-text">run</code>. Worse, if that series of synchronous function calls gets too\nlong, it’ll blow up with the dreaded “Range Error: Maximum call stack size\nexceeded” error.</p>\n<p>Luckily, fixing this problem is straightforward: wrap the recursive call to\n<code class="language-text">run</code> in a <code class="language-text">setTimeout</code>. This gives the JavaScript runtime a chance to\ncatch its breath and start a fresh call stack.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> lastResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>lastResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">performCommand</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n      <span class="token comment">// Schedule a call to \'run\' on the next event loop, rather than calling it</span>\n      <span class="token comment">// directly.</span>\n      <span class="token punctuation">(</span>commandResult<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> iter<span class="token punctuation">,</span> commandResult<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">(</span>err<span class="token punctuation">)</span>           <span class="token operator">=></span> iter<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token function">exampleGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>At this point, we’ve diverged substantially from the original generator/iterator model,\nbut in the process, we’ve arrived at an implementation of the “Command pattern” using\ngenerators. Using this, we can write our business-logic procedures as generator\nfunctions, which yield abstract commands to <code class="language-text">redux-saga</code>. <code class="language-text">redux-saga</code>then performs the corresponding effect and resumes the generator with the result. This is the\ndefinition of a “saga” as implemented in <code class="language-text">redux-saga</code>.</p>\n<p>Knowing this, we can port the code above with little effort. For reference, the\n‘cps’ effect in the code below stands for ‘continuation-passing style’, or the\npractice of calling a function that takes a callback as its last parameter, such\nas the <code class="language-text">delayedHello</code> function we used above.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> runSaga <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// These functions create \'command objects\' which are analogues of the ones</span>\n<span class="token comment">// we implemented in the above examples.</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> cps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga/effects\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">exampleSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">cps</span><span class="token punctuation">(</span>delayedHello<span class="token punctuation">,</span> <span class="token string">\'world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Replaces `run` and `performCommand`</span>\n<span class="token function">runSaga</span><span class="token punctuation">(</span>exampleSaga<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>We’ve only scratched the surface of <code class="language-text">redux-saga</code>. In the <a href="https://formidable.com/blog/2017/composition-patterns-in-redux-saga/">next article</a>, we’ll\ntalk about the effects it provides beyond simple function invocation, including\nRedux interaction, concurrency and control flow effects, and even saga\ncombinators!</p>',
fields:{slug:"/blog/2017/javascript-power-tools-redux-saga/"},frontmatter:{id:46,authorId:18,categoryIds:[16,17],date:"2017-05-10",pageDescription:"You've probably heard about redux-saga while researching patterns for managing asynchronous behavior in Redux applications. It's a powerful concurrency tool with all sorts of use cases beyond just making API calls.",pageKeywords:"developer, redux-saga, javascript",pageTitle:"JavaScript Power Tools: redux-saga",path:"/2017/javascript-power-tools-redux-saga/",title:"JavaScript Power Tools: redux-saga"}}},pathContext:{slug:"/blog/2017/javascript-power-tools-redux-saga/",prev:{fields:{slug:"/blog/2017/infinite-state-composition-with-freactal/"},frontmatter:{authorId:7,categoryIds:[1,4,5],date:"2017-05-03",id:45,title:"Don't Fear the Fractal: Infinite State Composition with Freactal"}}}}}});