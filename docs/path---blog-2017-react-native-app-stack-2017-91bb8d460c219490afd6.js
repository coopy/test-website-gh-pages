webpackJsonp([0xaa389df71c2],{751:function(e,t){e.exports={data:{markdownRemark:{html:'<p><em>Cross-posted to <a href="https://medium.com/react-native-development/react-native-app-stack-march-2017-f7605e02d46f#.mijw27hzb">Medium</a> by our VP of Engineering, Jani Eväkallio.</em></p>\n<p>This week, we started writing a new React Native app. With every new project, I experience a mix of giddy excitement and intense anxiety: an opportunity to right all past mistakes, and a chance to make a thousand new ones.</p>\n<p>Discussing greenfield tech choices inevitably devolves into <a href="https://en.wiktionary.org/wiki/bikeshedding">bikeshedding</a>. <em>“Uhh, so which async redux middleware should we use?”</em> is an incredibly common time-sink, and at the end of the day, probably not the choice that will decide the success or the failure of your software product.</p>\n<p>That’s why a year ago I wrote <a href="https://github.com/futurice/pepperoni-app-kit">Pepperoni</a>, a React Native boilerplate to end bikeshedding once and for all. Except, of course, it didn’t end. In the year since, <em>everything’s changed!</em></p>\n<p>I still believe that boilerplates are useful to ramp up new projects quickly, but not to enforce library choices. There’s no one-size-fits-all solution.</p>\n<p>Instead, I wanted to share our latest choices as a list, and give shout-outs to the most important new tools and developments of the last year. (Meanwhile, many of these new tools have been added to Pepperoni by the active contributor community.)</p>\n<h2 id="libraries"><a href="#libraries" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Libraries</h2>\n<ul>\n<li><a href="https://facebook.github.io/react-native/">React Native</a>  (duh)</li>\n<li><a href="http://redux.js.org/">Redux</a> architecture following the <a href="https://github.com/erikras/ducks-modular-redux">Ducks</a> pattern</li>\n<li><a href="https://github.com/erikras/ducks-modular-redux">redux-observable</a> for side effects</li>\n<li><a href="https://github.com/rt2zz/redux-persist">redux-persist</a>  for offline caching</li>\n<li><a href="https://reactnavigation.org/">react-navigation</a> for navigation</li>\n<li><a href="https://styled-components.com/">styled-components</a> for UI styling</li>\n</ul>\n<h2 id="tooling"><a href="#tooling" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Tooling</h2>\n<ul>\n<li><a href="https://yarnpkg.com/">Yarn</a> for dependency management</li>\n<li><a href="https://flowtype.org/">Flow</a> for static type checking</li>\n<li><a href="http://facebook.github.io/jest">Jest</a> and <a href="http://airbnb.io/enzyme">Enzyme</a> for testing</li>\n<li><a href="https://github.com/prettier/prettier">Prettier</a> for code formatting</li>\n<li><a href="https://github.com/storybooks/react-native-storybook">Storybook</a> for component style guide</li>\n</ul>\n<h2 id="the-shouts"><a href="#the-shouts" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>The Shouts</h2>\n<p>When I started writing this post, I didn’t realize what is now plain to see: except for Redux, none of these tools were part of my toolkit one year ago.</p>\n<ul>\n<li><a href="https://reactnavigation.org/">react-navigation</a>, though still in its early days, solves the previously lackluster navigation story beautifully, and works well with Redux.</li>\n<li><a href="https://styled-components.com/">styled-components</a>, while strictly speaking is mostly a syntactic improvement over the standard React Native styling, encourages small presentational components and more considered design systems in UI development.</li>\n<li><a href="https://github.com/rt2zz/redux-persist">redux-persist</a> has replaced my home-grown persistence solution, and now plays a central role in our Offline First architecture (more about that at <a href="https://react.london/speakers">React London</a>).</li>\n<li><a href="https://redux-observable.js.org/">redux-observable</a> is our answer to the question, “Which async redux middleware should we use?” It’s expressive enough to solve asynchrony and effects modelling without introducing accidental complexity (I’m looking at you, sagas), and the underlying RxJS 5 is faster and tighter than its predecessor. I have only begun to use redux-observable, but I already love it. (For full disclosure, our budding love story is something of a rebound; my previous partner, <a href="https://github.com/redux-loop/redux-loop">redux-loop</a>, is going through a rewrite, and we need some time apart to see if we still want to be together.)</li>\n</ul>\n<p>Surprisingly missing from this list is <a href="https://facebook.github.io/immutable-js/">Immutable.js</a>. While a great library, its bespoke collections API introduces too many challenges in interfacing with third-party code and serialization boundaries. If I feel we need development-time mutation-safety, I’ll reach for <a href="https://github.com/rtfeldman/seamless-immutable">seamless-immutable</a>, but for now we’re going with pure willpower and static typing.</p>\n<p><a href="https://flowtype.org/">Flow</a>, the gradual static type checker built into the React Native packager toolchain is the biggest improvement in the last year. I can’t stress how important type checking is for creating maintainable, error-free javascript applications. While TypeScript might be more mature (and Flow certainly still suffers from growing pains), you can’t beat Flow for the seamless interop with the React Native ecosystem, including many of the third party libraries in our stack.</p>\n<p>On the tooling side, Facebook Open Source is putting out amazing work beyond Flow. <a href="https://yarnpkg.com/">Yarn</a> is a no-brainer. Faster, reproducible dependency management? Yes, please. <a href="http://facebook.github.io/jest">Jest</a> has seen massive improvements in the last year and is now the simplest React test runner out there. The jury is still out on the long-term effects of <a href="https://facebook.github.io/jest/docs/snapshot-testing.html">snapshot testing</a> on codebase maintainability, so we still use AirBnB’s <a href="http://airbnb.io/enzyme">Enzyme</a> for writing BDD-style UI test assertions.</p>\n<p>Code style arguments used to be a big source of bikeshedding, but there’s no point arguing against the <a href="https://github.com/prettier/prettier">Prettier</a> code formatter. The computer will always win, and it does not care about your feelings. We still use <a href="http://eslint.org/">ESLint</a> to supplement.</p>\n<p>Finally, I can’t leave out React Native <a href="https://github.com/storybooks/react-native-storybook">Storybook</a>. A long-time best practice in web development, style-guide-driven design systems haven’t traditionally reached ubiquity in mobile development, perhaps because of the underpowered component systems in native SDKs. With React Native (and styled-components) there are no excuses not to build interactive pattern libraries on mobile. At Formidable, we take <a href="https://formidable.com/work/style-guides-starbucks-walmart/">style guides</a> seriously.</p>\n<p><em>(You might ask, where’s <a href="http://dev.apollodata.com/">Apollo</a> or <a href="https://facebook.github.io/relay/">Relay</a>? Or <a href="https://github.com/reactjs/reselect">reselect</a> and <a href="https://github.com/paularmstrong/normalizr">normalizr</a>. All great tools, but I see using them as per-project choices to solve specific problems, not as part of “the stack”. If you think I’ve missed something crucial, let me know at <a href="https://twitter.com/jevakallio">@jevakallio</a>.)</em></p>\n<h2 id="in-closing"><a href="#in-closing" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>In Closing</h2>\n<p>This link dump represents my team’s best ideas on how to build mobile apps with React Native in March 2017. I look forward to reviewing this list in a year, and marveling at how far we’ll have come again.</p>\n<p>Here’s a few more shout outs for all the amazing people in the open source community, creating libraries and tools, without which we’d have nothing.</p>\n<p>And remember, there is much more to building great software than choosing your tools. Once chosen, they must be wielded with great precision and applied to a good cause: to create apps your users love, and your future self can look back to and feel a twinge of pride among the inevitable, “I can’t believe we used to do it like THAT back then.”</p>',fields:{slug:"/blog/2017/react-native-app-stack-2017/"},frontmatter:{id:39,authorId:1,categoryIds:[7],date:"2017-03-14",pageDescription:"A look at Formidable's React Native app stack",pageKeywords:"react, react native, developer, tooling",pageTitle:"React Native App Stack, March 2017",path:"/2017/react-native-app-stack-2017/",title:"React Native App Stack, March 2017"}}},pathContext:{slug:"/blog/2017/react-native-app-stack-2017/",prev:{fields:{slug:"/blog/2017/womens-day/"},frontmatter:{authorId:16,categoryIds:[15],date:"2017-03-08",id:38,title:"Be Bold For Change on Women’s Day"}}}}}});