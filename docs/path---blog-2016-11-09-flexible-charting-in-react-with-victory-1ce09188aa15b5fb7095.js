webpackJsonp([0x63c55c9ef363],{736:function(a,t){a.exports={data:{markdownRemark:{html:'<h2 id="victory-react-charts-tailored-to-your-data"><a href="#victory-react-charts-tailored-to-your-data" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Victory: React charts tailored to your data</h2>\n<p>Charting directly with d3 can be difficult, but other libraries are often too simplistic. Enter Victory: React charting that is easier than direct use of d3.js but with as much flexibility as possible. Victory allows fully customized charts ranging from basic to highly complex. To learn more about the complete Victory API, check out the <a href="/open-source/victory/">documentation</a>.</p>\n<h3 id="flexibility-and-customizability"><a href="#flexibility-and-customizability" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Flexibility and Customizability</h3>\n<h4 id="modular-chart-components"><a href="#modular-chart-components" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Modular Chart Components</h4>\n<p>Victory is built around a set of modular chart components that can be combined to create custom charts. Victory favors composition over configuration, allowing users to build up complicated visualizations from smaller components.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>VictoryChart<span class="token operator">></span>\n  <span class="token operator">&lt;</span>VictoryGroup data<span class="token operator">=</span><span class="token punctuation">{</span>myData<span class="token punctuation">}</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>VictoryLine<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>VictoryScatter<span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>VictoryErrorBar<span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>VictoryGroup<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>VictoryChart<span class="token operator">></span></code></pre>\n      </div>\n<h4 id="functional-styles"><a href="#functional-styles" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Functional Styles</h4>\n<p>Functional styles and props are supported whenever possible. Want to make data points below a certain threshold a different color than the rest of the data? It’s easy in Victory.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>fill<span class="token punctuation">:</span> <span class="token punctuation">(</span>datum<span class="token punctuation">)</span> <span class="token operator">=></span> datum <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"red"</span> <span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>\n      </div>\n<h4 id="custom-components"><a href="#custom-components" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Custom Components</h4>\n<p>Victory components render default primitive components (like <code class="language-text">Area</code>, <code class="language-text">Line</code>, <code class="language-text">Bar</code>, <code class="language-text">VictoryLabel</code> etc.). These simple, stateless components are defined in <code class="language-text">defaultProps</code>, and my be easily altered or replaced with completely custom components. Modify the primitives or write components that you need from scratch without having to abandon the rest of the Victory library.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>VictoryChart<span class="token operator">></span>\n  <span class="token operator">&lt;</span>VictoryScatter\n    data<span class="token operator">=</span><span class="token punctuation">{</span>myData<span class="token punctuation">}</span>\n    dataComponent<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>CustomPoint<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>\n    labelComponent<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>VictoryLabel angle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">45</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>\n  <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>VictoryChart<span class="token operator">></span></code></pre>\n      </div>\n<h4 id="react-native-compatible"><a href="#react-native-compatible" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>React Native Compatible</h4>\n<p>To use the full (identical!) Victory API on iOS or Android, simply add Victory Native to your React Native project with <code class="language-text">npm install --save victory-native</code>. Victory Native uses <code class="language-text">react-native-svg</code> to build the same Victory charts that you love from the browser on mobile operating systems.</p>\n<h3 id="flexible-event-system"><a href="#flexible-event-system" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Flexible Event System</h3>\n<p>Victory has a flexible event system with no hard coded events. This allows users to attach event handlers to any specific rendered element or elements, and modify any other specific element or elements. Event handlers are called with the event and all of the props that define the specific element that the event handler was attached to, and modification functions are called with all of the props that define each targeted element.</p>\n<p>Some components, like <code class="language-text">VictoryTooltip</code>, also have <code class="language-text">defaultEvents</code>. Default events on components supplied via <code class="language-text">dataComponent</code>, <code class="language-text">labelComponent</code>, or similar, are picked up. This means that <code class="language-text">labelComponent={&lt;VictoryTooltip/&gt;}</code> will automatically attach events to show or hide tooltips to the rendered data of whichever component is using it, making it one less thing that you have to worry about.</p>\n<h3 id="custom-animations"><a href="#custom-animations" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Custom Animations</h3>\n<p>Victory animations and transitions are also flexible and customizable. Users can add animations for <code class="language-text">onLoad</code>, <code class="language-text">onEnter</code>, and <code class="language-text">onExit</code>, plus use before and after callbacks and set the duration of the transitions. Animation duration, delay, and easing are also easily customizable. Animations can be applied to a single child component within a chart, or applied to a VictoryChart wrapper to sync animations and transitions across all child components.</p>\n<hr>\n<h3 id="and-now-move-quickly-with-formidablecharts"><a href="#and-now-move-quickly-with-formidablecharts" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>And Now, Move Quickly with FormidableCharts</h3>\n<p>While we value the flexibility provided by Victory, we also know it has its tradeoffs, especially when it comes to putting something together quickly while keeping it polished and clean. That’s why we’re excited to introduce <a href="/open-source/formidable-charts/">FormidableCharts</a>, a set of pre-composed, pre-styled Victory components that can be used to display rich, interactive charts. Our theming system not only supports style-based theming, but behavioral and compositional theming as well. Install in your React project with <code class="language-text">npm install --save formidable-charts</code>.</p>\n<h4 id="when-should-i-use-formidablecharts-versus-victory"><a href="#when-should-i-use-formidablecharts-versus-victory" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>When should I use FormidableCharts versus Victory?</h4>\n<table>\n<thead>\n<tr>\n<th>FormidableCharts</th>\n<th>Victory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web and Native Charts</td>\n<td>Web and Native Charts</td>\n</tr>\n<tr>\n<td>Emphasizes Ease of Use</td>\n<td>Emphasizes Flexibility</td>\n</tr>\n<tr>\n<td>Prebuilt Charts</td>\n<td>Modular Chart Components</td>\n</tr>\n<tr>\n<td>Automatic Animations</td>\n<td>Configurable Animations</td>\n</tr>\n<tr>\n<td>Automatic Events</td>\n<td>Flexible Event System</td>\n</tr>\n<tr>\n<td>Readymade Themes</td>\n<td>Custom Themes and Styles</td>\n</tr>\n<tr>\n<td>Custom Feature Support</td>\n</tr>\n</tbody>\n</table>\n<p>Victory and FormidableCharts are free for use under the MIT license and we welcome contributions. If you’re planning on submitting a PR, please review our <a href="https://github.com/FormidableLabs/builder-victory-component/blob/master/CONTRIBUTING.md">Contributing Guide</a> before doing so. If you have an issue you’d like fixed or a feature request, please <a href="https://github.com/FormidableLabs/victory/issues">submit an issue on Github</a>.</p>\n<p><em><a href="/open-source/victory/">Read Documentation for Victory</a></em>.<br>\n<em><a href="https://www.github.com/formidablelabs/victory">View the Victory Source Code on Github</a></em>.<br>\n<em><a href="/open-source/formidable-charts/">Read Documentation for FormidableCharts</a></em>.<br>\n<em><a href="https://www.github.com/formidablelabs/formidable-charts">View the FormidableCharts Source Code on Github</a></em>.</p>\n<p>Star the Victory repo on Github</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=victory&amp;type=star&amp;count=true&amp;size=large" frameborder="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p>Star the FormidableCharts repo on Github</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=formidable-charts&amp;type=star&amp;count=true&amp;size=large" frameborder="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=boygirl&amp;type=follow&amp;count=false&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',fields:{slug:"/blog/2016/11/09/flexible-charting-in-react-with-victory/"},frontmatter:{id:34,authorId:2,categoryIds:[4,10,5,6,1,8],date:"2016-11-09",pageDescription:"",pageKeywords:"",pageTitle:"",path:"/2016/11/09/flexible-charting-in-react-with-victory/",title:"Flexible Charting in React with Victory (and Introducing FormidableCharts)"}}},pathContext:{slug:"/blog/2016/11/09/flexible-charting-in-react-with-victory/",prev:{fields:{slug:"/blog/2016/10/25/on-releasing-my-first-oss-project-at-thirty-five/"},frontmatter:{authorId:4,categoryIds:[2,5,6],date:"2016-10-25",id:33,title:"On releasing my first OSS project at thirty-five"}}}}}});