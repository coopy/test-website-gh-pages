webpackJsonp([37322814671776],{719:function(e,t){e.exports={data:{markdownRemark:{html:'<p>In <a href="https://formidable.com/blog/2016/07/11/let-the-url-do-the-talking-part-1-the-pain-of-react-router-in-redux/">part one</a> of this series, I explored the pains of integrating React Router into purely-functional Redux applications. There, I discovered that not only does React Router dictate an architectural coupling between your state and view layers, but also renders a set of powerful URL-driven Redux patterns impossible.</p>\n<p>The root cause of these problems is that we can&#8217;t lift URL state from React Router into a Redux store. Without this capability, rich URL data can&#8217;t participate in critical application decisions. The URL is a silent observer when it could be a primary source of truth.</p>\n<p>We want the URL to do the talking.</p>\n<p>The open source community isn&#8217;t blind to the problems of using React Router with Redux, and a set of popular libraries provides couple&#8217;s therapy for the two systems. As helpful as that sounds, I worried about their utility after deep-diving on the fundamental problems of integrating Redux and React Router. I needed to ask: do these integration libraries address the root issue of lifting URL state into the store?</p>\n<p>No, and sort of.</p>\n<h2>Acceptance</h2>\n<p><a href="https://github.com/reactjs/react-router-redux"><code>react-router-redux</code></a> (formerly <code>redux-simple-router</code>) is the more popular of the two integrations, advertising itself as &#8220;ruthlessly simple bindings to keep <code>react-router</code> and <code>redux</code> in sync.&#8221; It coordinates state sync between the two libraries when using time travel in Redux DevTools. Great, one big integration problem solved! Let&#8217;s find out how to read our URL state from the Redux store.</p>\n<p>Just kidding! You can&#8217;t.</p>\n<p>From the <code>README</code>: &#8220;You should not read the location state directly from the Redux store. This is because React Router operates asynchronously (to handle things such as dynamically-loaded components) and your component tree may not yet be updated in sync with your Redux state. You should rely on the props passed by React Router, as they are only updated after it has processed all asynchronous code.&#8221;</p>\n<p>URL state is in the store, but you can&#8217;t use it. Confused? You&#8217;re not the only one.</p>\n<p>In response to a GitHub issue with similar concerns, maintainer Tim Dorr writes: &#8220;Don&#8217;t use this library to connect Redux middleware and reducers to the Router. There are numerous problems with trying to use that (mostly centered around it being impossible to serialize the router&#8217;s state) and not the intended purposes of this library. [Its] sole purpose is to keep track of locations for developer-only features like time travel.&#8221;</p>\n<p><code>react-router-redux</code> accepts that lifting URL state from React Router is a tough problem, and therefore doesn&#8217;t try (or claim) to solve it. While your DevTools work again, you&#8217;re still stuck with container components and a tangled architecture.</p>\n<h2>Bargaining</h2>\n<p><a href="https://github.com/acdlite/redux-router"><code>redux-router</code></a> is the old guard of the two integration libraries, and it comes closest to solving the core problem of lifting React Router&#8217;s URL state into Redux. Not only does <code>redux-router</code> sync the URL, params, query objects, etc. to the store, but it also guarantees that these values are valid and safe to read, unlike <code>react-router-redux</code>.</p>\n<p>Routing stays in sync with Redux dev tools. Selectors that inspect URL state can live above <code>connect()</code>. All is well.</p>\n<p><code>redux-router</code>â€™s noble goal comes at a price. The library author, Andrew Clark, best explains the limitations of <code>redux-router</code>:</p>\n<p>&#8220;The [React Router] data is not all serializable (because Components and functions are not directly serializable) and therefore this can cause issues with some devTools extensions and libraries that help in saving the store to the browser session. This can be mitigated if the libraries offer ways to ignore serializing parts of the store but is not always possible.</p>\n<p>&#8220;<code>redux-router</code> takes advantage of the RouterContext to still use much of React Router&#8217;s internal logic. However, redux-router must still implement many things that React Router already does on its own and can cause delays in upgrade paths.</p>\n<p>&#8220;redux-router must provide a slightly different top level API (due to 2) even if the Route logic/matching is identical.&#8221;</p>\n<p>These limitations cause enough concern to both the maintainers and the community that the <code>README</code> not only brands the library as &#8220;experimental&#8221;, but also <em>recommends</em> <code>react-router-redux</code>. Since <code>react-router-redux</code> doesn&#8217;t solve the same problem, following this recommendation sticks us into a loop.</p>\n<p><code>redux-router</code> is reaching the end of the bargaining stage as it realizes that negotiating a fragile peace with React Router isn&#8217;t sustainable.</p>\n<p>However, if you&#8217;re 100% stuck with React Router, need to read URL state in Redux, and can handle some instability and uncertainty, use <code>redux-router</code>, since it focuses on the important problem of lifting URL state into the store.</p>\n<h2>Redux-First Routing</h2>\n<p>After discovering the problems of the two integration libraries, we decided that routing in Redux needed a fresh start. In <a href="https://formidable.com/blog/2016/07/25/let-the-url-do-the-talking-part-3-empower-the-url-with-redux-little-router/">part 3</a>, we&#8217;ll learn about <a href="https://github.com/FormidableLabs/redux-little-router"><code>redux-little-router</code></a>, how it operates from the top (Redux) and not the middle (React), and the useful tools it provides to route flexibly without eating your existing architecture.</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=formidablelabs&amp;repo=redux-little-router&amp;type=star&amp;count=true&amp;size=large" frameborder="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 9.090909090909092%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://ghbtns.com/github-btn.html?user=tptee&amp;type=follow&amp;count=true&amp;size=large" frameborder="0" scrolling="0" style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',fields:{slug:"/blog/2016/07/19/let-the-url-do-the-talking-part-2-bargaining-and-acceptance-with-redux-and-react-router/"},frontmatter:{id:17,authorId:7,categoryIds:[5,1],date:"2016-07-19",pageDescription:"",pageKeywords:"",pageTitle:"",path:"/2016/07/19/let-the-url-do-the-talking-part-2-bargaining-and-acceptance-with-redux-and-react-router/",title:"Let the URL do the Talking, Part 2: Bargaining and Acceptance with Redux and React Router"}}},pathContext:{slug:"/blog/2016/07/19/let-the-url-do-the-talking-part-2-bargaining-and-acceptance-with-redux-and-react-router/",prev:{fields:{slug:"/blog/2016/07/11/let-the-url-do-the-talking-part-1-the-pain-of-react-router-in-redux/"},frontmatter:{authorId:7,categoryIds:[1],date:"2016-07-11",id:16,title:"Let the URL do the Talking, Part 1: The Pain of React Router in Redux"}}}}}});