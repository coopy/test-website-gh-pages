webpackJsonp([0x80a7a239c660],{752:function(n,a){n.exports={data:{markdownRemark:{html:'<p>In the past <a href="https://formidable.com/blog/category/redux-saga/">two articles</a>, we’ve talked a lot about <code class="language-text">redux-saga</code> in the <em>abstract</em>, without much concern for real-world applications. Now that we’re equipped with new knowledge, we’re ready to jump in and start putting the pieces back together.</p>\n<p>First, we’ll take a look at a pattern for structuring behavior in single-page\napplications using <code class="language-text">redux-saga</code> and <code class="language-text">redux-little-router</code>, and then we’ll build\na saga that implements the business logic for a basic form.</p>\n<h2 id="pairing-code-classlanguage-textredux-sagacode-with-code-classlanguage-textredux-little-routercode"><a href="#pairing-code-classlanguage-textredux-sagacode-with-code-classlanguage-textredux-little-routercode" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Pairing <code class="language-text">redux-saga</code> with <code class="language-text">redux-little-router</code></h2>\n<p>I really love <a href="https://github.com/FormidableLabs/redux-little-router"><code class="language-text">redux-little-router</code></a>, and I’m not just saying that because it’s a\nFormidable project. When you’re already reading from the Redux store to access\nstate and dispatching Redux actions to modify state, it feels very elegant to\ninteract with the browser location the same way. However, when used in\nconjunction with <code class="language-text">redux-saga</code>, we gain an additional benefit: the ability to\ntrigger behaviors in response to browser location changes. Why is this beneficial?</p>\n<p>Well, first off, it separates the business logic associated with route changes\nfrom the view lifecycle. When I’m building a React application, I typically\nprefer to keep my React components as stateless and declarative as possible, and\nshoehorning business logic into React components makes that difficult at best.</p>\n<p>Secondly, in a large project, it typically behooves us to avoid running too many\nconcurrent sagas at once because it can quickly become difficult to determine\nthe ramifications of dispatching a particular action. If we’re monitoring for\nroute changes from within <code class="language-text">redux-saga</code>, we can ensure that the only sagas\nrunning at any given time are those relevant to the current route.</p>\n<p>With this approach, each route becomes a ‘mini-application’, which starts up\nwhen the user navigates to it and shuts down when they navigate away. Let’s take\na look at how we could implement this.</p>\n<p>First, we’ll start out with a <code class="language-text">rootSaga</code> which will be the entry point for our\nentire application.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Next, we’ll put together a <code class="language-text">configureStore</code> function which attaches both\n<code class="language-text">redux-little-router</code> and <code class="language-text">redux-saga</code> to our Redux store.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">REDUCERS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  todos<span class="token punctuation">:</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">,</span>\n  debug<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> action<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">ROUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">\'/\'</span>               <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos\'</span>          <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/new\'</span>      <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/:id\'</span>      <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/:id/edit\'</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">configureStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span>initialState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    reducer     <span class="token punctuation">:</span> routerReducer<span class="token punctuation">,</span>\n    enhancer    <span class="token punctuation">:</span> routerEnhancer<span class="token punctuation">,</span>\n    middleware  <span class="token punctuation">:</span> routerMiddleware<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">routerForBrowser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> routes<span class="token punctuation">:</span> <span class="token constant">ROUTES</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>\n    <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span><span class="token constant">REDUCERS</span><span class="token punctuation">,</span>\n      router<span class="token punctuation">:</span> routerReducer<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    initialState<span class="token punctuation">,</span>\n    <span class="token function">compose</span><span class="token punctuation">(</span>\n      routerEnhancer<span class="token punctuation">,</span>\n      <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>\n        sagaMiddleware<span class="token punctuation">,</span>\n        routerMiddleware<span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>rootSaga<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> initialRouterState <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>router<span class="token punctuation">;</span>\n  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">initializeCurrentLocation</span><span class="token punctuation">(</span>initialRouterState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> store<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>The first thing to notice here is the <code class="language-text">initializeCurrentLocation</code> action we’re\ndispatching during initialization. Since we’ve already started our <code class="language-text">rootSaga</code>,\nwe can <code class="language-text">take</code> that action right away.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">"ROUTER_LOCATION_CHANGED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Let’s go a little further, and make our saga <code class="language-text">take</code> <em>any</em>\n“ROUTER<em>LOCATION</em>CHANGED” action.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>To help us make our code more functional, redux-saga provides a helper called\n<code class="language-text">takeEvery</code> which does something somewhat similar.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>There’s a problem here, though. Suppose the inner saga was performing some\nlong-running action (emulated by a 10-second <code class="language-text">delay</code> in the example below). What\nwould happen if the user started navigating around the site quickly?</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Wait <span class="token number">10</span> seconds<span class="token punctuation">,</span> <span class="token keyword">for</span> some reason\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You guessed it. This is Race-condition Central, population: you. Fortunately,\nredux-saga provides a helper called <code class="language-text">takeLatest</code>, which ensures that only one\nsaga is running at a time by cancelling the previously running saga when a new\naction comes in. Let’s make the change, and add some exception handling so we\ncan see this behavior <em>in vivo</em>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">takeLatest</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token function">cancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Fine, fine! Your location WAS"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>So, we’ve now built a saga with the following properties:</p>\n<ul>\n<li>Starts a new saga whenever a location change occurs</li>\n<li>Cancels the saga associated with the previous location change</li>\n<li>Uses the current location to perform effects</li>\n</ul>\n<p>From here, we’ll take advantage of the third bullet point to branch into\ndifferent sagas based on the current route. First, let’s extract that inline\nsaga into the module scope and give it a name.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">navigationSaga</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your current location is:"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">takeLatest</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">,</span> navigationSaga<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now, let’s create some stubs for the different behavior we want to perform\nat each route.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">navigationSaga</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token string">\'/\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">\'/todos\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">\'/todos/:id\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">\'/todos/new\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> <span class="token string">\'/todos/:id/edit\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Starting up the root saga!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">takeLatest</span><span class="token punctuation">(</span><span class="token string">\'ROUTER_LOCATION_CHANGED\'</span><span class="token punctuation">,</span> navigationSaga<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This seems like it could get really messy before long. And what if someone\nforgets a break statement? Let’s keep refactoring.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">SAGA_FOR_ROUTE</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">\'/\'</span>               <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">homeSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos\'</span>          <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">listTodosSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/:id\'</span>      <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">showTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/new\'</span>      <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">\'/todos/:id/edit\'</span> <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">editTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">navigationSaga</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> location <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> saga <span class="token operator">=</span> <span class="token constant">SAGA_FOR_ROUTE</span><span class="token punctuation">[</span>location<span class="token punctuation">.</span>route<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>saga<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>saga<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token punctuation">[</span>\n    <span class="token function">takeLatest</span><span class="token punctuation">(</span><span class="token string">"ROUTER_LOCATION_CHANGED"</span><span class="token punctuation">,</span> navigationSaga<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Wonderful! In addition to being less verbose, <code class="language-text">redux-saga</code> can log our sagas by\nname if they are cancelled due to a ROUTER<em>LOCATION</em>CHANGED (in development\nmode, anyways).</p>\n<p>Now, each route-specific saga can react to being started and stopped completely\non its own. For instance, if we were to implement <code class="language-text">editTodoSaga</code>, it would\nperhaps look something like this.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">editTodoSaga</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> location<span class="token punctuation">.</span>params<span class="token punctuation">;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Some behaviors which happen once when the user navigates to this route</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">startedEditingTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>ensureTodoExistsLocally<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Start up some long-running behaviors tied to this saga\'s lifetime.</span>\n    <span class="token keyword">yield</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token function">fork</span><span class="token punctuation">(</span>takeEvery<span class="token punctuation">,</span> <span class="token string">"BLAH"</span><span class="token punctuation">,</span> handleBlahSaga<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">fork</span><span class="token punctuation">(</span>someOtherLongRunningSaga<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Whether we finished naturally or got cancelled by our parent because the</span>\n    <span class="token comment">// route changed, clean up after ourselves before exiting for good.</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">finishedEditingTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="create-todo-form"><a href="#create-todo-form" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>‘Create Todo’ form</h2>\n<p>Along those lines, let’s take a look at a “mini-application” we could\nimplement. Specifically, we’ll write an implementation for the <code class="language-text">newTodoSaga</code>\nassociated with the <code class="language-text">/todos/new</code> route above.</p>\n<p>We’ll assume that somewhere in the view layer there’s a form the user’s\nfilling out and eventually submitting - we want to implement <em>just</em> the\nbusiness logic for it. Let’s write a quick outline of that.</p>\n<ul>\n<li>Wait for the user to submit the form</li>\n<li>\n<p>Perform client-side validation</p>\n<ul>\n<li>If client-side validation fails, show an error message and start over</li>\n</ul>\n</li>\n<li>\n<p>Send the form data to the server</p>\n<ul>\n<li>If successful, show the user their new to-do</li>\n<li>If not successful, show an error message and start over</li>\n</ul>\n</li>\n</ul>\n<p>Sounds easy enough. Let’s start out with an empty saga.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>First things first: we need to wait for the user to submit a form. We’ll assume\nthat the view layer will dispatch an action called <code class="language-text">SUBMIT_TODO_FORM</code> with the\nform data as payload.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Next, let’s write a quick validation function…</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">validateForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>formData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>formData<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'"name" field must not be blank!\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>…and invoke it like so.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>At this point, the user can submit their form for validation, but there are two\nproblems: if their input fails validation, we’d like to tell them why, and\nnaturally, we’d like to allow them to resubmit the form.</p>\n<p>Let’s handle these issues separately.</p>\n<p>First, we need to allow the user to retry form submission. The easiest way to do\nthis is with a loop which will not exit until their input passes validation.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Note that the <code class="language-text">continue</code> statement is not strictly necessary, but I consider it\ngood form in this circumstance. It explicitly indicates the expected flow of\nthis procedure, rather than expecting the reader to notice that the loop will start\nover. We’ll see why this is important in a moment.</p>\n<p>We’ve handled both the valid and invalid cases, so now let’s assume that we\nhave a <code class="language-text">showErrorNotification</code> action creator which dispatches some action\nindicating that the application should show an error notification.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>By the time we reach the <code class="language-text">break</code> statement, we know we have valid form\ndata, so let’s send it to an API endpoint. We are going to make an\nassumption that we have a function called <code class="language-text">createTodo</code> which somehow does\nthis for us. (I’ve had success with these sorts of thin layers over the Fetch\nAPI.)</p>\n<p>Because this API call could fail for all kinds of reasons, we need to make sure\nwe handle those cases by using a simple try-catch block, just like we did\nbefore. (Notice that we’ve removed the <code class="language-text">break</code> statement.)</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>createTodoApi<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Notice that our earlier <code class="language-text">continue</code> statement has now become crucial to the\ncorrect behavior. If we hadn’t been so conscientious, this would have caused a\nbug and probably made us feel kinda dumb for missing it.</p>\n<p>And yes, I <em>can</em> hear you saying “but this is PROCEDURAL!” to which I say,\n“business logic is inherently procedural, and expressing it as such makes our\n<em>intent</em> clearer.” That being said, it is easy to let code like this get out of\nhand, so it’s important to stay disciplined and keep it focused.</p>\n<p>Business logic code should tell a <em>story</em>. Like a good storyteller, it should\ndraw focus to the important details and elide over the minute ones. That is,\nunless we ask for them.</p>\n<p>Looking at this code, we see the story:</p>\n<ul>\n<li>Wait for a <code class="language-text">SUBMIT_TODO_FORM</code> action</li>\n<li>\n<p>Call <code class="language-text">validateForm</code> with action.payload.formData</p>\n<ul>\n<li>If an error occurs, notify the user and start over</li>\n<li>Otherwise, proceed to the next step</li>\n</ul>\n</li>\n<li>\n<p>POST the form data to the server</p>\n<ul>\n<li>If an error occurs, notify the user and start over</li>\n</ul>\n</li>\n</ul>\n<p>Looks like we’ve stuck to the business logic pretty well so far. Now then, the\nonly thing left is to show the user their new to-do. Since we’re using\n<code class="language-text">redux-little-router</code>, we’ll dispatch a Redux action which routes them to the\n“show todo” page.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>createTodoApi<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">yield</span> <span class="token function">routerPush</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todo<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is good enough, but let’s take a short aside to talk about saga structure\nand separation of responsibilities. This saga’s primary responsibility is\nvalidating and submitting form data to the server. We know we want to redirect\nthe user’s browser <em>after</em> all that happens, but with the way things are\ncurrently structured, the sequence of events isn’t all that obvious. At a high\nlevel, we’re doing this:</p>\n<ul>\n<li>When the user successfully creates a new todo,</li>\n<li>Show the user the newly created todo</li>\n</ul>\n<p>Let’s separate these two concerns completely.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">awaitSuccessfulTodoCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">\'SUBMIT_TODO_FORM\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>validateForm<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>createTodoApi<span class="token punctuation">,</span> formData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> todo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showErrorNotification</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">continue</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">newTodoSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>awaitSuccessfulTodoCreation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">showSuccessNotification</span><span class="token punctuation">(</span><span class="token string">"Congratulations! You created a new todo."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">yield</span> <span class="token function">routerPush</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>todo<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Now there’s no question as to whether or not <code class="language-text">todo</code> has been created. We\nobserve that the only ‘escape route’ from <code class="language-text">awaitSuccessfulTodoCreation</code> is the\n<code class="language-text">return</code> statement, which can only happen after a successful todo creation. So\nif control returns to <code class="language-text">newTodoSaga</code>, we’re certain that it’s time to show a\nsuccess message and send the user on their way.</p>\n<p>However, also note what happens if the user navigates <em>away</em> from <code class="language-text">/todos/new</code>\nduring this process: <code class="language-text">redux-saga</code> will cancel <code class="language-text">newTodoSaga</code>. Moreover, if\n<code class="language-text">newTodoSaga</code> is still blocking on <code class="language-text">awaitSuccessfulTodoCreation</code>, the\ncancellation will propagate “downward” to that as well, cleanly exiting the\nwhole shebang without causing any more effects.</p>\n<p>Either way, we now have a saga that is responsible for doing one thing only. We\ncan think about this part of the application in isolation, and that goes a long\nway towards wrangling in the complexity of larger single-page-applications.</p>\n<h2 id="conclusion"><a href="#conclusion" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Conclusion</h2>\n<p>This about wraps up our series on <code class="language-text">redux-saga</code>. I hope you’ve learned a lot and\nthat you’re able to make use of some of these ideas in your own projects!\nQuestions, comments, and suggestions are welcome - I’m available on Twitter at\n<a href="https://twitter.com/mhink1103">@mhink1103</a>. Let me know what you’d like to see\nnext in the Javascript Power Tools series.</p>\n<p>(Also, thanks to all the rad folks at Formidable for their contributions and\nsuggestions- especially Becca Lee, without whom this would all still be a\njumbled mess of .md files on my laptop.)</p>',
fields:{slug:"/blog/2017/real-world-redux-saga-patterns/"},frontmatter:{id:49,authorId:18,categoryIds:[16,17],date:"2017-06-07",pageDescription:"redux-saga is a valuable, versatile library that can be used to clarify the behavior and interaction patterns of complex single-page-applications and forms.",pageKeywords:"redux-saga, javascript, developer",pageTitle:"Javascript Power Tools: Real-world redux-saga Patterns",path:"/2017/real-world-redux-saga-patterns/",title:"Javascript Power Tools Part III: Real-world redux-saga Patterns"}}},pathContext:{slug:"/blog/2017/real-world-redux-saga-patterns/",prev:{fields:{slug:"/blog/2017/live-editing-react-components/"},frontmatter:{authorId:19,categoryIds:[1,5],date:"2017-05-31",id:48,title:"Live Editing React Components for Better Documentation"}}}}}});