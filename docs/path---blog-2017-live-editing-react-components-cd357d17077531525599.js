webpackJsonp([46193934067565],{749:function(e,t){e.exports={data:{markdownRemark:{html:'<p>As stated in a previous post about documentation, <a href="https://formidable.com/blog/2017/oss-portfolios/">“Your Docs And You”</a>, the best response\nto well made docs is simply, “I get it!”</p>\n<p>When writing documentation, it’s sometimes easy to forget that someone on the other end will actually be reading your docs. Writing docs can be as difficult as writing a book (albeit, most of the time much shorter). If the docs are too long and dull, you run the risk of the reader losing interest, but if they’re too short and prioritize brevity over solid information, they won’t end up being helpful.</p>\n<p>When looking at React projects on GitHub, you can see that the most common approach to documentation is to add some descriptions, a couple of code examples, and one or more demos. With the addition of docs on the API of a library or project, this delivers a fairly complete picture to aspiring users.</p>\n<p>While these resources are invaluable for learning how single parts of a React\nproject work, it’s tough to get a big picture overview of how it <em>feels</em> to use. People learn and become familiar with something tremendously faster when they can simply use and play around with it. So why can’t we add a feature enabling this idea in our docs?</p>\n<h2 id="a-playground-full-of-components"><a href="#a-playground-full-of-components" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>A playground full of components</h2>\n<p>To solve this problem, Formidable introduced <a href="https://formidable.com/open-source/component-playground/">component-playground</a>.\nIt allows you to render editable code side alongside of a demo, and updates\nthe demoed React components in real time.</p>\n<p>Using this project has allowed us to build docs that immediately give you feedback on\nhow a project’s components behave, what they look like, and most importantly what it <em>feels</em> like to use the library.</p>\n<p>By enabling users to immediately use a library, we prevent users from becoming\nfrustrated by unpractical, dull docs.</p>\n<h2 id="spreading-the-live-editing-love"><a href="#spreading-the-live-editing-love" aria-hidden="true" class="anchor"><span aria-hidden=\'true\' class=\'anchor-icon\' /></a>Spreading the live-editing love</h2>\n<p>The next step beyond adding live, editable demos to docs, was to add live, editable React code to every project that might need it. This idea subsequently led to the creation of a leaner alternative to <a href="https://formidable.com/open-source/component-playground/">component-playground</a>.</p>\n<p>Say hi to component-playground’s little brother, <a href="https://github.com/FormidableLabs/react-live">react-live</a>: a production-focused playground for live editing React components.</p>\n<p><a href="https://github.com/FormidableLabs/react-live">React Live</a> is built to fulfill the additional requirements that arise when adding a live edit feature to a project.</p>\n<ol>\n<li>\n<p>It is built modularly, so it comes with separate components that are similar to the ones that make up component-playground. Namely an editor, a preview, an error view, and a provider.</p>\n</li>\n<li>\n<p>In a production-focused web app that users load every day, it is important for React Live to load as quickly as possible. That’s why it’s built using Bublé and Prism, bringing its size down to just 65kB gzipped. It’s also server-side renderable!</p>\n</li>\n<li>\n<p>It is easily and highly styleable, and thus easy to integrate into every possible environment that you might want to use it in.</p>\n</li>\n</ol>\n<p>These new improvements make it possible to use React Live creatively for new features, some of which we haven’t even thought of yet.</p>\n<p>For example, want to make the homepage itself editable in your next docs? Consider it possible! <a href="https://www.styled-components.com">styled-components docs</a>, the first website using <a href="https://github.com/FormidableLabs/react-live">React Live</a> in production, is doing just that.</p>\n<p>We’re excited to see what you might come up with! Ping us on <a href="https://twitter.com/FormidableLabs">Twitter</a> to show us what you’ve created with React Live.</p>',fields:{slug:"/blog/2017/live-editing-react-components/"},frontmatter:{id:48,authorId:19,categoryIds:[1,5],date:"2017-05-31",pageDescription:"React Live: A production-focused playground for live editing React components",pageKeywords:"react, live editing react, javascript, developer",pageTitle:"Live Editing React Components for Better Documentation",path:"/2017/live-editing-react-components/",title:"Live Editing React Components for Better Documentation"}}},pathContext:{slug:"/blog/2017/live-editing-react-components/",prev:{fields:{slug:"/blog/2017/composition-patterns-in-redux-saga/"},frontmatter:{authorId:18,categoryIds:[16,17],date:"2017-05-17",id:47,title:"JavaScript Power Tools Part II: Composition Patterns in redux-saga"}}}}}});